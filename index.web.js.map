{
  "version": 3,
  "sources": ["../../../../.yarn/berry/cache/webgl-obj-loader-npm-2.0.8-707f9c4d06-10c0.zip/node_modules/webgl-obj-loader/dist/webgl-obj-loader.min.js", "../src/utils/index.ts", "../src/sys_web/loadersWeb.ts", "../src/constants.ts", "../src/utils/arrays.ts", "../src/gpuProfiler.ts", "../src/sys_web/htmlUtils.ts", "../src/stats.ts", "../src/utils/string.ts", "../src/passes/swHair/shared/hairSliceHeadsBuffer.ts", "../src/utils/webgpu.ts", "../src/sys_web/input.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/utils.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec2.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec3.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec2-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/mat3-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec3-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/mat4-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/quat.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/quat-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec4.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/vec4-impl.ts", "../../../../.yarn/berry/cache/wgpu-matrix-npm-2.9.1-57ffb78627-10c0.zip/node_modules/src/wgpu-matrix.ts", "../src/utils/typedArrayView.ts", "../src/passes/swHair/shared/hairTilesResultBuffer.ts", "../src/passes/swHair/shared/hairTileSegmentsBuffer.ts", "../src/utils/matrices.ts", "../src/passes/shadowMapPass/shared/getMVP_ShadowSourceMatrix.ts", "../src/passes/shadowMapPass/shared/getShadowMapPreviewSize.ts", "../src/scene/sdfCollider/sdfCollider.ts", "../src/utils/bounds.ts", "../src/passes/simulation/grids/grids.wgsl.ts", "../src/passes/simulation/grids/gridData.ts", "../src/passes/renderUniformsBuffer.ts", "../src/camera.ts", "../src/passes/_shaderSnippets/fullscreenTriangle.wgsl.ts", "../src/passes/_shared/bindingsCache.ts", "../src/passes/_shared/shared.ts", "../src/passes/_shaderSnippets/aces.wgsl.ts", "../src/passes/_shaderSnippets/dither.wgsl.ts", "../src/passes/_shaderSnippets/linearDepth.wgsl.ts", "../src/passes/_shaderSnippets/shaderSnippets.wgls.ts", "../src/passes/aoPass/shared/textureAo.wgsl.ts", "../src/passes/presentPass/presentPass.wgsl.ts", "../src/passes/presentPass/dbgShadows.wgsl.ts", "../src/passes/presentPass/presentPass.ts", "../src/scene/gpuMesh.ts", "../src/passes/_shaderSnippets/pbr.wgsl.ts", "../src/passes/shadowMapPass/shared/sampleShadows.wgsl.ts", "../src/passes/drawMeshes/drawMeshesPass.wgsl.ts", "../src/passes/drawMeshes/drawMeshesPass.ts", "../src/passes/_shaderSnippets/noise.wgsl.ts", "../src/passes/drawBackgroundGradient/drawBackgroundGradientPass.wgsl.ts", "../src/passes/drawBackgroundGradient/drawBackgroundGradientPass.ts", "../src/scene/hair/hairIndexBuffer.ts", "../src/scene/hair/hairDataBuffer.ts", "../src/scene/hair/hairPointsPositionsBuffer.ts", "../src/scene/hair/hairShadingBuffer.ts", "../src/scene/hair/hairTangentsBuffer.ts", "../src/passes/hwHair/shaderImpl/hwRasterizeHair.wgsl.ts", "../src/passes/hwHair/hwHairPass.wgsl.ts", "../src/passes/hwHair/hwHairPass.ts", "../src/passes/swHair/shaderImpl/swRasterizeHair.wgsl.ts", "../src/passes/swHair/shaderImpl/tileUtils.wgsl.ts", "../src/passes/swHair/hairTilesPass.wgsl.ts", "../src/passes/swHair/hairTilesPass.ts", "../src/passes/swHair/shared/hairRasterizerResultBuffer.ts", "../src/passes/hairCombine/hairCombinePass.wgsl.ts", "../src/passes/hairCombine/hairCombinePass.ts", "../src/passes/swHair/shared/hairSlicesDataBuffer.ts", "../src/passes/swHair/shaderImpl/processHairSegment.wgsl.ts", "../src/passes/swHair/shaderImpl/reduceHairSlices.wgsl.ts", "../src/passes/swHair/hairFinePass.wgsl.ts", "../src/passes/swHair/hairFinePass.ts", "../src/passes/hairShadingPass/marschner.wgsl.ts", "../src/passes/hairShadingPass/hairShadingPass.wgsl.ts", "../src/passes/hairShadingPass/hairShadingPass.ts", "../src/passes/shadowMapPass/shadowMapPass.wgsl.ts", "../src/passes/shadowMapPass/shadowMapHairPass.wgsl.ts", "../src/passes/shadowMapPass/shadowMapPass.ts", "../src/passes/aoPass/gtao.wgsl.ts", "../src/passes/aoPass/aoPass.wgsl.ts", "../src/passes/aoPass/aoPass.ts", "../src/passes/simulation/simulationUniformsBuffer.ts", "../src/scene/hair/hairSegmentLengthsBuffer.ts", "../src/passes/simulation/grids/densityGradAndWindGrid.wgsl.ts", "../src/passes/simulation/grids/densityVelocityGrid.wgsl.ts", "../src/passes/simulation/shaderImpl/collisions.wgsl.ts", "../src/passes/simulation/shaderImpl/constraints.wgsl.ts", "../src/passes/simulation/shaderImpl/integration.wgsl.ts", "../src/passes/simulation/hairSimIntegrationPass.wgsl.ts", "../src/passes/simulation/hairSimIntegrationPass.ts", "../src/passes/_shared/volumeDebug.ts", "../src/passes/_shaderSnippets/nagaFixes.ts", "../src/passes/drawSdfCollider/drawSdfColliderPass.wgsl.ts", "../src/passes/drawSdfCollider/drawSdfColliderPass.ts", "../src/passes/drawGridDbg/drawGridDbgPass.wgsl.ts", "../src/passes/drawGridDbg/drawGridDbgPass.ts", "../src/passes/simulation/gridPostSimPass.wgsl.ts", "../src/passes/simulation/gridPostSimPass.ts", "../src/passes/simulation/gridPreSimPass.wgsl.ts", "../src/passes/simulation/gridPreSimPass.ts", "../src/passes/drawGizmo/drawGizmoPass.wgsl.ts", "../src/passes/drawGizmo/drawGizmoPass.ts", "../src/renderer.ts", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/color/toString.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/utils/common.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/color/interpret.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/color/math.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/color/Color.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/Controller.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/dom/dom.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/BooleanController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/OptionController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/StringController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/NumberController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/NumberControllerBox.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/NumberControllerSlider.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/FunctionController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/ColorController.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/utils/css.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/gui/saveDialogue.html.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/controllers/ControllerFactory.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/utils/requestAnimationFrame.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/dom/CenteredDiv.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/gui/GUI.js", "../../../../.yarn/berry/cache/dat.gui-npm-0.7.9-8b75a80db8-10c0.zip/node_modules/dat.gui/src/dat/index.js", "../src/sys_web/gui.ts", "../src/sys_web/cavasResize.ts", "../src/utils/errors.ts", "../src/scene/hair/hairObject.ts", "../src/scene/hair/tfxFileLoader.ts", "../src/scene/objLoader.ts", "../src/scene/sdfCollider/sdfUtils.ts", "../src/scene/sdfCollider/createSdfColliderFromBinary.ts", "../src/scene/loadScene.ts", "../src/utils/raycast.ts", "../src/utils/raycast.plane.ts", "../src/sys_web/gizmo.ts", "../src/sys_web/onGpuProfilerResult.ts", "../src/index.web.ts"],
  "sourcesContent": ["!function(e,t){if(\"object\"==typeof exports&&\"object\"==typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{var n=t();for(var a in n)(\"object\"==typeof exports?exports:e)[a]=n[a]}}(\"undefined\"!=typeof self?self:this,(function(){return function(e){var t={};function n(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var s in e)n.d(a,s,function(t){return e[t]}.bind(null,s));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=0)}({\"./src/index.ts\":\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n/*! exports provided: OBJ, Attribute, DuplicateAttributeException, Layout, Material, MaterialLibrary, Mesh, TYPES, downloadModels, downloadMeshes, initMeshBuffers, deleteMeshBuffers, version */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OBJ\", function() { return OBJ; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mesh */ \"./src/mesh.ts\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return _mesh__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\\n\\n/* harmony import */ var _material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material */ \"./src/material.ts\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Material\", function() { return _material__WEBPACK_IMPORTED_MODULE_1__[\"Material\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MaterialLibrary\", function() { return _material__WEBPACK_IMPORTED_MODULE_1__[\"MaterialLibrary\"]; });\\n\\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layout */ \"./src/layout.ts\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Attribute\", function() { return _layout__WEBPACK_IMPORTED_MODULE_2__[\"Attribute\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DuplicateAttributeException\", function() { return _layout__WEBPACK_IMPORTED_MODULE_2__[\"DuplicateAttributeException\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Layout\", function() { return _layout__WEBPACK_IMPORTED_MODULE_2__[\"Layout\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TYPES\", function() { return _layout__WEBPACK_IMPORTED_MODULE_2__[\"TYPES\"]; });\\n\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"downloadModels\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"downloadModels\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"downloadMeshes\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"downloadMeshes\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"initMeshBuffers\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"initMeshBuffers\"]; });\\n\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"deleteMeshBuffers\", function() { return _utils__WEBPACK_IMPORTED_MODULE_3__[\"deleteMeshBuffers\"]; });\\n\\n\\n\\n\\n\\nconst version = \"2.0.3\";\\nconst OBJ = {\\n    Attribute: _layout__WEBPACK_IMPORTED_MODULE_2__[\"Attribute\"],\\n    DuplicateAttributeException: _layout__WEBPACK_IMPORTED_MODULE_2__[\"DuplicateAttributeException\"],\\n    Layout: _layout__WEBPACK_IMPORTED_MODULE_2__[\"Layout\"],\\n    Material: _material__WEBPACK_IMPORTED_MODULE_1__[\"Material\"],\\n    MaterialLibrary: _material__WEBPACK_IMPORTED_MODULE_1__[\"MaterialLibrary\"],\\n    Mesh: _mesh__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\\n    TYPES: _layout__WEBPACK_IMPORTED_MODULE_2__[\"TYPES\"],\\n    downloadModels: _utils__WEBPACK_IMPORTED_MODULE_3__[\"downloadModels\"],\\n    downloadMeshes: _utils__WEBPACK_IMPORTED_MODULE_3__[\"downloadMeshes\"],\\n    initMeshBuffers: _utils__WEBPACK_IMPORTED_MODULE_3__[\"initMeshBuffers\"],\\n    deleteMeshBuffers: _utils__WEBPACK_IMPORTED_MODULE_3__[\"deleteMeshBuffers\"],\\n    version,\\n};\\n/**\\n * @namespace\\n */\\n\\n\\n\\n//# sourceURL=webpack:///./src/index.ts?')},\"./src/layout.ts\":\n/*!***********************!*\\\n  !*** ./src/layout.ts ***!\n  \\***********************/\n/*! exports provided: TYPES, DuplicateAttributeException, Attribute, Layout */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TYPES\", function() { return TYPES; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DuplicateAttributeException\", function() { return DuplicateAttributeException; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Attribute\", function() { return Attribute; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Layout\", function() { return Layout; });\\nvar TYPES;\\n(function (TYPES) {\\n    TYPES[\"BYTE\"] = \"BYTE\";\\n    TYPES[\"UNSIGNED_BYTE\"] = \"UNSIGNED_BYTE\";\\n    TYPES[\"SHORT\"] = \"SHORT\";\\n    TYPES[\"UNSIGNED_SHORT\"] = \"UNSIGNED_SHORT\";\\n    TYPES[\"FLOAT\"] = \"FLOAT\";\\n})(TYPES || (TYPES = {}));\\n/**\\n * An exception for when two or more of the same attributes are found in the\\n * same layout.\\n * @private\\n */\\nclass DuplicateAttributeException extends Error {\\n    /**\\n     * Create a DuplicateAttributeException\\n     * @param {Attribute} attribute - The attribute that was found more than\\n     *        once in the {@link Layout}\\n     */\\n    constructor(attribute) {\\n        super(`found duplicate attribute: ${attribute.key}`);\\n    }\\n}\\n/**\\n * Represents how a vertex attribute should be packed into an buffer.\\n * @private\\n */\\nclass Attribute {\\n    /**\\n     * Create an attribute. Do not call this directly, use the predefined\\n     * constants.\\n     * @param {string} key - The name of this attribute as if it were a key in\\n     *        an Object. Use the camel case version of the upper snake case\\n     *        const name.\\n     * @param {number} size - The number of components per vertex attribute.\\n     *        Must be 1, 2, 3, or 4.\\n     * @param {string} type - The data type of each component for this\\n     *        attribute. Possible values:<br/>\\n     *        \"BYTE\": signed 8-bit integer, with values in [-128, 127]<br/>\\n     *        \"SHORT\": signed 16-bit integer, with values in\\n     *            [-32768, 32767]<br/>\\n     *        \"UNSIGNED_BYTE\": unsigned 8-bit integer, with values in\\n     *            [0, 255]<br/>\\n     *        \"UNSIGNED_SHORT\": unsigned 16-bit integer, with values in\\n     *            [0, 65535]<br/>\\n     *        \"FLOAT\": 32-bit floating point number\\n     * @param {boolean} normalized - Whether integer data values should be\\n     *        normalized when being casted to a float.<br/>\\n     *        If true, signed integers are normalized to [-1, 1].<br/>\\n     *        If true, unsigned integers are normalized to [0, 1].<br/>\\n     *        For type \"FLOAT\", this parameter has no effect.\\n     */\\n    constructor(key, size, type, normalized = false) {\\n        this.key = key;\\n        this.size = size;\\n        this.type = type;\\n        this.normalized = normalized;\\n        switch (type) {\\n            case \"BYTE\":\\n            case \"UNSIGNED_BYTE\":\\n                this.sizeOfType = 1;\\n                break;\\n            case \"SHORT\":\\n            case \"UNSIGNED_SHORT\":\\n                this.sizeOfType = 2;\\n                break;\\n            case \"FLOAT\":\\n                this.sizeOfType = 4;\\n                break;\\n            default:\\n                throw new Error(`Unknown gl type: ${type}`);\\n        }\\n        this.sizeInBytes = this.sizeOfType * size;\\n    }\\n}\\n/**\\n * A class to represent the memory layout for a vertex attribute array. Used by\\n * {@link Mesh}\\'s TBD(...) method to generate a packed array from mesh data.\\n * <p>\\n * Layout can sort of be thought of as a C-style struct declaration.\\n * {@link Mesh}\\'s TBD(...) method will use the {@link Layout} instance to\\n * pack an array in the given attribute order.\\n * <p>\\n * Layout also is very helpful when calling a WebGL context\\'s\\n * <code>vertexAttribPointer</code> method. If you\\'ve created a buffer using\\n * a Layout instance, then the same Layout instance can be used to determine\\n * the size, type, normalized, stride, and offset parameters for\\n * <code>vertexAttribPointer</code>.\\n * <p>\\n * For example:\\n * <pre><code>\\n *\\n * const index = glctx.getAttribLocation(shaderProgram, \"pos\");\\n * glctx.vertexAttribPointer(\\n *   layout.position.size,\\n *   glctx[layout.position.type],\\n *   layout.position.normalized,\\n *   layout.position.stride,\\n *   layout.position.offset);\\n * </code></pre>\\n * @see {@link Mesh}\\n */\\nclass Layout {\\n    /**\\n     * Create a Layout object. This constructor will throw if any duplicate\\n     * attributes are given.\\n     * @param {Array} ...attributes - An ordered list of attributes that\\n     *        describe the desired memory layout for each vertex attribute.\\n     *        <p>\\n     *\\n     * @see {@link Mesh}\\n     */\\n    constructor(...attributes) {\\n        this.attributes = attributes;\\n        this.attributeMap = {};\\n        let offset = 0;\\n        let maxStrideMultiple = 0;\\n        for (const attribute of attributes) {\\n            if (this.attributeMap[attribute.key]) {\\n                throw new DuplicateAttributeException(attribute);\\n            }\\n            // Add padding to satisfy WebGL\\'s requirement that all\\n            // vertexAttribPointer calls have an offset that is a multiple of\\n            // the type size.\\n            if (offset % attribute.sizeOfType !== 0) {\\n                offset += attribute.sizeOfType - (offset % attribute.sizeOfType);\\n                console.warn(\"Layout requires padding before \" + attribute.key + \" attribute\");\\n            }\\n            this.attributeMap[attribute.key] = {\\n                attribute: attribute,\\n                size: attribute.size,\\n                type: attribute.type,\\n                normalized: attribute.normalized,\\n                offset: offset,\\n            };\\n            offset += attribute.sizeInBytes;\\n            maxStrideMultiple = Math.max(maxStrideMultiple, attribute.sizeOfType);\\n        }\\n        // Add padding to the end to satisfy WebGL\\'s requirement that all\\n        // vertexAttribPointer calls have a stride that is a multiple of the\\n        // type size. Because we\\'re putting differently sized attributes into\\n        // the same buffer, it must be padded to a multiple of the largest\\n        // type size.\\n        if (offset % maxStrideMultiple !== 0) {\\n            offset += maxStrideMultiple - (offset % maxStrideMultiple);\\n            console.warn(\"Layout requires padding at the back\");\\n        }\\n        this.stride = offset;\\n        for (const attribute of attributes) {\\n            this.attributeMap[attribute.key].stride = this.stride;\\n        }\\n    }\\n}\\n// Geometry attributes\\n/**\\n * Attribute layout to pack a vertex\\'s x, y, & z as floats\\n *\\n * @see {@link Layout}\\n */\\nLayout.POSITION = new Attribute(\"position\", 3, TYPES.FLOAT);\\n/**\\n * Attribute layout to pack a vertex\\'s normal\\'s x, y, & z as floats\\n *\\n * @see {@link Layout}\\n */\\nLayout.NORMAL = new Attribute(\"normal\", 3, TYPES.FLOAT);\\n/**\\n * Attribute layout to pack a vertex\\'s normal\\'s x, y, & z as floats.\\n * <p>\\n * This value will be computed on-the-fly based on the texture coordinates.\\n * If no texture coordinates are available, the generated value will default to\\n * 0, 0, 0.\\n *\\n * @see {@link Layout}\\n */\\nLayout.TANGENT = new Attribute(\"tangent\", 3, TYPES.FLOAT);\\n/**\\n * Attribute layout to pack a vertex\\'s normal\\'s bitangent x, y, & z as floats.\\n * <p>\\n * This value will be computed on-the-fly based on the texture coordinates.\\n * If no texture coordinates are available, the generated value will default to\\n * 0, 0, 0.\\n * @see {@link Layout}\\n */\\nLayout.BITANGENT = new Attribute(\"bitangent\", 3, TYPES.FLOAT);\\n/**\\n * Attribute layout to pack a vertex\\'s texture coordinates\\' u & v as floats\\n *\\n * @see {@link Layout}\\n */\\nLayout.UV = new Attribute(\"uv\", 2, TYPES.FLOAT);\\n// Material attributes\\n/**\\n * Attribute layout to pack an unsigned short to be interpreted as a the index\\n * into a {@link Mesh}\\'s materials list.\\n * <p>\\n * The intention of this value is to send all of the {@link Mesh}\\'s materials\\n * into multiple shader uniforms and then reference the current one by this\\n * vertex attribute.\\n * <p>\\n * example glsl code:\\n *\\n * <pre><code>\\n *  // this is bound using MATERIAL_INDEX\\n *  attribute int materialIndex;\\n *\\n *  struct Material {\\n *    vec3 diffuse;\\n *    vec3 specular;\\n *    vec3 specularExponent;\\n *  };\\n *\\n *  uniform Material materials[MAX_MATERIALS];\\n *\\n *  // ...\\n *\\n *  vec3 diffuse = materials[materialIndex];\\n *\\n * </code></pre>\\n * TODO: More description & test to make sure subscripting by attributes even\\n * works for webgl\\n *\\n * @see {@link Layout}\\n */\\nLayout.MATERIAL_INDEX = new Attribute(\"materialIndex\", 1, TYPES.SHORT);\\nLayout.MATERIAL_ENABLED = new Attribute(\"materialEnabled\", 1, TYPES.UNSIGNED_SHORT);\\nLayout.AMBIENT = new Attribute(\"ambient\", 3, TYPES.FLOAT);\\nLayout.DIFFUSE = new Attribute(\"diffuse\", 3, TYPES.FLOAT);\\nLayout.SPECULAR = new Attribute(\"specular\", 3, TYPES.FLOAT);\\nLayout.SPECULAR_EXPONENT = new Attribute(\"specularExponent\", 3, TYPES.FLOAT);\\nLayout.EMISSIVE = new Attribute(\"emissive\", 3, TYPES.FLOAT);\\nLayout.TRANSMISSION_FILTER = new Attribute(\"transmissionFilter\", 3, TYPES.FLOAT);\\nLayout.DISSOLVE = new Attribute(\"dissolve\", 1, TYPES.FLOAT);\\nLayout.ILLUMINATION = new Attribute(\"illumination\", 1, TYPES.UNSIGNED_SHORT);\\nLayout.REFRACTION_INDEX = new Attribute(\"refractionIndex\", 1, TYPES.FLOAT);\\nLayout.SHARPNESS = new Attribute(\"sharpness\", 1, TYPES.FLOAT);\\nLayout.MAP_DIFFUSE = new Attribute(\"mapDiffuse\", 1, TYPES.SHORT);\\nLayout.MAP_AMBIENT = new Attribute(\"mapAmbient\", 1, TYPES.SHORT);\\nLayout.MAP_SPECULAR = new Attribute(\"mapSpecular\", 1, TYPES.SHORT);\\nLayout.MAP_SPECULAR_EXPONENT = new Attribute(\"mapSpecularExponent\", 1, TYPES.SHORT);\\nLayout.MAP_DISSOLVE = new Attribute(\"mapDissolve\", 1, TYPES.SHORT);\\nLayout.ANTI_ALIASING = new Attribute(\"antiAliasing\", 1, TYPES.UNSIGNED_SHORT);\\nLayout.MAP_BUMP = new Attribute(\"mapBump\", 1, TYPES.SHORT);\\nLayout.MAP_DISPLACEMENT = new Attribute(\"mapDisplacement\", 1, TYPES.SHORT);\\nLayout.MAP_DECAL = new Attribute(\"mapDecal\", 1, TYPES.SHORT);\\nLayout.MAP_EMISSIVE = new Attribute(\"mapEmissive\", 1, TYPES.SHORT);\\n\\n\\n//# sourceURL=webpack:///./src/layout.ts?')},\"./src/material.ts\":\n/*!*************************!*\\\n  !*** ./src/material.ts ***!\n  \\*************************/\n/*! exports provided: Material, MaterialLibrary */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Material\", function() { return Material; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaterialLibrary\", function() { return MaterialLibrary; });\\n/**\\n * The Material class.\\n */\\nclass Material {\\n    constructor(name) {\\n        this.name = name;\\n        /**\\n         * Constructor\\n         * @param {String} name the unique name of the material\\n         */\\n        // The values for the following attibutes\\n        // are an array of R, G, B normalized values.\\n        // Ka - Ambient Reflectivity\\n        this.ambient = [0, 0, 0];\\n        // Kd - Defuse Reflectivity\\n        this.diffuse = [0, 0, 0];\\n        // Ks\\n        this.specular = [0, 0, 0];\\n        // Ke\\n        this.emissive = [0, 0, 0];\\n        // Tf\\n        this.transmissionFilter = [0, 0, 0];\\n        // d\\n        this.dissolve = 0;\\n        // valid range is between 0 and 1000\\n        this.specularExponent = 0;\\n        // either d or Tr; valid values are normalized\\n        this.transparency = 0;\\n        // illum - the enum of the illumination model to use\\n        this.illumination = 0;\\n        // Ni - Set to \"normal\" (air).\\n        this.refractionIndex = 1;\\n        // sharpness\\n        this.sharpness = 0;\\n        // map_Kd\\n        this.mapDiffuse = emptyTextureOptions();\\n        // map_Ka\\n        this.mapAmbient = emptyTextureOptions();\\n        // map_Ks\\n        this.mapSpecular = emptyTextureOptions();\\n        // map_Ns\\n        this.mapSpecularExponent = emptyTextureOptions();\\n        // map_d\\n        this.mapDissolve = emptyTextureOptions();\\n        // map_aat\\n        this.antiAliasing = false;\\n        // map_bump or bump\\n        this.mapBump = emptyTextureOptions();\\n        // disp\\n        this.mapDisplacement = emptyTextureOptions();\\n        // decal\\n        this.mapDecal = emptyTextureOptions();\\n        // map_Ke\\n        this.mapEmissive = emptyTextureOptions();\\n        // refl - when the reflection type is a cube, there will be multiple refl\\n        //        statements for each side of the cube. If it\\'s a spherical\\n        //        reflection, there should only ever be one.\\n        this.mapReflections = [];\\n    }\\n}\\nconst SENTINEL_MATERIAL = new Material(\"sentinel\");\\n/**\\n * https://en.wikipedia.org/wiki/Wavefront_.obj_file\\n * http://paulbourke.net/dataformats/mtl/\\n */\\nclass MaterialLibrary {\\n    constructor(data) {\\n        this.data = data;\\n        /**\\n         * Constructs the Material Parser\\n         * @param mtlData the MTL file contents\\n         */\\n        this.currentMaterial = SENTINEL_MATERIAL;\\n        this.materials = {};\\n        this.parse();\\n    }\\n    /* eslint-disable camelcase */\\n    /* the function names here disobey camelCase conventions\\n     to make parsing/routing easier. see the parse function\\n     documentation for more information. */\\n    /**\\n     * Creates a new Material object and adds to the registry.\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_newmtl(tokens) {\\n        const name = tokens[0];\\n        // console.info(\\'Parsing new Material:\\', name);\\n        this.currentMaterial = new Material(name);\\n        this.materials[name] = this.currentMaterial;\\n    }\\n    /**\\n     * See the documenation for parse_Ka below for a better understanding.\\n     *\\n     * Given a list of possible color tokens, returns an array of R, G, and B\\n     * color values.\\n     *\\n     * @param tokens the tokens associated with the directive\\n     * @return {*} a 3 element array containing the R, G, and B values\\n     * of the color.\\n     */\\n    parseColor(tokens) {\\n        if (tokens[0] == \"spectral\") {\\n            throw new Error(\"The MTL parser does not support spectral curve files. You will \" +\\n                \"need to convert the MTL colors to either RGB or CIEXYZ.\");\\n        }\\n        if (tokens[0] == \"xyz\") {\\n            throw new Error(\"The MTL parser does not currently support XYZ colors. Either convert the \" +\\n                \"XYZ values to RGB or create an issue to add support for XYZ\");\\n        }\\n        // from my understanding of the spec, RGB values at this point\\n        // will either be 3 floats or exactly 1 float, so that\\'s the check\\n        // that i\\'m going to perform here\\n        if (tokens.length == 3) {\\n            const [x, y, z] = tokens;\\n            return [parseFloat(x), parseFloat(y), parseFloat(z)];\\n        }\\n        // Since tokens at this point has a length of 3, we\\'re going to assume\\n        // it\\'s exactly 1, skipping the check for 2.\\n        const value = parseFloat(tokens[0]);\\n        // in this case, all values are equivalent\\n        return [value, value, value];\\n    }\\n    /**\\n     * Parse the ambient reflectivity\\n     *\\n     * A Ka directive can take one of three forms:\\n     *   - Ka r g b\\n     *   - Ka spectral file.rfl\\n     *   - Ka xyz x y z\\n     * These three forms are mutually exclusive in that only one\\n     * declaration can exist per material. It is considered a syntax\\n     * error otherwise.\\n     *\\n     * The \"Ka\" form specifies the ambient reflectivity using RGB values.\\n     * The \"g\" and \"b\" values are optional. If only the \"r\" value is\\n     * specified, then the \"g\" and \"b\" values are assigned the value of\\n     * \"r\". Values are normally in the range 0.0 to 1.0. Values outside\\n     * of this range increase or decrease the reflectivity accordingly.\\n     *\\n     * The \"Ka spectral\" form specifies the ambient reflectivity using a\\n     * spectral curve. \"file.rfl\" is the name of the \".rfl\" file containing\\n     * the curve data. \"factor\" is an optional argument which is a multiplier\\n     * for the values in the .rfl file and defaults to 1.0 if not specified.\\n     *\\n     * The \"Ka xyz\" form specifies the ambient reflectivity using CIEXYZ values.\\n     * \"x y z\" are the values of the CIEXYZ color space. The \"y\" and \"z\" arguments\\n     * are optional and take on the value of the \"x\" component if only \"x\" is\\n     * specified. The \"x y z\" values are normally in the range of 0.0 to 1.0 and\\n     * increase or decrease ambient reflectivity accordingly outside of that\\n     * range.\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Ka(tokens) {\\n        this.currentMaterial.ambient = this.parseColor(tokens);\\n    }\\n    /**\\n     * Diffuse Reflectivity\\n     *\\n     * Similar to the Ka directive. Simply replace \"Ka\" with \"Kd\" and the rules\\n     * are the same\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Kd(tokens) {\\n        this.currentMaterial.diffuse = this.parseColor(tokens);\\n    }\\n    /**\\n     * Spectral Reflectivity\\n     *\\n     * Similar to the Ka directive. Simply replace \"Ks\" with \"Kd\" and the rules\\n     * are the same\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Ks(tokens) {\\n        this.currentMaterial.specular = this.parseColor(tokens);\\n    }\\n    /**\\n     * Emissive\\n     *\\n     * The amount and color of light emitted by the object.\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Ke(tokens) {\\n        this.currentMaterial.emissive = this.parseColor(tokens);\\n    }\\n    /**\\n     * Transmission Filter\\n     *\\n     * Any light passing through the object is filtered by the transmission\\n     * filter, which only allows specific colors to pass through. For example, Tf\\n     * 0 1 0 allows all of the green to pass through and filters out all of the\\n     * red and blue.\\n     *\\n     * Similar to the Ka directive. Simply replace \"Ks\" with \"Tf\" and the rules\\n     * are the same\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Tf(tokens) {\\n        this.currentMaterial.transmissionFilter = this.parseColor(tokens);\\n    }\\n    /**\\n     * Specifies the dissolve for the current material.\\n     *\\n     * Statement: d [-halo] `factor`\\n     *\\n     * Example: \"d 0.5\"\\n     *\\n     * The factor is the amount this material dissolves into the background. A\\n     * factor of 1.0 is fully opaque. This is the default when a new material is\\n     * created. A factor of 0.0 is fully dissolved (completely transparent).\\n     *\\n     * Unlike a real transparent material, the dissolve does not depend upon\\n     * material thickness nor does it have any spectral character. Dissolve works\\n     * on all illumination models.\\n     *\\n     * The dissolve statement allows for an optional \"-halo\" flag which indicates\\n     * that a dissolve is dependent on the surface orientation relative to the\\n     * viewer. For example, a sphere with the following dissolve, \"d -halo 0.0\",\\n     * will be fully dissolved at its center and will appear gradually more opaque\\n     * toward its edge.\\n     *\\n     * \"factor\" is the minimum amount of dissolve applied to the material. The\\n     * amount of dissolve will vary between 1.0 (fully opaque) and the specified\\n     * \"factor\". The formula is:\\n     *\\n     *    dissolve = 1.0 - (N*v)(1.0-factor)\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_d(tokens) {\\n        // this ignores the -halo option as I can\\'t find any documentation on what\\n        // it\\'s supposed to be.\\n        this.currentMaterial.dissolve = parseFloat(tokens.pop() || \"0\");\\n    }\\n    /**\\n     * The \"illum\" statement specifies the illumination model to use in the\\n     * material. Illumination models are mathematical equations that represent\\n     * various material lighting and shading effects.\\n     *\\n     * The illumination number can be a number from 0 to 10. The following are\\n     * the list of illumination enumerations and their summaries:\\n     * 0. Color on and Ambient off\\n     * 1. Color on and Ambient on\\n     * 2. Highlight on\\n     * 3. Reflection on and Ray trace on\\n     * 4. Transparency: Glass on, Reflection: Ray trace on\\n     * 5. Reflection: Fresnel on and Ray trace on\\n     * 6. Transparency: Refraction on, Reflection: Fresnel off and Ray trace on\\n     * 7. Transparency: Refraction on, Reflection: Fresnel on and Ray trace on\\n     * 8. Reflection on and Ray trace off\\n     * 9. Transparency: Glass on, Reflection: Ray trace off\\n     * 10. Casts shadows onto invisible surfaces\\n     *\\n     * Example: \"illum 2\" to specify the \"Highlight on\" model\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_illum(tokens) {\\n        this.currentMaterial.illumination = parseInt(tokens[0]);\\n    }\\n    /**\\n     * Optical Density (AKA Index of Refraction)\\n     *\\n     * Statement: Ni `index`\\n     *\\n     * Example: Ni 1.0\\n     *\\n     * Specifies the optical density for the surface. `index` is the value\\n     * for the optical density. The values can range from 0.001 to 10.  A value of\\n     * 1.0 means that light does not bend as it passes through an object.\\n     * Increasing the optical_density increases the amount of bending. Glass has\\n     * an index of refraction of about 1.5. Values of less than 1.0 produce\\n     * bizarre results and are not recommended\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Ni(tokens) {\\n        this.currentMaterial.refractionIndex = parseFloat(tokens[0]);\\n    }\\n    /**\\n     * Specifies the specular exponent for the current material. This defines the\\n     * focus of the specular highlight.\\n     *\\n     * Statement: Ns `exponent`\\n     *\\n     * Example: \"Ns 250\"\\n     *\\n     * `exponent` is the value for the specular exponent. A high exponent results\\n     * in a tight, concentrated highlight. Ns Values normally range from 0 to\\n     * 1000.\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_Ns(tokens) {\\n        this.currentMaterial.specularExponent = parseInt(tokens[0]);\\n    }\\n    /**\\n     * Specifies the sharpness of the reflections from the local reflection map.\\n     *\\n     * Statement: sharpness `value`\\n     *\\n     * Example: \"sharpness 100\"\\n     *\\n     * If a material does not have a local reflection map defined in its material\\n     * defintions, sharpness will apply to the global reflection map defined in\\n     * PreView.\\n     *\\n     * `value` can be a number from 0 to 1000. The default is 60. A high value\\n     * results in a clear reflection of objects in the reflection map.\\n     *\\n     * Tip: sharpness values greater than 100 introduce aliasing effects in\\n     * flat surfaces that are viewed at a sharp angle.\\n     *\\n     * @param tokens the tokens associated with the directive\\n     */\\n    parse_sharpness(tokens) {\\n        this.currentMaterial.sharpness = parseInt(tokens[0]);\\n    }\\n    /**\\n     * Parses the -cc flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -cc flag\\n     * @param options the Object of all image options\\n     */\\n    parse_cc(values, options) {\\n        options.colorCorrection = values[0] == \"on\";\\n    }\\n    /**\\n     * Parses the -blendu flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -blendu flag\\n     * @param options the Object of all image options\\n     */\\n    parse_blendu(values, options) {\\n        options.horizontalBlending = values[0] == \"on\";\\n    }\\n    /**\\n     * Parses the -blendv flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -blendv flag\\n     * @param options the Object of all image options\\n     */\\n    parse_blendv(values, options) {\\n        options.verticalBlending = values[0] == \"on\";\\n    }\\n    /**\\n     * Parses the -boost flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -boost flag\\n     * @param options the Object of all image options\\n     */\\n    parse_boost(values, options) {\\n        options.boostMipMapSharpness = parseFloat(values[0]);\\n    }\\n    /**\\n     * Parses the -mm flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -mm flag\\n     * @param options the Object of all image options\\n     */\\n    parse_mm(values, options) {\\n        options.modifyTextureMap.brightness = parseFloat(values[0]);\\n        options.modifyTextureMap.contrast = parseFloat(values[1]);\\n    }\\n    /**\\n     * Parses and sets the -o, -s, and -t  u, v, and w values\\n     *\\n     * @param values the values passed to the -o, -s, -t flag\\n     * @param {Object} option the Object of either the -o, -s, -t option\\n     * @param {Integer} defaultValue the Object of all image options\\n     */\\n    parse_ost(values, option, defaultValue) {\\n        while (values.length < 3) {\\n            values.push(defaultValue.toString());\\n        }\\n        option.u = parseFloat(values[0]);\\n        option.v = parseFloat(values[1]);\\n        option.w = parseFloat(values[2]);\\n    }\\n    /**\\n     * Parses the -o flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -o flag\\n     * @param options the Object of all image options\\n     */\\n    parse_o(values, options) {\\n        this.parse_ost(values, options.offset, 0);\\n    }\\n    /**\\n     * Parses the -s flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -s flag\\n     * @param options the Object of all image options\\n     */\\n    parse_s(values, options) {\\n        this.parse_ost(values, options.scale, 1);\\n    }\\n    /**\\n     * Parses the -t flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -t flag\\n     * @param options the Object of all image options\\n     */\\n    parse_t(values, options) {\\n        this.parse_ost(values, options.turbulence, 0);\\n    }\\n    /**\\n     * Parses the -texres flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -texres flag\\n     * @param options the Object of all image options\\n     */\\n    parse_texres(values, options) {\\n        options.textureResolution = parseFloat(values[0]);\\n    }\\n    /**\\n     * Parses the -clamp flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -clamp flag\\n     * @param options the Object of all image options\\n     */\\n    parse_clamp(values, options) {\\n        options.clamp = values[0] == \"on\";\\n    }\\n    /**\\n     * Parses the -bm flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -bm flag\\n     * @param options the Object of all image options\\n     */\\n    parse_bm(values, options) {\\n        options.bumpMultiplier = parseFloat(values[0]);\\n    }\\n    /**\\n     * Parses the -imfchan flag and updates the options object with the values.\\n     *\\n     * @param values the values passed to the -imfchan flag\\n     * @param options the Object of all image options\\n     */\\n    parse_imfchan(values, options) {\\n        options.imfChan = values[0];\\n    }\\n    /**\\n     * This only exists for relection maps and denotes the type of reflection.\\n     *\\n     * @param values the values passed to the -type flag\\n     * @param options the Object of all image options\\n     */\\n    parse_type(values, options) {\\n        options.reflectionType = values[0];\\n    }\\n    /**\\n     * Parses the texture\\'s options and returns an options object with the info\\n     *\\n     * @param tokens all of the option tokens to pass to the texture\\n     * @return {Object} a complete object of objects to apply to the texture\\n     */\\n    parseOptions(tokens) {\\n        const options = emptyTextureOptions();\\n        let option;\\n        let values;\\n        const optionsToValues = {};\\n        tokens.reverse();\\n        while (tokens.length) {\\n            // token is guaranteed to exists here, hence the explicit \"as\"\\n            const token = tokens.pop();\\n            if (token.startsWith(\"-\")) {\\n                option = token.substr(1);\\n                optionsToValues[option] = [];\\n            }\\n            else if (option) {\\n                optionsToValues[option].push(token);\\n            }\\n        }\\n        for (option in optionsToValues) {\\n            if (!optionsToValues.hasOwnProperty(option)) {\\n                continue;\\n            }\\n            values = optionsToValues[option];\\n            const optionMethod = this[`parse_${option}`];\\n            if (optionMethod) {\\n                optionMethod.bind(this)(values, options);\\n            }\\n        }\\n        return options;\\n    }\\n    /**\\n     * Parses the given texture map line.\\n     *\\n     * @param tokens all of the tokens representing the texture\\n     * @return a complete object of objects to apply to the texture\\n     */\\n    parseMap(tokens) {\\n        // according to wikipedia:\\n        // (https://en.wikipedia.org/wiki/Wavefront_.obj_file#Vendor_specific_alterations)\\n        // there is at least one vendor that places the filename before the options\\n        // rather than after (which is to spec). All options start with a \\'-\\'\\n        // so if the first token doesn\\'t start with a \\'-\\', we\\'re going to assume\\n        // it\\'s the name of the map file.\\n        let optionsString;\\n        let filename = \"\";\\n        if (!tokens[0].startsWith(\"-\")) {\\n            [filename, ...optionsString] = tokens;\\n        }\\n        else {\\n            filename = tokens.pop();\\n            optionsString = tokens;\\n        }\\n        const options = this.parseOptions(optionsString);\\n        options.filename = filename.replace(/\\\\\\\\/g, \"/\");\\n        return options;\\n    }\\n    /**\\n     * Parses the ambient map.\\n     *\\n     * @param tokens list of tokens for the map_Ka direcive\\n     */\\n    parse_map_Ka(tokens) {\\n        this.currentMaterial.mapAmbient = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the diffuse map.\\n     *\\n     * @param tokens list of tokens for the map_Kd direcive\\n     */\\n    parse_map_Kd(tokens) {\\n        this.currentMaterial.mapDiffuse = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the specular map.\\n     *\\n     * @param tokens list of tokens for the map_Ks direcive\\n     */\\n    parse_map_Ks(tokens) {\\n        this.currentMaterial.mapSpecular = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the emissive map.\\n     *\\n     * @param tokens list of tokens for the map_Ke direcive\\n     */\\n    parse_map_Ke(tokens) {\\n        this.currentMaterial.mapEmissive = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the specular exponent map.\\n     *\\n     * @param tokens list of tokens for the map_Ns direcive\\n     */\\n    parse_map_Ns(tokens) {\\n        this.currentMaterial.mapSpecularExponent = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the dissolve map.\\n     *\\n     * @param tokens list of tokens for the map_d direcive\\n     */\\n    parse_map_d(tokens) {\\n        this.currentMaterial.mapDissolve = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the anti-aliasing option.\\n     *\\n     * @param tokens list of tokens for the map_aat direcive\\n     */\\n    parse_map_aat(tokens) {\\n        this.currentMaterial.antiAliasing = tokens[0] == \"on\";\\n    }\\n    /**\\n     * Parses the bump map.\\n     *\\n     * @param tokens list of tokens for the map_bump direcive\\n     */\\n    parse_map_bump(tokens) {\\n        this.currentMaterial.mapBump = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the bump map.\\n     *\\n     * @param tokens list of tokens for the bump direcive\\n     */\\n    parse_bump(tokens) {\\n        this.parse_map_bump(tokens);\\n    }\\n    /**\\n     * Parses the disp map.\\n     *\\n     * @param tokens list of tokens for the disp direcive\\n     */\\n    parse_disp(tokens) {\\n        this.currentMaterial.mapDisplacement = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the decal map.\\n     *\\n     * @param tokens list of tokens for the map_decal direcive\\n     */\\n    parse_decal(tokens) {\\n        this.currentMaterial.mapDecal = this.parseMap(tokens);\\n    }\\n    /**\\n     * Parses the refl map.\\n     *\\n     * @param tokens list of tokens for the refl direcive\\n     */\\n    parse_refl(tokens) {\\n        this.currentMaterial.mapReflections.push(this.parseMap(tokens));\\n    }\\n    /**\\n     * Parses the MTL file.\\n     *\\n     * Iterates line by line parsing each MTL directive.\\n     *\\n     * This function expects the first token in the line\\n     * to be a valid MTL directive. That token is then used\\n     * to try and run a method on this class. parse_[directive]\\n     * E.g., the `newmtl` directive would try to call the method\\n     * parse_newmtl. Each parsing function takes in the remaining\\n     * list of tokens and updates the currentMaterial class with\\n     * the attributes provided.\\n     */\\n    parse() {\\n        const lines = this.data.split(/\\\\r?\\\\n/);\\n        for (let line of lines) {\\n            line = line.trim();\\n            if (!line || line.startsWith(\"#\")) {\\n                continue;\\n            }\\n            const [directive, ...tokens] = line.split(/\\\\s/);\\n            const parseMethod = this[`parse_${directive}`];\\n            if (!parseMethod) {\\n                console.warn(`Don\\'t know how to parse the directive: \"${directive}\"`);\\n                continue;\\n            }\\n            // console.log(`Parsing \"${directive}\" with tokens: ${tokens}`);\\n            parseMethod.bind(this)(tokens);\\n        }\\n        // some cleanup. These don\\'t need to be exposed as public data.\\n        delete this.data;\\n        this.currentMaterial = SENTINEL_MATERIAL;\\n    }\\n}\\nfunction emptyTextureOptions() {\\n    return {\\n        colorCorrection: false,\\n        horizontalBlending: true,\\n        verticalBlending: true,\\n        boostMipMapSharpness: 0,\\n        modifyTextureMap: {\\n            brightness: 0,\\n            contrast: 1,\\n        },\\n        offset: { u: 0, v: 0, w: 0 },\\n        scale: { u: 1, v: 1, w: 1 },\\n        turbulence: { u: 0, v: 0, w: 0 },\\n        clamp: false,\\n        textureResolution: null,\\n        bumpMultiplier: 1,\\n        imfChan: null,\\n        filename: \"\",\\n    };\\n}\\n\\n\\n//# sourceURL=webpack:///./src/material.ts?')},\"./src/mesh.ts\":\n/*!*********************!*\\\n  !*** ./src/mesh.ts ***!\n  \\*********************/\n/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Mesh; });\\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ \"./src/layout.ts\");\\n\\n/**\\n * The main Mesh class. The constructor will parse through the OBJ file data\\n * and collect the vertex, vertex normal, texture, and face information. This\\n * information can then be used later on when creating your VBOs. See\\n * OBJ.initMeshBuffers for an example of how to use the newly created Mesh\\n */\\nclass Mesh {\\n    /**\\n     * Create a Mesh\\n     * @param {String} objectData - a string representation of an OBJ file with\\n     *     newlines preserved.\\n     * @param {Object} options - a JS object containing valid options. See class\\n     *     documentation for options.\\n     * @param {bool} options.enableWTextureCoord - Texture coordinates can have\\n     *     an optional \"w\" coordinate after the u and v coordinates. This extra\\n     *     value can be used in order to perform fancy transformations on the\\n     *     textures themselves. Default is to truncate to only the u an v\\n     *     coordinates. Passing true will provide a default value of 0 in the\\n     *     event that any or all texture coordinates don\\'t provide a w value.\\n     *     Always use the textureStride attribute in order to determine the\\n     *     stride length of the texture coordinates when rendering the element\\n     *     array.\\n     * @param {bool} options.calcTangentsAndBitangents - Calculate the tangents\\n     *     and bitangents when loading of the OBJ is completed. This adds two new\\n     *     attributes to the Mesh instance: `tangents` and `bitangents`.\\n     */\\n    constructor(objectData, options) {\\n        this.name = \"\";\\n        this.indicesPerMaterial = [];\\n        this.materialsByIndex = {};\\n        this.tangents = [];\\n        this.bitangents = [];\\n        options = options || {};\\n        options.materials = options.materials || {};\\n        options.enableWTextureCoord = !!options.enableWTextureCoord;\\n        // the list of unique vertex, normal, texture, attributes\\n        this.vertexNormals = [];\\n        this.textures = [];\\n        // the indicies to draw the faces\\n        this.indices = [];\\n        this.textureStride = options.enableWTextureCoord ? 3 : 2;\\n        /*\\n        The OBJ file format does a sort of compression when saving a model in a\\n        program like Blender. There are at least 3 sections (4 including textures)\\n        within the file. Each line in a section begins with the same string:\\n          * \\'v\\': indicates vertex section\\n          * \\'vn\\': indicates vertex normal section\\n          * \\'f\\': indicates the faces section\\n          * \\'vt\\': indicates vertex texture section (if textures were used on the model)\\n        Each of the above sections (except for the faces section) is a list/set of\\n        unique vertices.\\n\\n        Each line of the faces section contains a list of\\n        (vertex, [texture], normal) groups.\\n\\n        **Note:** The following documentation will use a capital \"V\" Vertex to\\n        denote the above (vertex, [texture], normal) groups whereas a lowercase\\n        \"v\" vertex is used to denote an X, Y, Z coordinate.\\n\\n        Some examples:\\n            // the texture index is optional, both formats are possible for models\\n            // without a texture applied\\n            f 1/25 18/46 12/31\\n            f 1//25 18//46 12//31\\n\\n            // A 3 vertex face with texture indices\\n            f 16/92/11 14/101/22 1/69/1\\n\\n            // A 4 vertex face\\n            f 16/92/11 40/109/40 38/114/38 14/101/22\\n\\n        The first two lines are examples of a 3 vertex face without a texture applied.\\n        The second is an example of a 3 vertex face with a texture applied.\\n        The third is an example of a 4 vertex face. Note: a face can contain N\\n        number of vertices.\\n\\n        Each number that appears in one of the groups is a 1-based index\\n        corresponding to an item from the other sections (meaning that indexing\\n        starts at one and *not* zero).\\n\\n        For example:\\n            `f 16/92/11` is saying to\\n              - take the 16th element from the [v] vertex array\\n              - take the 92nd element from the [vt] texture array\\n              - take the 11th element from the [vn] normal array\\n            and together they make a unique vertex.\\n        Using all 3+ unique Vertices from the face line will produce a polygon.\\n\\n        Now, you could just go through the OBJ file and create a new vertex for\\n        each face line and WebGL will draw what appears to be the same model.\\n        However, vertices will be overlapped and duplicated all over the place.\\n\\n        Consider a cube in 3D space centered about the origin and each side is\\n        2 units long. The front face (with the positive Z-axis pointing towards\\n        you) would have a Top Right vertex (looking orthogonal to its normal)\\n        mapped at (1,1,1) The right face would have a Top Left vertex (looking\\n        orthogonal to its normal) at (1,1,1) and the top face would have a Bottom\\n        Right vertex (looking orthogonal to its normal) at (1,1,1). Each face\\n        has a vertex at the same coordinates, however, three distinct vertices\\n        will be drawn at the same spot.\\n\\n        To solve the issue of duplicate Vertices (the `(vertex, [texture], normal)`\\n        groups), while iterating through the face lines, when a group is encountered\\n        the whole group string (\\'16/92/11\\') is checked to see if it exists in the\\n        packed.hashindices object, and if it doesn\\'t, the indices it specifies\\n        are used to look up each attribute in the corresponding attribute arrays\\n        already created. The values are then copied to the corresponding unpacked\\n        array (flattened to play nice with WebGL\\'s ELEMENT_ARRAY_BUFFER indexing),\\n        the group string is added to the hashindices set and the current unpacked\\n        index is used as this hashindices value so that the group of elements can\\n        be reused. The unpacked index is incremented. If the group string already\\n        exists in the hashindices object, its corresponding value is the index of\\n        that group and is appended to the unpacked indices array.\\n       */\\n        const verts = [];\\n        const vertNormals = [];\\n        const textures = [];\\n        const materialNamesByIndex = [];\\n        const materialIndicesByName = {};\\n        // keep track of what material we\\'ve seen last\\n        let currentMaterialIndex = -1;\\n        let currentObjectByMaterialIndex = 0;\\n        // unpacking stuff\\n        const unpacked = {\\n            verts: [],\\n            norms: [],\\n            textures: [],\\n            hashindices: {},\\n            indices: [[]],\\n            materialIndices: [],\\n            index: 0,\\n        };\\n        const VERTEX_RE = /^v\\\\s/;\\n        const NORMAL_RE = /^vn\\\\s/;\\n        const TEXTURE_RE = /^vt\\\\s/;\\n        const FACE_RE = /^f\\\\s/;\\n        const WHITESPACE_RE = /\\\\s+/;\\n        const USE_MATERIAL_RE = /^usemtl/;\\n        // array of lines separated by the newline\\n        const lines = objectData.split(\"\\\\n\");\\n        for (let line of lines) {\\n            line = line.trim();\\n            if (!line || line.startsWith(\"#\")) {\\n                continue;\\n            }\\n            const elements = line.split(WHITESPACE_RE);\\n            elements.shift();\\n            if (VERTEX_RE.test(line)) {\\n                // if this is a vertex\\n                verts.push(...elements);\\n            }\\n            else if (NORMAL_RE.test(line)) {\\n                // if this is a vertex normal\\n                vertNormals.push(...elements);\\n            }\\n            else if (TEXTURE_RE.test(line)) {\\n                let coords = elements;\\n                // by default, the loader will only look at the U and V\\n                // coordinates of the vt declaration. So, this truncates the\\n                // elements to only those 2 values. If W texture coordinate\\n                // support is enabled, then the texture coordinate is\\n                // expected to have three values in it.\\n                if (elements.length > 2 && !options.enableWTextureCoord) {\\n                    coords = elements.slice(0, 2);\\n                }\\n                else if (elements.length === 2 && options.enableWTextureCoord) {\\n                    // If for some reason W texture coordinate support is enabled\\n                    // and only the U and V coordinates are given, then we supply\\n                    // the default value of 0 so that the stride length is correct\\n                    // when the textures are unpacked below.\\n                    coords.push(\"0\");\\n                }\\n                textures.push(...coords);\\n            }\\n            else if (USE_MATERIAL_RE.test(line)) {\\n                const materialName = elements[0];\\n                // check to see if we\\'ve ever seen it before\\n                if (!(materialName in materialIndicesByName)) {\\n                    // new material we\\'ve never seen\\n                    materialNamesByIndex.push(materialName);\\n                    materialIndicesByName[materialName] = materialNamesByIndex.length - 1;\\n                    // push new array into indices\\n                    // already contains an array at index zero, don\\'t add\\n                    if (materialIndicesByName[materialName] > 0) {\\n                        unpacked.indices.push([]);\\n                    }\\n                }\\n                // keep track of the current material index\\n                currentMaterialIndex = materialIndicesByName[materialName];\\n                // update current index array\\n                currentObjectByMaterialIndex = currentMaterialIndex;\\n            }\\n            else if (FACE_RE.test(line)) {\\n                // if this is a face\\n                /*\\n                split this face into an array of Vertex groups\\n                for example:\\n                   f 16/92/11 14/101/22 1/69/1\\n                becomes:\\n                  [\\'16/92/11\\', \\'14/101/22\\', \\'1/69/1\\'];\\n                */\\n                const triangles = triangulate(elements);\\n                for (const triangle of triangles) {\\n                    for (let j = 0, eleLen = triangle.length; j < eleLen; j++) {\\n                        const hash = triangle[j] + \",\" + currentMaterialIndex;\\n                        if (hash in unpacked.hashindices) {\\n                            unpacked.indices[currentObjectByMaterialIndex].push(unpacked.hashindices[hash]);\\n                        }\\n                        else {\\n                            /*\\n                        Each element of the face line array is a Vertex which has its\\n                        attributes delimited by a forward slash. This will separate\\n                        each attribute into another array:\\n                            \\'19/92/11\\'\\n                        becomes:\\n                            Vertex = [\\'19\\', \\'92\\', \\'11\\'];\\n                        where\\n                            Vertex[0] is the vertex index\\n                            Vertex[1] is the texture index\\n                            Vertex[2] is the normal index\\n                         Think of faces having Vertices which are comprised of the\\n                         attributes location (v), texture (vt), and normal (vn).\\n                         */\\n                            const vertex = triangle[j].split(\"/\");\\n                            // it\\'s possible for faces to only specify the vertex\\n                            // and the normal. In this case, vertex will only have\\n                            // a length of 2 and not 3 and the normal will be the\\n                            // second item in the list with an index of 1.\\n                            const normalIndex = vertex.length - 1;\\n                            /*\\n                         The verts, textures, and vertNormals arrays each contain a\\n                         flattend array of coordinates.\\n\\n                         Because it gets confusing by referring to Vertex and then\\n                         vertex (both are different in my descriptions) I will explain\\n                         what\\'s going on using the vertexNormals array:\\n\\n                         vertex[2] will contain the one-based index of the vertexNormals\\n                         section (vn). One is subtracted from this index number to play\\n                         nice with javascript\\'s zero-based array indexing.\\n\\n                         Because vertexNormal is a flattened array of x, y, z values,\\n                         simple pointer arithmetic is used to skip to the start of the\\n                         vertexNormal, then the offset is added to get the correct\\n                         component: +0 is x, +1 is y, +2 is z.\\n\\n                         This same process is repeated for verts and textures.\\n                         */\\n                            // Vertex position\\n                            unpacked.verts.push(+verts[(+vertex[0] - 1) * 3 + 0]);\\n                            unpacked.verts.push(+verts[(+vertex[0] - 1) * 3 + 1]);\\n                            unpacked.verts.push(+verts[(+vertex[0] - 1) * 3 + 2]);\\n                            // Vertex textures\\n                            if (textures.length) {\\n                                const stride = options.enableWTextureCoord ? 3 : 2;\\n                                unpacked.textures.push(+textures[(+vertex[1] - 1) * stride + 0]);\\n                                unpacked.textures.push(+textures[(+vertex[1] - 1) * stride + 1]);\\n                                if (options.enableWTextureCoord) {\\n                                    unpacked.textures.push(+textures[(+vertex[1] - 1) * stride + 2]);\\n                                }\\n                            }\\n                            // Vertex normals\\n                            unpacked.norms.push(+vertNormals[(+vertex[normalIndex] - 1) * 3 + 0]);\\n                            unpacked.norms.push(+vertNormals[(+vertex[normalIndex] - 1) * 3 + 1]);\\n                            unpacked.norms.push(+vertNormals[(+vertex[normalIndex] - 1) * 3 + 2]);\\n                            // Vertex material indices\\n                            unpacked.materialIndices.push(currentMaterialIndex);\\n                            // add the newly created Vertex to the list of indices\\n                            unpacked.hashindices[hash] = unpacked.index;\\n                            unpacked.indices[currentObjectByMaterialIndex].push(unpacked.hashindices[hash]);\\n                            // increment the counter\\n                            unpacked.index += 1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        this.vertices = unpacked.verts;\\n        this.vertexNormals = unpacked.norms;\\n        this.textures = unpacked.textures;\\n        this.vertexMaterialIndices = unpacked.materialIndices;\\n        this.indices = unpacked.indices[currentObjectByMaterialIndex];\\n        this.indicesPerMaterial = unpacked.indices;\\n        this.materialNames = materialNamesByIndex;\\n        this.materialIndices = materialIndicesByName;\\n        this.materialsByIndex = {};\\n        if (options.calcTangentsAndBitangents) {\\n            this.calculateTangentsAndBitangents();\\n        }\\n    }\\n    /**\\n     * Calculates the tangents and bitangents of the mesh that forms an orthogonal basis together with the\\n     * normal in the direction of the texture coordinates. These are useful for setting up the TBN matrix\\n     * when distorting the normals through normal maps.\\n     * Method derived from: http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\\n     *\\n     * This method requires the normals and texture coordinates to be parsed and set up correctly.\\n     * Adds the tangents and bitangents as members of the class instance.\\n     */\\n    calculateTangentsAndBitangents() {\\n        console.assert(!!(this.vertices &&\\n            this.vertices.length &&\\n            this.vertexNormals &&\\n            this.vertexNormals.length &&\\n            this.textures &&\\n            this.textures.length), \"Missing attributes for calculating tangents and bitangents\");\\n        const unpacked = {\\n            tangents: [...new Array(this.vertices.length)].map(_ => 0),\\n            bitangents: [...new Array(this.vertices.length)].map(_ => 0),\\n        };\\n        // Loop through all faces in the whole mesh\\n        const indices = this.indices;\\n        const vertices = this.vertices;\\n        const normals = this.vertexNormals;\\n        const uvs = this.textures;\\n        for (let i = 0; i < indices.length; i += 3) {\\n            const i0 = indices[i + 0];\\n            const i1 = indices[i + 1];\\n            const i2 = indices[i + 2];\\n            const x_v0 = vertices[i0 * 3 + 0];\\n            const y_v0 = vertices[i0 * 3 + 1];\\n            const z_v0 = vertices[i0 * 3 + 2];\\n            const x_uv0 = uvs[i0 * 2 + 0];\\n            const y_uv0 = uvs[i0 * 2 + 1];\\n            const x_v1 = vertices[i1 * 3 + 0];\\n            const y_v1 = vertices[i1 * 3 + 1];\\n            const z_v1 = vertices[i1 * 3 + 2];\\n            const x_uv1 = uvs[i1 * 2 + 0];\\n            const y_uv1 = uvs[i1 * 2 + 1];\\n            const x_v2 = vertices[i2 * 3 + 0];\\n            const y_v2 = vertices[i2 * 3 + 1];\\n            const z_v2 = vertices[i2 * 3 + 2];\\n            const x_uv2 = uvs[i2 * 2 + 0];\\n            const y_uv2 = uvs[i2 * 2 + 1];\\n            const x_deltaPos1 = x_v1 - x_v0;\\n            const y_deltaPos1 = y_v1 - y_v0;\\n            const z_deltaPos1 = z_v1 - z_v0;\\n            const x_deltaPos2 = x_v2 - x_v0;\\n            const y_deltaPos2 = y_v2 - y_v0;\\n            const z_deltaPos2 = z_v2 - z_v0;\\n            const x_uvDeltaPos1 = x_uv1 - x_uv0;\\n            const y_uvDeltaPos1 = y_uv1 - y_uv0;\\n            const x_uvDeltaPos2 = x_uv2 - x_uv0;\\n            const y_uvDeltaPos2 = y_uv2 - y_uv0;\\n            const rInv = x_uvDeltaPos1 * y_uvDeltaPos2 - y_uvDeltaPos1 * x_uvDeltaPos2;\\n            const r = 1.0 / Math.abs(rInv < 0.0001 ? 1.0 : rInv);\\n            // Tangent\\n            const x_tangent = (x_deltaPos1 * y_uvDeltaPos2 - x_deltaPos2 * y_uvDeltaPos1) * r;\\n            const y_tangent = (y_deltaPos1 * y_uvDeltaPos2 - y_deltaPos2 * y_uvDeltaPos1) * r;\\n            const z_tangent = (z_deltaPos1 * y_uvDeltaPos2 - z_deltaPos2 * y_uvDeltaPos1) * r;\\n            // Bitangent\\n            const x_bitangent = (x_deltaPos2 * x_uvDeltaPos1 - x_deltaPos1 * x_uvDeltaPos2) * r;\\n            const y_bitangent = (y_deltaPos2 * x_uvDeltaPos1 - y_deltaPos1 * x_uvDeltaPos2) * r;\\n            const z_bitangent = (z_deltaPos2 * x_uvDeltaPos1 - z_deltaPos1 * x_uvDeltaPos2) * r;\\n            // Gram-Schmidt orthogonalize\\n            //t = glm::normalize(t - n * glm:: dot(n, t));\\n            const x_n0 = normals[i0 * 3 + 0];\\n            const y_n0 = normals[i0 * 3 + 1];\\n            const z_n0 = normals[i0 * 3 + 2];\\n            const x_n1 = normals[i1 * 3 + 0];\\n            const y_n1 = normals[i1 * 3 + 1];\\n            const z_n1 = normals[i1 * 3 + 2];\\n            const x_n2 = normals[i2 * 3 + 0];\\n            const y_n2 = normals[i2 * 3 + 1];\\n            const z_n2 = normals[i2 * 3 + 2];\\n            // Tangent\\n            const n0_dot_t = x_tangent * x_n0 + y_tangent * y_n0 + z_tangent * z_n0;\\n            const n1_dot_t = x_tangent * x_n1 + y_tangent * y_n1 + z_tangent * z_n1;\\n            const n2_dot_t = x_tangent * x_n2 + y_tangent * y_n2 + z_tangent * z_n2;\\n            const x_resTangent0 = x_tangent - x_n0 * n0_dot_t;\\n            const y_resTangent0 = y_tangent - y_n0 * n0_dot_t;\\n            const z_resTangent0 = z_tangent - z_n0 * n0_dot_t;\\n            const x_resTangent1 = x_tangent - x_n1 * n1_dot_t;\\n            const y_resTangent1 = y_tangent - y_n1 * n1_dot_t;\\n            const z_resTangent1 = z_tangent - z_n1 * n1_dot_t;\\n            const x_resTangent2 = x_tangent - x_n2 * n2_dot_t;\\n            const y_resTangent2 = y_tangent - y_n2 * n2_dot_t;\\n            const z_resTangent2 = z_tangent - z_n2 * n2_dot_t;\\n            const magTangent0 = Math.sqrt(x_resTangent0 * x_resTangent0 + y_resTangent0 * y_resTangent0 + z_resTangent0 * z_resTangent0);\\n            const magTangent1 = Math.sqrt(x_resTangent1 * x_resTangent1 + y_resTangent1 * y_resTangent1 + z_resTangent1 * z_resTangent1);\\n            const magTangent2 = Math.sqrt(x_resTangent2 * x_resTangent2 + y_resTangent2 * y_resTangent2 + z_resTangent2 * z_resTangent2);\\n            // Bitangent\\n            const n0_dot_bt = x_bitangent * x_n0 + y_bitangent * y_n0 + z_bitangent * z_n0;\\n            const n1_dot_bt = x_bitangent * x_n1 + y_bitangent * y_n1 + z_bitangent * z_n1;\\n            const n2_dot_bt = x_bitangent * x_n2 + y_bitangent * y_n2 + z_bitangent * z_n2;\\n            const x_resBitangent0 = x_bitangent - x_n0 * n0_dot_bt;\\n            const y_resBitangent0 = y_bitangent - y_n0 * n0_dot_bt;\\n            const z_resBitangent0 = z_bitangent - z_n0 * n0_dot_bt;\\n            const x_resBitangent1 = x_bitangent - x_n1 * n1_dot_bt;\\n            const y_resBitangent1 = y_bitangent - y_n1 * n1_dot_bt;\\n            const z_resBitangent1 = z_bitangent - z_n1 * n1_dot_bt;\\n            const x_resBitangent2 = x_bitangent - x_n2 * n2_dot_bt;\\n            const y_resBitangent2 = y_bitangent - y_n2 * n2_dot_bt;\\n            const z_resBitangent2 = z_bitangent - z_n2 * n2_dot_bt;\\n            const magBitangent0 = Math.sqrt(x_resBitangent0 * x_resBitangent0 +\\n                y_resBitangent0 * y_resBitangent0 +\\n                z_resBitangent0 * z_resBitangent0);\\n            const magBitangent1 = Math.sqrt(x_resBitangent1 * x_resBitangent1 +\\n                y_resBitangent1 * y_resBitangent1 +\\n                z_resBitangent1 * z_resBitangent1);\\n            const magBitangent2 = Math.sqrt(x_resBitangent2 * x_resBitangent2 +\\n                y_resBitangent2 * y_resBitangent2 +\\n                z_resBitangent2 * z_resBitangent2);\\n            unpacked.tangents[i0 * 3 + 0] += x_resTangent0 / magTangent0;\\n            unpacked.tangents[i0 * 3 + 1] += y_resTangent0 / magTangent0;\\n            unpacked.tangents[i0 * 3 + 2] += z_resTangent0 / magTangent0;\\n            unpacked.tangents[i1 * 3 + 0] += x_resTangent1 / magTangent1;\\n            unpacked.tangents[i1 * 3 + 1] += y_resTangent1 / magTangent1;\\n            unpacked.tangents[i1 * 3 + 2] += z_resTangent1 / magTangent1;\\n            unpacked.tangents[i2 * 3 + 0] += x_resTangent2 / magTangent2;\\n            unpacked.tangents[i2 * 3 + 1] += y_resTangent2 / magTangent2;\\n            unpacked.tangents[i2 * 3 + 2] += z_resTangent2 / magTangent2;\\n            unpacked.bitangents[i0 * 3 + 0] += x_resBitangent0 / magBitangent0;\\n            unpacked.bitangents[i0 * 3 + 1] += y_resBitangent0 / magBitangent0;\\n            unpacked.bitangents[i0 * 3 + 2] += z_resBitangent0 / magBitangent0;\\n            unpacked.bitangents[i1 * 3 + 0] += x_resBitangent1 / magBitangent1;\\n            unpacked.bitangents[i1 * 3 + 1] += y_resBitangent1 / magBitangent1;\\n            unpacked.bitangents[i1 * 3 + 2] += z_resBitangent1 / magBitangent1;\\n            unpacked.bitangents[i2 * 3 + 0] += x_resBitangent2 / magBitangent2;\\n            unpacked.bitangents[i2 * 3 + 1] += y_resBitangent2 / magBitangent2;\\n            unpacked.bitangents[i2 * 3 + 2] += z_resBitangent2 / magBitangent2;\\n            // TODO: check handedness\\n        }\\n        this.tangents = unpacked.tangents;\\n        this.bitangents = unpacked.bitangents;\\n    }\\n    /**\\n     * @param layout - A {@link Layout} object that describes the\\n     * desired memory layout of the generated buffer\\n     * @return The packed array in the ... TODO\\n     */\\n    makeBufferData(layout) {\\n        const numItems = this.vertices.length / 3;\\n        const buffer = new ArrayBuffer(layout.stride * numItems);\\n        buffer.numItems = numItems;\\n        const dataView = new DataView(buffer);\\n        for (let i = 0, vertexOffset = 0; i < numItems; i++) {\\n            vertexOffset = i * layout.stride;\\n            // copy in the vertex data in the order and format given by the\\n            // layout param\\n            for (const attribute of layout.attributes) {\\n                const offset = vertexOffset + layout.attributeMap[attribute.key].offset;\\n                switch (attribute.key) {\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].POSITION.key:\\n                        dataView.setFloat32(offset, this.vertices[i * 3], true);\\n                        dataView.setFloat32(offset + 4, this.vertices[i * 3 + 1], true);\\n                        dataView.setFloat32(offset + 8, this.vertices[i * 3 + 2], true);\\n                        break;\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].UV.key:\\n                        dataView.setFloat32(offset, this.textures[i * 2], true);\\n                        dataView.setFloat32(offset + 4, this.textures[i * 2 + 1], true);\\n                        break;\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].NORMAL.key:\\n                        dataView.setFloat32(offset, this.vertexNormals[i * 3], true);\\n                        dataView.setFloat32(offset + 4, this.vertexNormals[i * 3 + 1], true);\\n                        dataView.setFloat32(offset + 8, this.vertexNormals[i * 3 + 2], true);\\n                        break;\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].MATERIAL_INDEX.key:\\n                        dataView.setInt16(offset, this.vertexMaterialIndices[i], true);\\n                        break;\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].AMBIENT.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.ambient[0], true);\\n                        dataView.setFloat32(offset + 4, material.ambient[1], true);\\n                        dataView.setFloat32(offset + 8, material.ambient[2], true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].DIFFUSE.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.diffuse[0], true);\\n                        dataView.setFloat32(offset + 4, material.diffuse[1], true);\\n                        dataView.setFloat32(offset + 8, material.diffuse[2], true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].SPECULAR.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.specular[0], true);\\n                        dataView.setFloat32(offset + 4, material.specular[1], true);\\n                        dataView.setFloat32(offset + 8, material.specular[2], true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].SPECULAR_EXPONENT.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.specularExponent, true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].EMISSIVE.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.emissive[0], true);\\n                        dataView.setFloat32(offset + 4, material.emissive[1], true);\\n                        dataView.setFloat32(offset + 8, material.emissive[2], true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].TRANSMISSION_FILTER.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.transmissionFilter[0], true);\\n                        dataView.setFloat32(offset + 4, material.transmissionFilter[1], true);\\n                        dataView.setFloat32(offset + 8, material.transmissionFilter[2], true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].DISSOLVE.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.dissolve, true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].ILLUMINATION.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setInt16(offset, material.illumination, true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].REFRACTION_INDEX.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.refractionIndex, true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].SHARPNESS.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setFloat32(offset, material.sharpness, true);\\n                        break;\\n                    }\\n                    case _layout__WEBPACK_IMPORTED_MODULE_0__[\"Layout\"].ANTI_ALIASING.key: {\\n                        const materialIndex = this.vertexMaterialIndices[i];\\n                        const material = this.materialsByIndex[materialIndex];\\n                        if (!material) {\\n                            console.warn(\\'Material \"\\' +\\n                                this.materialNames[materialIndex] +\\n                                \\'\" not found in mesh. Did you forget to call addMaterialLibrary(...)?\"\\');\\n                            break;\\n                        }\\n                        dataView.setInt16(offset, material.antiAliasing ? 1 : 0, true);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        return buffer;\\n    }\\n    makeIndexBufferData() {\\n        const buffer = new Uint16Array(this.indices);\\n        buffer.numItems = this.indices.length;\\n        return buffer;\\n    }\\n    makeIndexBufferDataForMaterials(...materialIndices) {\\n        const indices = new Array().concat(...materialIndices.map(mtlIdx => this.indicesPerMaterial[mtlIdx]));\\n        const buffer = new Uint16Array(indices);\\n        buffer.numItems = indices.length;\\n        return buffer;\\n    }\\n    addMaterialLibrary(mtl) {\\n        for (const name in mtl.materials) {\\n            if (!(name in this.materialIndices)) {\\n                // This material is not referenced by the mesh\\n                continue;\\n            }\\n            const material = mtl.materials[name];\\n            // Find the material index for this material\\n            const materialIndex = this.materialIndices[material.name];\\n            // Put the material into the materialsByIndex object at the right\\n            // spot as determined when the obj file was parsed\\n            this.materialsByIndex[materialIndex] = material;\\n        }\\n    }\\n}\\nfunction* triangulate(elements) {\\n    if (elements.length <= 3) {\\n        yield elements;\\n    }\\n    else if (elements.length === 4) {\\n        yield [elements[0], elements[1], elements[2]];\\n        yield [elements[2], elements[3], elements[0]];\\n    }\\n    else {\\n        for (let i = 1; i < elements.length - 1; i++) {\\n            yield [elements[0], elements[i], elements[i + 1]];\\n        }\\n    }\\n}\\n\\n\\n//# sourceURL=webpack:///./src/mesh.ts?')},\"./src/utils.ts\":\n/*!**********************!*\\\n  !*** ./src/utils.ts ***!\n  \\**********************/\n/*! exports provided: downloadModels, downloadMeshes, initMeshBuffers, deleteMeshBuffers */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"downloadModels\", function() { return downloadModels; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"downloadMeshes\", function() { return downloadMeshes; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initMeshBuffers\", function() { return initMeshBuffers; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteMeshBuffers\", function() { return deleteMeshBuffers; });\\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mesh */ \"./src/mesh.ts\");\\n/* harmony import */ var _material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material */ \"./src/material.ts\");\\n\\n\\nfunction downloadMtlTextures(mtl, root) {\\n    const mapAttributes = [\\n        \"mapDiffuse\",\\n        \"mapAmbient\",\\n        \"mapSpecular\",\\n        \"mapDissolve\",\\n        \"mapBump\",\\n        \"mapDisplacement\",\\n        \"mapDecal\",\\n        \"mapEmissive\",\\n    ];\\n    if (!root.endsWith(\"/\")) {\\n        root += \"/\";\\n    }\\n    const textures = [];\\n    for (const materialName in mtl.materials) {\\n        if (!mtl.materials.hasOwnProperty(materialName)) {\\n            continue;\\n        }\\n        const material = mtl.materials[materialName];\\n        for (const attr of mapAttributes) {\\n            const mapData = material[attr];\\n            if (!mapData || !mapData.filename) {\\n                continue;\\n            }\\n            const url = root + mapData.filename;\\n            textures.push(fetch(url)\\n                .then(response => {\\n                if (!response.ok) {\\n                    throw new Error();\\n                }\\n                return response.blob();\\n            })\\n                .then(function (data) {\\n                const image = new Image();\\n                image.src = URL.createObjectURL(data);\\n                mapData.texture = image;\\n                return new Promise(resolve => (image.onload = resolve));\\n            })\\n                .catch(() => {\\n                console.error(`Unable to download texture: ${url}`);\\n            }));\\n        }\\n    }\\n    return Promise.all(textures);\\n}\\nfunction getMtl(modelOptions) {\\n    if (!(typeof modelOptions.mtl === \"string\")) {\\n        return modelOptions.obj.replace(/\\\\.obj$/, \".mtl\");\\n    }\\n    return modelOptions.mtl;\\n}\\n/**\\n * Accepts a list of model request objects and returns a Promise that\\n * resolves when all models have been downloaded and parsed.\\n *\\n * The list of model objects follow this interface:\\n * {\\n *  obj: \\'path/to/model.obj\\',\\n *  mtl: true | \\'path/to/model.mtl\\',\\n *  downloadMtlTextures: true | false\\n *  mtlTextureRoot: \\'/models/suzanne/maps\\'\\n *  name: \\'suzanne\\'\\n * }\\n *\\n * The `obj` attribute is required and should be the path to the\\n * model\\'s .obj file relative to the current repo (absolute URLs are\\n * suggested).\\n *\\n * The `mtl` attribute is optional and can either be a boolean or\\n * a path to the model\\'s .mtl file relative to the current URL. If\\n * the value is `true`, then the path and basename given for the `obj`\\n * attribute is used replacing the .obj suffix for .mtl\\n * E.g.: {obj: \\'models/foo.obj\\', mtl: true} would search for \\'models/foo.mtl\\'\\n *\\n * The `name` attribute is optional and is a human friendly name to be\\n * included with the parsed OBJ and MTL files. If not given, the base .obj\\n * filename will be used.\\n *\\n * The `downloadMtlTextures` attribute is a flag for automatically downloading\\n * any images found in the MTL file and attaching them to each Material\\n * created from that file. For example, if material.mapDiffuse is set (there\\n * was data in the MTL file), then material.mapDiffuse.texture will contain\\n * the downloaded image. This option defaults to `true`. By default, the MTL\\'s\\n * URL will be used to determine the location of the images.\\n *\\n * The `mtlTextureRoot` attribute is optional and should point to the location\\n * on the server that this MTL\\'s texture files are located. The default is to\\n * use the MTL file\\'s location.\\n *\\n * @returns {Promise} the result of downloading the given list of models. The\\n * promise will resolve with an object whose keys are the names of the models\\n * and the value is its Mesh object. Each Mesh object will automatically\\n * have its addMaterialLibrary() method called to set the given MTL data (if given).\\n */\\nfunction downloadModels(models) {\\n    const finished = [];\\n    for (const model of models) {\\n        if (!model.obj) {\\n            throw new Error(\\'\"obj\" attribute of model object not set. The .obj file is required to be set \\' +\\n                \"in order to use downloadModels()\");\\n        }\\n        const options = {\\n            indicesPerMaterial: !!model.indicesPerMaterial,\\n            calcTangentsAndBitangents: !!model.calcTangentsAndBitangents,\\n        };\\n        // if the name is not provided, dervive it from the given OBJ\\n        let name = model.name;\\n        if (!name) {\\n            const parts = model.obj.split(\"/\");\\n            name = parts[parts.length - 1].replace(\".obj\", \"\");\\n        }\\n        const namePromise = Promise.resolve(name);\\n        const meshPromise = fetch(model.obj)\\n            .then(response => response.text())\\n            .then(data => {\\n            return new _mesh__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\\n        });\\n        let mtlPromise;\\n        // Download MaterialLibrary file?\\n        if (model.mtl) {\\n            const mtl = getMtl(model);\\n            mtlPromise = fetch(mtl)\\n                .then(response => response.text())\\n                .then((data) => {\\n                const material = new _material__WEBPACK_IMPORTED_MODULE_1__[\"MaterialLibrary\"](data);\\n                if (model.downloadMtlTextures !== false) {\\n                    let root = model.mtlTextureRoot;\\n                    if (!root) {\\n                        // get the directory of the MTL file as default\\n                        root = mtl.substr(0, mtl.lastIndexOf(\"/\"));\\n                    }\\n                    // downloadMtlTextures returns a Promise that\\n                    // is resolved once all of the images it\\n                    // contains are downloaded. These are then\\n                    // attached to the map data objects\\n                    return Promise.all([Promise.resolve(material), downloadMtlTextures(material, root)]);\\n                }\\n                return Promise.all([Promise.resolve(material), undefined]);\\n            })\\n                .then((value) => {\\n                return value[0];\\n            });\\n        }\\n        const parsed = [namePromise, meshPromise, mtlPromise];\\n        finished.push(Promise.all(parsed));\\n    }\\n    return Promise.all(finished).then(ms => {\\n        // the \"finished\" promise is a list of name, Mesh instance,\\n        // and MaterialLibary instance. This unpacks and returns an\\n        // object mapping name to Mesh (Mesh points to MTL).\\n        const models = {};\\n        for (const model of ms) {\\n            const [name, mesh, mtl] = model;\\n            mesh.name = name;\\n            if (mtl) {\\n                mesh.addMaterialLibrary(mtl);\\n            }\\n            models[name] = mesh;\\n        }\\n        return models;\\n    });\\n}\\n/**\\n * Takes in an object of `mesh_name`, `\\'/url/to/OBJ/file\\'` pairs and a callback\\n * function. Each OBJ file will be ajaxed in and automatically converted to\\n * an OBJ.Mesh. When all files have successfully downloaded the callback\\n * function provided will be called and passed in an object containing\\n * the newly created meshes.\\n *\\n * **Note:** In order to use this function as a way to download meshes, a\\n * webserver of some sort must be used.\\n *\\n * @param {Object} nameAndAttrs an object where the key is the name of the mesh and the value is the url to that mesh\\'s OBJ file\\n *\\n * @param {Function} completionCallback should contain a function that will take one parameter: an object array where the keys will be the unique object name and the value will be a Mesh object\\n *\\n * @param {Object} meshes In case other meshes are loaded separately or if a previously declared variable is desired to be used, pass in a (possibly empty) json object of the pattern: { \\'<mesh_name>\\': OBJ.Mesh }\\n *\\n */\\nfunction downloadMeshes(nameAndURLs, completionCallback, meshes) {\\n    if (meshes === undefined) {\\n        meshes = {};\\n    }\\n    const completed = [];\\n    for (const mesh_name in nameAndURLs) {\\n        if (!nameAndURLs.hasOwnProperty(mesh_name)) {\\n            continue;\\n        }\\n        const url = nameAndURLs[mesh_name];\\n        completed.push(fetch(url)\\n            .then(response => response.text())\\n            .then(data => {\\n            return [mesh_name, new _mesh__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data)];\\n        }));\\n    }\\n    Promise.all(completed).then(ms => {\\n        for (const [name, mesh] of ms) {\\n            meshes[name] = mesh;\\n        }\\n        return completionCallback(meshes);\\n    });\\n}\\nfunction _buildBuffer(gl, type, data, itemSize) {\\n    const buffer = gl.createBuffer();\\n    const arrayView = type === gl.ARRAY_BUFFER ? Float32Array : Uint16Array;\\n    gl.bindBuffer(type, buffer);\\n    gl.bufferData(type, new arrayView(data), gl.STATIC_DRAW);\\n    buffer.itemSize = itemSize;\\n    buffer.numItems = data.length / itemSize;\\n    return buffer;\\n}\\n/**\\n * Takes in the WebGL context and a Mesh, then creates and appends the buffers\\n * to the mesh object as attributes.\\n *\\n * @param {WebGLRenderingContext} gl the `canvas.getContext(\\'webgl\\')` context instance\\n * @param {Mesh} mesh a single `OBJ.Mesh` instance\\n *\\n * The newly created mesh attributes are:\\n *\\n * Attrbute | Description\\n * :--- | ---\\n * **normalBuffer**       |contains the model&#39;s Vertex Normals\\n * normalBuffer.itemSize  |set to 3 items\\n * normalBuffer.numItems  |the total number of vertex normals\\n * |\\n * **textureBuffer**      |contains the model&#39;s Texture Coordinates\\n * textureBuffer.itemSize |set to 2 items\\n * textureBuffer.numItems |the number of texture coordinates\\n * |\\n * **vertexBuffer**       |contains the model&#39;s Vertex Position Coordinates (does not include w)\\n * vertexBuffer.itemSize  |set to 3 items\\n * vertexBuffer.numItems  |the total number of vertices\\n * |\\n * **indexBuffer**        |contains the indices of the faces\\n * indexBuffer.itemSize   |is set to 1\\n * indexBuffer.numItems   |the total number of indices\\n *\\n * A simple example (a lot of steps are missing, so don\\'t copy and paste):\\n *\\n *     const gl   = canvas.getContext(\\'webgl\\'),\\n *         mesh = OBJ.Mesh(obj_file_data);\\n *     // compile the shaders and create a shader program\\n *     const shaderProgram = gl.createProgram();\\n *     // compilation stuff here\\n *     ...\\n *     // make sure you have vertex, vertex normal, and texture coordinate\\n *     // attributes located in your shaders and attach them to the shader program\\n *     shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\\n *     gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);\\n *\\n *     shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, \"aVertexNormal\");\\n *     gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);\\n *\\n *     shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, \"aTextureCoord\");\\n *     gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);\\n *\\n *     // create and initialize the vertex, vertex normal, and texture coordinate buffers\\n *     // and save on to the mesh object\\n *     OBJ.initMeshBuffers(gl, mesh);\\n *\\n *     // now to render the mesh\\n *     gl.bindBuffer(gl.ARRAY_BUFFER, mesh.vertexBuffer);\\n *     gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, mesh.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);\\n *     // it\\'s possible that the mesh doesn\\'t contain\\n *     // any texture coordinates (e.g. suzanne.obj in the development branch).\\n *     // in this case, the texture vertexAttribArray will need to be disabled\\n *     // before the call to drawElements\\n *     if(!mesh.textures.length){\\n *       gl.disableVertexAttribArray(shaderProgram.textureCoordAttribute);\\n *     }\\n *     else{\\n *       // if the texture vertexAttribArray has been previously\\n *       // disabled, then it needs to be re-enabled\\n *       gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);\\n *       gl.bindBuffer(gl.ARRAY_BUFFER, mesh.textureBuffer);\\n *       gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, mesh.textureBuffer.itemSize, gl.FLOAT, false, 0, 0);\\n *     }\\n *\\n *     gl.bindBuffer(gl.ARRAY_BUFFER, mesh.normalBuffer);\\n *     gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, mesh.normalBuffer.itemSize, gl.FLOAT, false, 0, 0);\\n *\\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.mesh.indexBuffer);\\n *     gl.drawElements(gl.TRIANGLES, model.mesh.indexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\\n */\\nfunction initMeshBuffers(gl, mesh) {\\n    mesh.normalBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertexNormals, 3);\\n    mesh.textureBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.textures, mesh.textureStride);\\n    mesh.vertexBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertices, 3);\\n    mesh.indexBuffer = _buildBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, mesh.indices, 1);\\n    return mesh;\\n}\\nfunction deleteMeshBuffers(gl, mesh) {\\n    gl.deleteBuffer(mesh.normalBuffer);\\n    gl.deleteBuffer(mesh.textureBuffer);\\n    gl.deleteBuffer(mesh.vertexBuffer);\\n    gl.deleteBuffer(mesh.indexBuffer);\\n}\\n\\n\\n//# sourceURL=webpack:///./src/utils.ts?')},0:\n/*!****************************!*\\\n  !*** multi ./src/index.ts ***!\n  \\****************************/\n/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! /home/aaron/google_drive/projects/webgl-obj-loader/src/index.ts */\"./src/index.ts\");\\n\\n\\n//# sourceURL=webpack:///multi_./src/index.ts?')}})}));", "import { Vec3 } from 'wgpu-matrix';\n\nexport interface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport type ValueOf<T> = T[keyof T];\n\n/** Remove readonly from object properties */\nexport type Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport type ArrayElement<ArrayType extends readonly unknown[]> =\n  ArrayType extends readonly (infer ElementType)[] ? ElementType : never;\n\nexport const dgr2rad = (dgr: number) => (dgr * Math.PI) / 180;\nexport const rad2dgr = (radians: number) => (radians / Math.PI) * 180;\n\nexport function getClassName(a: object) {\n  // deno-lint-ignore no-explicit-any\n  return (a as any).constructor.name;\n}\n\n// deno-lint-ignore no-explicit-any\nexport function getTypeName(a: any) {\n  if (Array.isArray(a)) return 'Array';\n  if (typeof a === 'object') return getClassName(a);\n  return typeof a;\n}\n\nexport const lerp = (a: number, b: number, fac: number) => {\n  fac = Math.max(0, Math.min(1, fac));\n  return a * (1 - fac) + b * fac;\n};\n\nexport function clamp(x: number, min: number, max: number): number {\n  return Math.min(Math.max(x, min), max);\n}\n\nexport function debounce<T extends unknown[]>(\n  callback: (...args: T) => void,\n  wait: number\n) {\n  let timer: number;\n\n  return (...args: T): void => {\n    clearTimeout(timer);\n    timer = setTimeout(() => callback(...args), wait);\n  };\n}\n\nexport const sphericalToCartesian = (\n  phi: number,\n  theta: number,\n  angleUnits: 'dgr' | 'rad',\n  result: Vec3\n) => {\n  if (angleUnits === 'dgr') {\n    phi = dgr2rad(phi);\n    theta = dgr2rad(theta);\n  }\n  result[0] = Math.cos(phi) * Math.sin(theta);\n  result[1] = Math.cos(theta);\n  result[2] = Math.sin(phi) * Math.sin(theta);\n  return result;\n};\n\nexport const divideCeil = (a: number, b: number) => Math.ceil(a / b);\n\nconst BYTES_UNITS = [\n  'Bytes',\n  'KB',\n  'MB',\n  'GB',\n  'TB',\n  'PB',\n  'EB',\n  'ZB',\n  'YB',\n] as const;\ntype ByteUnit = ArrayElement<typeof BYTES_UNITS>;\n\nexport const getBytes = (a: number, unit: ByteUnit) => {\n  const i = BYTES_UNITS.indexOf(unit);\n  const unitVal = Math.floor(Math.pow(1024, i));\n  return a * unitVal;\n};\n", "import {\n  TextFileReader,\n  BinaryFileReader,\n  TextureReader,\n} from '../scene/loaders.types.ts';\n\nexport const textFileReader_Web: TextFileReader = async (filename: string) => {\n  const objFileResp = await fetch(filename);\n  if (!objFileResp.ok) {\n    throw `Could not download mesh file '${filename}'`;\n  }\n  return objFileResp.text();\n};\n\nexport const binaryFileReader_Web: BinaryFileReader = async (\n  filename: string\n) => {\n  const response = await fetch(filename);\n  return response.arrayBuffer();\n};\n\n/** https://webgpu.github.io/webgpu-samples/?sample=texturedCube#main.ts */\nexport const createTextureFromFile_Web: TextureReader = async (\n  device: GPUDevice,\n  path: string,\n  format: GPUTextureFormat,\n  usage: GPUTextureUsageFlags\n) => {\n  const response = await fetch(path);\n  const imageBitmap = await createImageBitmap(await response.blob());\n\n  const texture = device.createTexture({\n    label: path,\n    dimension: '2d',\n    size: [imageBitmap.width, imageBitmap.height, 1],\n    format,\n    usage,\n  });\n  // deno-lint-ignore no-explicit-any\n  (device.queue as any).copyExternalImageToTexture(\n    { source: imageBitmap },\n    { texture: texture },\n    [imageBitmap.width, imageBitmap.height]\n  );\n\n  return texture;\n};\n", "import {\n  binaryFileReader_Web,\n  createTextureFromFile_Web,\n  textFileReader_Web,\n} from './sys_web/loadersWeb.ts';\nimport { ValueOf } from './utils/index.ts';\n\nexport const BYTES_U8 = 1;\nexport const BYTES_F32 = 4;\nexport const BYTES_U32 = 4;\nexport const BYTES_U64 = 8;\nexport const BYTES_VEC2 = BYTES_F32 * 2;\nexport const BYTES_VEC3 = BYTES_F32 * 3;\nexport const BYTES_VEC4 = BYTES_F32 * 4;\nexport const BYTES_UVEC2 = BYTES_U32 * 2;\nexport const BYTES_UVEC4 = BYTES_U32 * 4;\nexport const BYTES_U8_VEC4 = BYTES_U8 * 4;\nexport const BYTES_MAT4 = BYTES_F32 * 16;\n\nexport const NANO_TO_MILISECONDS = 0.000001;\nexport const MILISECONDS_TO_SECONDS = 0.001;\n\nexport const CO_PER_VERTEX = 3;\nexport const VERTS_IN_TRIANGLE = 3;\n\n// deno-lint-ignore no-window-prefix no-window\nexport const IS_DENO = window.Deno !== undefined;\nexport const IS_BROWSER = !IS_DENO;\nexport const IS_WGPU = IS_DENO;\n\nexport const MODELS_DIR = IS_DENO ? 'static/models' : 'models';\n\nexport const DEPTH_FORMAT: GPUTextureFormat = 'depth24plus';\n// Not 'rgba32float' Cause: \"Color state [0] is invalid: Format Rgba32Float is not blendable\"\nexport const HDR_RENDER_TEX_FORMAT: GPUTextureFormat = 'rgba16float';\nexport const NORMALS_TEX_FORMAT: GPUTextureFormat = 'rg16float';\nexport const AO_TEX_FORMAT: GPUTextureFormat = 'r16float';\n\nexport const AXIS_Y = [0, 1, 0];\n\nexport type ClearColor = [number, number, number, number];\ntype RGBColor = [number, number, number];\n\nexport const DISPLAY_MODE = {\n  FINAL: 0,\n  TILES: 1,\n  HW_RENDER: 2,\n  USED_SLICES: 3,\n  DEPTH: 4,\n  NORMALS: 5,\n  AO: 6,\n};\n\nexport type HairFile =\n  | 'SintelHairOriginal-sintel_hair.32points.tfx'\n  | 'SintelHairOriginal-sintel_hair.24points.tfx'\n  | 'SintelHairOriginal-sintel_hair.16points.tfx'\n  | 'SintelHairOriginal-sintel_hair.12points.tfx'\n  | 'SintelHairOriginal-sintel_hair.8points.tfx';\n\nexport type SliceHeadsMemory = 'global' | 'workgroup' | 'registers';\nexport type SdfPreviewAxis = 'axis-x' | 'axis-y' | 'axis-z';\n\nexport const GizmoAxis = {\n  AXIS_X: 0,\n  AXIS_Y: 1,\n  AXIS_Z: 2,\n  NONE: 3,\n} as const;\nexport type GizmoAxisIdx = ValueOf<typeof GizmoAxis>;\n\nexport const GridDebugValue = {\n  DENSITY: 0,\n  DENSITY_GRADIENT: 1,\n  VELOCITY: 2,\n  WIND: 3,\n} as const;\nexport type GridDebugValueNum = ValueOf<typeof GizmoAxis>;\n\nexport const CONFIG = {\n  /** Test env may require GPUBuffers to have extra COPY_* flags to readback results. Or silence console spam. */\n  isTest: false,\n  githubRepoLink: 'https://github.com/Scthe/frostbitten-hair-webgpu',\n  /** This runtime injection prevents loading Deno's libraries like fs, png, etc. */\n  loaders: {\n    textFileReader: textFileReader_Web,\n    binaryFileReader: binaryFileReader_Web,\n    createTextureFromFile: createTextureFromFile_Web,\n  },\n  increaseStorageMemoryLimits: false,\n  displayMode: DISPLAY_MODE.FINAL,\n\n  ///////////////\n  /// GENERIC/SCENE STUFF\n  clearColor: [0.2, 0.2, 0.2, 0.0] as ClearColor,\n  clearNormals: [0.0, 0.0, 0.0, 0.0] as ClearColor,\n  clearAo: [0.0, 0.0, 0.0, 0.0] as ClearColor,\n  background: {\n    color0: col(22, 162, 188),\n    color1: col(14, 103, 120),\n    noiseScale: 5.0,\n    gradientStrength: 0.5,\n  },\n  colliderGizmo: {\n    /** Length of each of 3 drawn axis */\n    lineLength: 0.04,\n    /** Width of each of 3 drawn axis */\n    lineWidth: 0.002,\n    /** Better accessibility to increase the 'hitbox'. Not visible in render. */\n    hoverPadding: 1.5,\n    /** Either hovered over or dragged. Use 'isDragging' to determine which */\n    activeAxis: GizmoAxis.NONE as GizmoAxisIdx,\n    isDragging: false,\n  },\n  /** Hide the ball. Does not hide gizmo */\n  drawColliders: true,\n\n  ///////////////\n  /// CAMERA\n  camera: {\n    position: {\n      position: [0.25, 1.6, 0.6],\n      rotation: [-0.4, 0.1], // [pitch, yaw]\n    } satisfies CameraPosition,\n    projection: {\n      fovDgr: 30,\n      near: 0.01,\n      far: 100.0,\n    },\n    /** Camera rotation sensitivity */\n    rotationSpeed: 1,\n    /** Camera movement sensitivity */\n    movementSpeed: 0.5,\n    /** Camera movement sensitivity when pressing THE SPEED BUTTON */\n    movementSpeedFaster: 3,\n  },\n\n  ///////////////\n  /// LIGHTS + SHADOWS + AO\n  lightAmbient: { color: [1, 1, 1], energy: 0.05 },\n  lights: [\n    { posPhi:  60.0, posTheta: 20.0, color: col(255, 244, 204), energy: 0.8 }, // prettier-ignore\n    { posPhi: 100.0, posTheta: 97.0, color: col(204, 249, 255), energy: 0.8 }, // prettier-ignore\n    { posPhi: -90.0, posTheta: 30.0, color: col(255, 242, 204), energy: 0.8 }, // prettier-ignore\n  ] as LightCfg[],\n\n  /** https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/Config.ts#L79 */\n  shadows: {\n    showDebugView: false,\n    debugViewPosition: IS_DENO ? [0, 0] : [250, 0], // deno does not render stats window\n    depthFormat: 'depth24plus' as GPUTextureFormat,\n    textureSize: 1024 * 2,\n    // runtime settings\n    usePCSS: false,\n    PCF_Radius: 3, // in pixels\n    bias: 0.0005,\n    strength: 0.4, // Limit how much shadows affect the scene (meshes-only, hair has it's own). Non-physical, but makes things prettier.\n    /** Make hair wider for shadows */\n    hairFiberWidthMultiplier: 1.0,\n    // shadow source\n    source: {\n      posPhi: 37, // horizontal [dgr]\n      posTheta: 45, // verical [dgr]\n      distance: 5.0,\n      target: [0, 2, 0],\n    },\n  },\n\n  /** The usual settings for GTAO etc. BOOOORING */\n  ao: {\n    textureSizeMul: 0.5, // half/quater-res, wrt. MSAA\n    radius: 2.0,\n    directionOffset: 0.0,\n    falloffStart2: 0.16,\n    falloffEnd2: 4.0,\n    numDirections: 12,\n    numSteps: 8,\n    strength: 0.4,\n  },\n\n  ///////////////\n  /// HAIR\n  /** Name of the file from \"static/models\" directory. Each file was exported from Blender using the script from './scripts' */\n  hairFile: 'SintelHairOriginal-sintel_hair.16points.tfx' as HairFile,\n  pointsPerStrand: -1, // will be set at runtime. Added here to have nicer workgroups.\n\n  hairRender: {\n    /** Width of the hair */\n    fiberRadius: 0.0006,\n    /** When in 'tiles' display mode, how much segments are considered full */\n    dbgTileModeMaxSegments: 370,\n    /** When in 'used_slices' display mode, how much slices are considered full */\n    dbgSlicesModeMaxSlices: 50,\n    /** When in 'final' display mode, show tile boundaries */\n    dbgShowTiles: false,\n\n    material: {\n      color0: col(119, 43, 119), // color root\n      color1: col(76, 0, 255), // color tip\n      specular: 0.9, // weight for lobe: R\n      weightTT: 0.0, // weight for lobe: TT. It needs depth test as light ignores meshes and affects stuff 'through' them.\n      weightTRT: 1.4, // weight for lobe: TRT\n      shift: 0.0, // Marschner param\n      roughness: 0.3, // Marschner param\n      colorRng: 0.1, // Randomize colors per-strand. Makes them different instead of just a lump of color. [0 .. 1]\n      lumaRng: 0.1, // Randomize luma  per-strand. Makes them different instead of just a lump of color. [0 .. 1]\n      attenuation: 30.0, // Fake attenuation mimicking https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law . Compare how far strand is wrt. depth buffer and make it darker.\n      shadows: 0.5, // Limit how much shadows affect the scene (hair-only, meshes have own param). Non-physical, but makes things prettier.\n    },\n\n    ////// SHADING\n    /** Warning: last shading point has forced alpha blend to 0 to imitate thin tip. Knowing that, go on. Set this to 2. */\n    shadingPoints: 64,\n\n    ////// TILE PASS\n    /** IF YOU CHANGE TILE SIZE, DO NOT FORGET TO TUNE `invalidTilesPerSegmentThreshold`.\n     *\n     * If you get memory limit error, just set `increaseStorageMemoryLimits = true` to allocate more than 128MB.\n     */\n    tileSize: 8,\n    /** For each tile, we store data split by depth (wrt. hair object bounding sphere bounds). It's the ponytail optimization from Frostbite's talk. */\n    tileDepthBins: 32,\n    /** Allocate memory for PPLL data */\n    avgSegmentsPerTile: 128,\n    /**\n     * > THIS SETTING IS **VERY** IMPORTANT. AND I'M USING A WORD \"VERY\", SO YOU KNOW IT'S SERIOUS.\n     *\n     * Reject degenerate strands from physics simulation. Imagine hair segment\n     * is launched into stratosphere and somehow (very somehow!) covers 100+ tiles.\n     * This is terrible for performance. Reject such cases on per-segment basis.\n     *\n     * IF YOU SEE MISSING SEGMENTS, INCREASE THIS VALUE. IT'S EITHER THIS\n     * OR THE STRAND IS COLLIDING WITH MESH. BUT YOU WOULD NOT HAVE SUSPECTED\n     * ANYTHING WRONG IF IT WAS A SIMPLE COLLISION (INCREASE SDF OFFSET,\n     * OR HIDE THE BALL IN THAT CASE).\n     */\n    invalidTilesPerSegmentThreshold: 64,\n\n    ////// FINE PASS\n    /** This is like slices per pixel in original Frostbite presentation, but the slices are inside each depth bin */\n    slicesPerPixel: 8,\n    /** Allocate memory for PPLL data */\n    avgFragmentsPerSlice: 16,\n    /** If you have a lot of slices, naive impl. would require `viewport.x * viewport.y * slicesPerPixel * sizeof(u32)` data. This is SIGNIFICANTLY reduced if ponytail optimization is implemented (as I did). Still, to limit memory, we use task queue. Each processor grabs tiles from a queue. We might (?) not even be able to dispatch all processors at once (hw and sliceHeadsMemory dependent). Does not matter cause task queue. */\n    processorCount: 64 * 8,\n    /** (1, 1, 1) dispatch. I am not going to comment on this. If you know what that means, that statement is probably enough. Change will decrease performance. Kinda wonder if Frostbite team found a way around this? The divergence is.. it is. */\n    finePassWorkgroupSizeX: 1,\n    /** Where to store the PPLL slice heads data */\n    sliceHeadsMemory: 'workgroup' as SliceHeadsMemory,\n\n    ////// LOD\n    lodRenderPercent: 100, // LOD %. Fun fact, performance is NOT linear. Range [0..100]\n  },\n\n  hairSimulation: {\n    enabled: true,\n    /**\n     * Hair physics is not essential. It never drives a gameplay behaviour.\n     * It's fine to hardcode delta time. It guarantees stability, which is more important.\n     * We are also VSYNCed in the browser.\n     * TODO [IGNORE] Ofc. we should still scale it a bit to prevent physics speed up on 144Hz displays\n     */\n    deltaTime: 1.0 / 30.0,\n    nextFrameResetSimulation: false, // the reset button from GUI\n    gravity: 0.03,\n    // 0.0 - use particle position change in verlet integration\n    // 1.0 - use averaged particle position changes in grid to drive verlet integration\n    // https://youtu.be/ool2E8SQPGU?si=yKgmYF6Wjbu6HXsF&t=815\n    friction: 0.3,\n    // 0.0 - do not use density gradient as external force. Hair can \"squish\" together\n    // >0.0 - move hair strands so from densely oocupied grid cells into ones that are more \"free\"\n    volumePreservation: 0.00003,\n    // If you set the radius to 0, the ball will disappear. There is a reason for this statement.\n    // collisionSphere: [0.05, 1.48, 0.01, 0.06], // inside hair\n    collisionSphere: [-0.18, 1.56, 0.06, 0.06], // [x, y, z, radius]\n    collisionSphereInitial: [0, 0, 0, 0], // will get filled at runtime. Used to reset the sphere\n\n    /** It's the usual constraints + stiffness stuff */\n    constraints: {\n      constraintIterations: 7, // more means more stable and expensive\n      // length constraint. Matches current distance between points to the one from the original imported asset.\n      stiffnessLengthConstr: 1.0,\n      // global shape constraint. Matches current point positions to the one from the original imported asset. Set this to 1.0 and no change is possible.\n      stiffnessGlobalConstr: 0.2, // this constraint is stronger near root and fades toward the tip\n      globalExtent: 0.1, // full global constraint stiffness. 0.2 means that 20% of the near-root strand will be forced to 100% conform to this constraint\n      globalFade: 0.75, // partial global constraint stiffness. 0.4 means that 40% of the strand AFTER EXTENT will be forced to progressively less-conform to this constraint. With extent 0.2 and fade 0.4, the strand between 20-60% will have progresively weaker this constraint.\n      // local shape constraint. Tries to preserve relative angles between 3 consecutive points.\n      // See \"A Triangle Bending Constraint Model for Position-Based Dynamics\".\n      //        [Kelager10] http://image.diku.dk/kenny/download/kelager.niebe.ea10.pdf\n      stiffnessLocalConstr: 0.3,\n      // collisions with the ball\n      stiffnessCollisions: 1.0,\n      // collisions with the character face using Signed Distance Fields (SDF).\n      stiffnessSDF: 1.0,\n    },\n\n    wind: {\n      dirPhi: 18, // horizontal [dgr]\n      dirTheta: 91, // verical [dgr]\n      strength: 0.0,\n      strengthLull: 0.75, // wind strength for points *inside* the mesh. Points *obscured* by collider (on the other side of the wind) will be affected with average of 'strength' and 'strengthLull'\n      strengthFrequency: 1.8, // how often to flutter\n      strengthJitter: 0.7, // randomize strength per-strand\n      phaseOffset: 0.45, // randomize phase. This way not all strands jitter at the same time\n      colisionTraceOffset: 1.5, // Multiplier for SDF distance used when detecting collisions\n    },\n\n    physicsForcesGrid: {\n      dims: 64, // 8x8x8 grid etc.\n      enableUpdates: true,\n      scale: 2.0, // twice the size of the initial hair. Should be enough to skip edge cases\n      // DEBUG:\n      showDebugView: false,\n      debugSlice: 0.5,\n      debugValue: GridDebugValue.DENSITY_GRADIENT as GridDebugValueNum,\n      debugAbsValue: true, // abs() before showing to the user\n    },\n\n    sdf: {\n      /** - **Negative value** pushes the SDF outwards making it bigger. This increases collision range.\n       *  - **Positive value** moves inwards, making SDF smaller. */\n      distanceOffset: -0.0015,\n      // DEBUG:\n      showDebugView: false,\n      debugSlice: 0.5,\n      debugSemitransparent: true,\n    },\n  },\n\n  ///////////////\n  /// POSTFX-LIKE EFFECTS (dither, tonemapping, exposure, gamma etc.)\n  colors: {\n    gamma: 2.2,\n    ditherStrength: 1.0,\n    exposure: 0.85,\n  },\n};\n\nexport type CameraPosition = {\n  position?: [number, number, number];\n  rotation?: [number, number];\n};\n\nexport type CameraProjection = (typeof CONFIG)['camera']['projection'];\n\nexport type LightCfg = {\n  posPhi: number;\n  posTheta: number;\n  color: RGBColor;\n  energy: number;\n};\n\n/** Takes color expressed as 0-255 (copied from GUI) and turns into 0.0-1.0 */\nfunction col(...colorU8: number[]): RGBColor {\n  if (colorU8.length !== 3) {\n    throw new Error(`Config color value ${JSON.stringify(colorU8)} is invalid`);\n  }\n  // deno-lint-ignore no-explicit-any\n  return colorU8.map((b: number) => b / 255.0) as any;\n}\n", "import { getClassName } from './index.ts';\n\nexport type TypedArray = Uint32Array | Float32Array | Int32Array;\n\nexport const createArray = (len: number) => Array(len).fill(0);\n\ntype TypedArrayConstructor<T extends TypedArray> = new (len: number) => T;\n\nexport function copyToTypedArray<T extends TypedArray>(\n  TypedArrayClass: TypedArrayConstructor<T>,\n  data: number[]\n): T {\n  const result = new TypedArrayClass(data.length);\n  data.forEach((e, idx) => (result[idx] = e));\n  return result;\n}\n\nexport function ensureTypedArray<T extends TypedArray>(\n  TypedArrayClass: TypedArrayConstructor<T>,\n  data: T | number[]\n): T {\n  if (data instanceof TypedArrayClass) {\n    return data;\n  } else {\n    // deno-lint-ignore no-explicit-any\n    return copyToTypedArray(TypedArrayClass, data as any);\n  }\n}\n\nexport function typedArr2str(arr: TypedArray, delimiter = -1) {\n  let result = '  ';\n  arr.forEach((v, i) => {\n    result += v;\n    const isLast = i === arr.length - 1;\n    if ((i + 1) % delimiter === 0) {\n      result += ',\\n';\n      if (!isLast) result += '  ';\n    } else if (!isLast) {\n      result += ', ';\n    }\n  });\n\n  return `${getClassName(arr)}(len=${arr.length}, bytes=${arr.byteLength}) [\\n${result}]`; // prettier-ignore\n}\n", "import { BYTES_U64, IS_DENO, NANO_TO_MILISECONDS } from './constants.ts';\n\nconst FORCE_DISABLE_GPU_TIMINGS = IS_DENO;\n\n/// Big amount of queries to never have to carry about it\nconst MAX_QUERY_COUNT = 1024;\n/// Each pass has BEGIN and END timestamp query\nconst QUERIES_PER_PASS = 2;\nconst TOTAL_MAX_QUERIES = MAX_QUERY_COUNT * QUERIES_PER_PASS;\n\ntype GpuProfilerResultItem = [string, number];\nexport type GpuProfilerResult = Array<[string, number]>;\n\nexport type ProfilerRegionId = number | undefined;\n\nexport const getProfilerTimestamp = () => performance.now();\n\nexport const getDeltaFromTimestampMS = (start: number) => {\n  const end = getProfilerTimestamp();\n  return end - start;\n};\n\ntype CurrentFrameScopes = Array<[string, 'cpu' | 'gpu', number]>;\n\n/**\n * https://github.com/Scthe/Rust-Vulkan-TressFX/blob/master/src/gpu_profiler.rs\n *\n * webgpu API: https://webgpufundamentals.org/webgpu/lessons/webgpu-timing.html\n */\nexport class GpuProfiler {\n  private _profileThisFrame = false;\n  private readonly hasRequiredFeature: boolean;\n  private readonly queryPool: GPUQuerySet;\n  private readonly queryInProgressBuffer: GPUBuffer;\n  private readonly resultsBuffer: GPUBuffer;\n\n  private currentFrameScopes: CurrentFrameScopes = [];\n\n  get enabled() {\n    return this._profileThisFrame && this.hasRequiredFeature;\n  }\n\n  constructor(device: GPUDevice) {\n    this.hasRequiredFeature = device.features.has('timestamp-query');\n    if (!this.hasRequiredFeature || FORCE_DISABLE_GPU_TIMINGS) {\n      // we should never use them if no feature available\n      this.queryPool = undefined!;\n      this.queryInProgressBuffer = undefined!;\n      this.resultsBuffer = undefined!;\n      return;\n    }\n\n    this.queryPool = device.createQuerySet({\n      type: 'timestamp',\n      count: TOTAL_MAX_QUERIES,\n    });\n\n    this.queryInProgressBuffer = device.createBuffer({\n      label: 'profiler-in-progress',\n      size: this.queryPool.count * BYTES_U64,\n      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,\n    });\n    this.resultsBuffer = device.createBuffer({\n      label: 'profiler-results',\n      size: this.queryInProgressBuffer.size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n  }\n\n  profileNextFrame(enabled: boolean) {\n    this._profileThisFrame = enabled;\n  }\n\n  beginFrame() {\n    while (this.currentFrameScopes.length > 0) {\n      this.currentFrameScopes.pop();\n    }\n  }\n\n  endFrame(cmdBuf: GPUCommandEncoder) {\n    if (!this.enabled || FORCE_DISABLE_GPU_TIMINGS) {\n      return;\n    }\n\n    const queryCount = this.currentFrameScopes.length * QUERIES_PER_PASS;\n    cmdBuf.resolveQuerySet(\n      this.queryPool,\n      0,\n      queryCount,\n      this.queryInProgressBuffer,\n      0\n    );\n    if (this.resultsBuffer.mapState === 'unmapped') {\n      cmdBuf.copyBufferToBuffer(\n        this.queryInProgressBuffer,\n        0,\n        this.resultsBuffer,\n        0,\n        this.resultsBuffer.size\n      );\n    }\n  }\n\n  async scheduleRaportIfNeededAsync(onResult?: (e: GpuProfilerResult) => void) {\n    if (!this.enabled || this.currentFrameScopes.length == 0) {\n      this._profileThisFrame = false;\n      return;\n    }\n\n    this._profileThisFrame = false;\n    const scopeNames = this.currentFrameScopes.slice();\n\n    if (FORCE_DISABLE_GPU_TIMINGS) {\n      const times = new BigInt64Array();\n      const result = this.parseScopeTimers(scopeNames, times);\n      onResult?.(result);\n      return;\n    }\n\n    if (this.resultsBuffer.mapState === 'unmapped') {\n      await this.resultsBuffer.mapAsync(GPUMapMode.READ);\n      const times = new BigInt64Array(this.resultsBuffer.getMappedRange());\n      const result = this.parseScopeTimers(scopeNames, times);\n      this.resultsBuffer.unmap();\n\n      onResult?.(result);\n    }\n  }\n\n  private parseScopeTimers(\n    scopeNames: CurrentFrameScopes,\n    gpuTimes: BigInt64Array\n  ) {\n    return scopeNames.map(\n      ([name, type, cpuTime], idx): GpuProfilerResultItem => {\n        let time = 0;\n        if (type === 'gpu') {\n          const start = gpuTimes[idx * QUERIES_PER_PASS];\n          const end = gpuTimes[idx * QUERIES_PER_PASS + 1];\n          time = Number(end - start) * NANO_TO_MILISECONDS;\n        } else {\n          time = cpuTime;\n        }\n        return [name, time];\n      }\n    );\n  }\n\n  /** Provide to beginCompute/beginRenderPass's `timestampWrites` */\n  createScopeGpu(name: string): GPURenderPassTimestampWrites | undefined {\n    if (!this.enabled) {\n      return undefined;\n    }\n\n    const queryId = this.currentFrameScopes.length;\n    this.currentFrameScopes.push([name, 'gpu', 0]);\n\n    return {\n      querySet: this.queryPool,\n      beginningOfPassWriteIndex: queryId * QUERIES_PER_PASS,\n      endOfPassWriteIndex: queryId * QUERIES_PER_PASS + 1,\n    };\n  }\n\n  startRegionCpu(name: string): ProfilerRegionId {\n    if (!this.enabled) {\n      return undefined;\n    }\n\n    const queryId = this.currentFrameScopes.length;\n    const now = performance.now();\n    this.currentFrameScopes.push([name, 'cpu', now]);\n    return queryId;\n  }\n\n  endRegionCpu(token: ProfilerRegionId) {\n    if (!this.enabled || token === undefined) return;\n\n    const el = this.currentFrameScopes[token];\n    if (el) {\n      const [_, _2, start] = el;\n      el[2] = getDeltaFromTimestampMS(start);\n    }\n  }\n}\n", "export const isHtmlElVisible = (el: HTMLElement | null) => {\n  return el && el.style.display !== 'none';\n};\n\nexport const showHtmlEl = (\n  el: HTMLElement | null,\n  display: 'block' | 'flex' = 'block'\n) => {\n  if (el) el.style.display = display;\n};\n\nexport const hideHtmlEl = (el: HTMLElement | null) => {\n  if (el) el.style.display = 'none';\n};\n\nexport const ensureHtmlElIsVisible = (\n  el: HTMLElement | null,\n  nextVisible: boolean\n) => {\n  const isVisible = isHtmlElVisible(el);\n  if (isVisible === nextVisible) return;\n\n  // console.log('HTML change visible to', nextVisible);\n  if (nextVisible) {\n    showHtmlEl(el);\n  } else {\n    hideHtmlEl(el);\n  }\n};\n", "import { getProfilerTimestamp } from './gpuProfiler.ts';\nimport {\n  hideHtmlEl,\n  isHtmlElVisible,\n  showHtmlEl,\n} from './sys_web/htmlUtils.ts';\n\ntype StatsValue = number | string;\n\ntype StatOpts = {\n  hideLabel?: boolean;\n  el?: HTMLElement;\n  categoryName?: string;\n};\n\n// prettier-ignore\nconst AvailableStats = {\n  fps: { hideLabel: true } as StatOpts,\n  ms: { hideLabel: true } as StatOpts,\n  'Camera pos': {} as StatOpts,\n  'Camera rot': {} as StatOpts,\n  'Strands': {} as StatOpts,\n  'Points per strand': {} as StatOpts,\n  'Segments': {} as StatOpts,\n  'Tiles': {} as StatOpts,\n  // memory\n  s0: { categoryName: 'Memory' } as StatOpts,\n  'Tiles heads': {} as StatOpts, // per tile depth data + segment head\n  'Tiles segments': {} as StatOpts, // hair segments per tile PPLL data\n  'Slices heads': {} as StatOpts, // hair slices pointers\n  ' \\\\ Per processor': {} as StatOpts, // memory for each fine pass processor\n  'Slices data': {} as StatOpts, // hair slices color data\n  'Hair FBO': {} as StatOpts, // final color framebuffer\n  'Physics grid': {} as StatOpts, // grid forces grid\n  // render\n  s1: { categoryName: 'Render' } as StatOpts,\n  'Rendered strands': {} as StatOpts,\n  'Rendered segments': {} as StatOpts,\n};\ntype StatName = keyof typeof AvailableStats;\n\nconst DELTA_SMOOTHING = 0.95;\nconst UPDATE_FREQ_MS = 1000;\n\nclass Stats {\n  // deno-lint-ignore no-explicit-any\n  private values: Record<StatName, number | string> = {} as any;\n  private lastRenderedValues: Record<string, number | string> = {};\n  //\n  private frameStart: number = 0;\n  public deltaTimeMS = 0;\n  private deltaTimeSmoothMS: number | undefined = undefined;\n  // HTML\n  private parentEl: HTMLElement;\n  private lastDOMUpdate: number = 0;\n\n  constructor() {\n    // deno-lint-ignore no-window\n    if (window && window.document) {\n      this.parentEl = window.document.getElementById('stats-window')!;\n      this.frameStart = getProfilerTimestamp();\n      this.lastDOMUpdate = this.frameStart;\n    } else {\n      this.parentEl = undefined!;\n    }\n  }\n\n  update(name: StatName, value: StatsValue) {\n    this.values[name] = value;\n  }\n\n  show = () => showHtmlEl(this.parentEl);\n\n  onBeginFrame = () => {\n    this.frameStart = getProfilerTimestamp();\n  };\n\n  onEndFrame = () => {\n    const frameEnd = getProfilerTimestamp();\n    this.deltaTimeMS = frameEnd - this.frameStart;\n\n    if (this.deltaTimeSmoothMS === undefined) {\n      this.deltaTimeSmoothMS = this.deltaTimeMS;\n    } else {\n      // lerp\n      this.deltaTimeSmoothMS =\n        this.deltaTimeSmoothMS * DELTA_SMOOTHING +\n        this.deltaTimeMS * (1.0 - DELTA_SMOOTHING);\n    }\n\n    const fps = (1.0 / this.deltaTimeMS) * 1000;\n    this.update('fps', `${fps.toFixed(2)} fps`);\n    this.update('ms', `${this.deltaTimeMS.toFixed(2)}ms`);\n\n    if (frameEnd - this.lastDOMUpdate > UPDATE_FREQ_MS) {\n      this.lastDOMUpdate = frameEnd;\n      setTimeout(this.renderStats, 0);\n    }\n  };\n\n  printStats = () => {\n    const TAB = '  ';\n\n    console.log('STATS {');\n    Object.entries(AvailableStats).forEach(([name_, opts]) => {\n      // deno-lint-ignore no-explicit-any\n      const name: StatName = name_ as any; // TS..\n\n      if (opts.categoryName) {\n        console.log(`%c${TAB}--- ${opts.categoryName} ---`, 'color: blue');\n      } else {\n        const value = this.values[name];\n        if (value !== undefined && value !== null) {\n          console.log(`%c${TAB}${name}:`, 'color: green', value);\n        }\n      }\n    });\n    console.log('}');\n  };\n\n  private renderStats = () => {\n    const statsChildrenEls: HTMLElement[] = Array.from(\n      this.parentEl.children\n      // deno-lint-ignore no-explicit-any\n    ) as any;\n\n    Object.entries(AvailableStats).forEach(([name_, opts]) => {\n      // deno-lint-ignore no-explicit-any\n      const name: StatName = name_ as any; // TS..\n      const el = this.getStatsHtmlEl(statsChildrenEls, name, opts);\n\n      if (opts.categoryName) {\n        if (el.textContent !== opts.categoryName)\n          el.innerHTML = opts.categoryName;\n        el.classList.add('stats-category-name');\n        return;\n      }\n\n      // do not update if not changed\n      const value = this.values[name];\n      const shownValue = this.lastRenderedValues[name];\n      // if (name === 'Nanite triangles') console.log({ value, shownValue }); // dbg\n      if (value == shownValue) return;\n\n      let text = `${name}: ${value}`;\n      if (opts.hideLabel) {\n        text = String(value);\n      }\n      el.innerHTML = text;\n    });\n\n    this.lastRenderedValues = { ...this.values };\n  };\n\n  private getStatsHtmlEl = (\n    els: HTMLElement[],\n    name: StatName,\n    opts: StatOpts\n  ): HTMLElement => {\n    const STATS_ATTR = 'data-stats-attr';\n\n    if (opts.el) return opts.el;\n    let el = els.find(\n      (el: HTMLElement) => el.getAttribute(STATS_ATTR) === name\n    );\n\n    if (!el) {\n      el = document.createElement('p');\n      el.setAttribute(STATS_ATTR, name);\n      this.parentEl.appendChild(el);\n    }\n    opts.el = el;\n    return el;\n  };\n\n  setElVisible(el: HTMLElement, nextVisible: boolean) {\n    if (nextVisible && !isHtmlElVisible(el)) {\n      // console.log('setElVisible', el, nextVisible);\n      showHtmlEl(el);\n      this.lastRenderedValues = {}; // force rerender all\n    }\n    if (!nextVisible && isHtmlElVisible(el)) {\n      // console.log('setElVisible', el, nextVisible);\n      hideHtmlEl(el);\n      this.lastRenderedValues = {}; // force rerender all\n    }\n  }\n}\n\nexport const STATS = new Stats();\n", "export function formatBytes(bytes: number, decimals = 0) {\n  if (bytes <= 0) return '0 Bytes';\n\n  // prettier-ignore\n  const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  const k = 1024;\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  const v = (bytes / Math.pow(k, i)).toFixed(decimals);\n  return `${v} ${units[i]}`;\n}\n\nexport function formatNumber(num: number, decimals = 2) {\n  if (num === 0) return '0';\n  const sign = num < 0 ? '-' : '';\n  num = Math.abs(num);\n\n  const units = ['', 'k', 'm', 'b'];\n  const k = 1000;\n  const i = Math.floor(Math.log(num) / Math.log(k));\n  const v = (num / Math.pow(k, i)).toFixed(decimals);\n  return `${sign}${v}${units[i]}`;\n}\n\n/** Format 4 out of 100 into: '4 (4%)' */\nexport function formatPercentageNumber(\n  actual: number,\n  total: number,\n  decimals = 2\n) {\n  const percent = total > 0 ? (actual / total) * 100.0 : 0;\n  return `${formatNumber(actual, decimals)} (${percent.toFixed(1)}%)`;\n}\n", "import { BYTES_U32, CONFIG, SliceHeadsMemory } from '../../../constants.ts';\nimport { STATS } from '../../../stats.ts';\nimport { formatBytes } from '../../../utils/string.ts';\nimport { WEBGPU_MINIMAL_BUFFER_SIZE } from '../../../utils/webgpu.ts';\n\nconst ENTRIES_PER_PROCESSOR =\n  CONFIG.hairRender.tileSize *\n  CONFIG.hairRender.tileSize *\n  CONFIG.hairRender.slicesPerPixel;\n\nconst SLICE_HEADS_MEMORY = CONFIG.hairRender.sliceHeadsMemory;\n\nexport const getLocalMemoryRequirements = () =>\n  SLICE_HEADS_MEMORY === 'workgroup' ? ENTRIES_PER_PROCESSOR * BYTES_U32 : 0;\n\n///////////////////////////\n/// SHADER CODE - SHARED - UTILS\n///////////////////////////\n\nconst SHARED_UTILS = /* wgsl */ `\n\nconst INVALID_SLICE_DATA_PTR: u32 = 0xffffffffu;\n\nfn _getHeadsSliceIdx(\n  processorId: u32,\n  pixelInTile: vec2u, sliceIdx: u32,\n) -> u32 {\n  let offset = _getHeadsProcessorOffset(processorId);\n  let offsetInProcessor = (\n    pixelInTile.y * TILE_SIZE * SLICES_PER_PIXEL +\n    pixelInTile.x * SLICES_PER_PIXEL +\n    sliceIdx\n  );\n  return offset + offsetInProcessor;\n}\n\nfn _setSlicesHeadPtr(\n  processorId: u32,\n  pixelInTile: vec2u, sliceIdx: u32,\n  nextPtr: u32\n) -> u32 {\n  let idx = _getHeadsSliceIdx(processorId, pixelInTile, sliceIdx);\n  let prevPtr = _hairSliceHeads[idx];\n  _hairSliceHeads[idx] = nextPtr;\n  return prevPtr;\n}\n\nfn _getSlicesHeadPtr(\n  processorId: u32,\n  pixelInTile: vec2u, sliceIdx: u32,\n) -> u32 {\n  let idx = _getHeadsSliceIdx(processorId, pixelInTile, sliceIdx);\n  return _hairSliceHeads[idx];\n}\n\nfn _clearSlicesHeadPtrs(processorId: u32) {\n  let offset = _getHeadsProcessorOffset(processorId);\n  let count = ${ENTRIES_PER_PROCESSOR}u;\n\n  for (var i: u32 = 0u; i < count; i += 1u) {\n    _hairSliceHeads[offset + i] = INVALID_SLICE_DATA_PTR;\n  }\n}\n\nfn _clearSliceHeadPtr(\n  processorId: u32,\n  pixelInTile: vec2u, sliceIdx: u32,\n) {\n  let idx = _getHeadsSliceIdx(processorId, pixelInTile, sliceIdx);\n  _hairSliceHeads[idx] = INVALID_SLICE_DATA_PTR;\n}\n`;\n\n///////////////////////////\n/// SHADER CODE - GLOBAL MEMORY\n///////////////////////////\n\n/**\n * For each processor, contains `TILE_SIZE * TILE_SIZE * SLICES_PER_PIXEL`\n * entries. Each entry is a pointer into slices data buffer.\n *\n * I did try other memory access patterns (memory offsets per processor),\n * but it wasn't faster. You would also need to implement sorted tile queue\n * to balance workload for all tiles in a workgroup.\n *\n * The memory is per-processor, so we do not need atomics.\n */\nconst BUFFER_HAIR_SLICES_HEADS_GLOBAL = (\n  bindingIdx: number,\n  access: 'read_write'\n) => /* wgsl */ `\n\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairSliceHeads: array<u32>;\n\nfn _getHeadsProcessorOffset(processorId: u32) -> u32 {\n  return processorId * ${ENTRIES_PER_PROCESSOR};\n}\n\n${SHARED_UTILS}\n`;\n\n///////////////////////////\n/// SHADER CODE - LOCAL MEMORY\n///////////////////////////\n\nconst LOCAL_MEMORY_ACCESS =\n  SLICE_HEADS_MEMORY === 'workgroup' ? 'workgroup' : 'private';\n\nconst BUFFER_HAIR_SLICES_HEADS_LOCAL = (\n  _bindingIdx: number,\n  _access: 'read_write'\n) => /* wgsl */ `\n\nvar<${LOCAL_MEMORY_ACCESS}> _hairSliceHeads: array<u32, ${ENTRIES_PER_PROCESSOR}u>;\n\nfn _getHeadsProcessorOffset(processorId: u32) -> u32 {\n  return 0u;\n}\n\n${SHARED_UTILS}\n`;\n\nexport const BUFFER_HAIR_SLICES_HEADS =\n  SLICE_HEADS_MEMORY === 'global'\n    ? BUFFER_HAIR_SLICES_HEADS_GLOBAL\n    : BUFFER_HAIR_SLICES_HEADS_LOCAL;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\ntype Allocator = (device: GPUDevice) => GPUBuffer | undefined;\n\nfunction createHairSlicesHeadsBuffer_GLOBAL(device: GPUDevice): GPUBuffer {\n  const size = calcMemoryReqs();\n\n  return device.createBuffer({\n    label: `hair-slices-heads`,\n    size,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n}\n\nfunction createHairSlicesHeadsBuffer_LOCAL(_device: GPUDevice): undefined {\n  const { finePassWorkgroupSizeX: grSize, sliceHeadsMemory } =\n    CONFIG.hairRender;\n  if (grSize !== 1 && sliceHeadsMemory === 'workgroup') {\n    throw new Error(`Expected finePassWorkgroupSizeX to be 1, was ${grSize}`);\n  }\n  calcMemoryReqs();\n  return undefined;\n}\n\nexport const createHairSlicesHeadsBuffer: Allocator =\n  SLICE_HEADS_MEMORY === 'global'\n    ? createHairSlicesHeadsBuffer_GLOBAL\n    : createHairSlicesHeadsBuffer_LOCAL;\n\nfunction calcMemoryReqs() {\n  const { tileSize, slicesPerPixel, processorCount } = CONFIG.hairRender;\n\n  const entriesPerProcessor = tileSize * tileSize * slicesPerPixel;\n  const entries = processorCount * entriesPerProcessor;\n  const bytesPerEntry = BYTES_U32;\n  const size = Math.max(entries * bytesPerEntry, WEBGPU_MINIMAL_BUFFER_SIZE);\n\n  const memRegionNames: Record<SliceHeadsMemory, string> = {\n    global: 'VRAM',\n    workgroup: 'WKGRP',\n    registers: 'REGS',\n  };\n  const memRegionName = memRegionNames[SLICE_HEADS_MEMORY];\n\n  STATS.update('Slices heads', `${memRegionName} ${formatBytes(size)}`);\n  STATS.update(\n    ' \\\\ Per processor',\n    formatBytes(entriesPerProcessor * bytesPerEntry)\n  );\n\n  return size;\n}\n", "import { divideCeil, getBytes, getClassName, getTypeName } from './index.ts';\nimport { CONFIG } from '../constants.ts';\nimport { TypedArray, ensureTypedArray } from './arrays.ts';\nimport { getLocalMemoryRequirements } from '../passes/swHair/shared/hairSliceHeadsBuffer.ts';\n\nexport const WEBGPU_MINIMAL_BUFFER_SIZE = 256;\n\nexport async function createGpuDevice() {\n  try {\n    const adapter = await navigator.gpu.requestAdapter({\n      powerPreference: 'high-performance',\n    });\n    const onError = (msg: string) =>\n      console.error(`WebGPU init error: '${msg}'`);\n\n    if (!adapter) {\n      // On web: check if https. On ff, WebGPU is under dev flag.\n      onError('No adapter found. WebGPU seems to be unavailable.');\n      return;\n    }\n\n    const canTimestamp = adapter.features.has('timestamp-query');\n    const requiredFeatures: GPUFeatureName[] = ['float32-filterable'];\n    if (canTimestamp) {\n      requiredFeatures.push('timestamp-query');\n    }\n\n    // Limits change: https://gpuweb.github.io/gpuweb/#gpusupportedlimits\n    const requiredLimits: GPUSupportedLimits = {};\n    if (CONFIG.increaseStorageMemoryLimits) {\n      requiredLimits.maxStorageBufferBindingSize = getBytes(1024, 'MB');\n      requiredLimits.maxBufferSize = getBytes(1024, 'MB');\n    }\n    requiredLimits.maxComputeWorkgroupStorageSize = Math.max(\n      getLocalMemoryRequirements(),\n      // 16Kb is the default limit on Chrome, provided to cover for undefined default limit\n      adapter.limits.maxComputeWorkgroupStorageSize || getBytes(16, 'KB')\n    );\n    requiredLimits.maxStorageBuffersPerShaderStage = 9;\n\n    // create device\n    const device = await adapter?.requestDevice({\n      requiredFeatures,\n      // deno-lint-ignore no-explicit-any\n      requiredLimits: requiredLimits as any,\n    });\n    if (!device) {\n      onError('Failed to get GPUDevice from the adapter.');\n      return;\n    }\n\n    return device;\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n}\n\nexport function createGPUBuffer<T extends TypedArray>(\n  device: GPUDevice,\n  label: string,\n  usage: GPUBufferUsageFlags,\n  data: T\n) {\n  const gpuBuffer = device.createBuffer({\n    label,\n    size: data.byteLength,\n    usage,\n  });\n  /*console.log(`Create buffer [${label}]`, {\n    dataLen: data.length,\n    dataBytes: data.byteLength,\n    gpuSize: gpuBuffer.size,\n    // data,\n  });*/\n  // device.queue.writeBuffer(gpuBuffer, 0, data, 0, data.length);\n  device.queue.writeBuffer(gpuBuffer, 0, data, 0);\n  return gpuBuffer;\n}\n\nexport function createGPU_VertexBuffer(\n  device: GPUDevice,\n  label: string,\n  data: Float32Array | number[],\n  extraUsage: GPUBufferUsage = 0\n) {\n  const dataTypedArr = ensureTypedArray(Float32Array, data);\n  return createGPUBuffer(\n    device,\n    label,\n    GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST | (extraUsage as number),\n    dataTypedArr\n  );\n}\n\nexport function createGPU_IndexBuffer(\n  device: GPUDevice,\n  label: string,\n  data: Uint32Array | number[]\n) {\n  const dataTypedArr = ensureTypedArray(Uint32Array, data);\n  return createGPUBuffer(\n    device,\n    label,\n    GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\n    dataTypedArr\n  );\n}\n\nexport function createGPU_StorageBuffer(\n  device: GPUDevice,\n  label: string,\n  data: Uint32Array | Float32Array | Int32Array,\n  extraUsage: GPUBufferUsageFlags = 0\n) {\n  const clName = getClassName(data);\n  const allowedClasses = [Uint32Array.name, Float32Array.name, Int32Array.name];\n  if (!allowedClasses.includes(clName)) {\n    throw new Error(`Invalid data provided to createGPU_StorageBuffer(). Expected TypedArray, got ${clName}`) // prettier-ignore\n  }\n\n  return createGPUBuffer(\n    device,\n    label,\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | extraUsage,\n    data\n  );\n}\n\nexport const getItemsPerThread = divideCeil;\n\nexport type StorageAccess = 'read_write' | 'read';\n\nexport const u32_type = (access: StorageAccess) =>\n  access === 'read_write' ? 'atomic<u32>' : 'u32';\n\nexport const i32_type = (access: StorageAccess) =>\n  access === 'read_write' ? 'atomic<i32>' : 'i32';\n\nexport const bindBuffer = (\n  idx: number,\n  buffer: GPUBuffer\n): GPUBindGroupEntry => ({\n  binding: idx,\n  resource: { buffer },\n});\n\n///////////////\n/// Readback GPU -> CPU\n\nexport function createReadbackBuffer(device: GPUDevice, orgBuffer: GPUBuffer) {\n  return device.createBuffer({\n    label: `${orgBuffer}-readback-buffer`,\n    size: orgBuffer.size,\n    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n  });\n}\n\nexport function cmdCopyToReadbackBuffer(\n  cmdBuf: GPUCommandEncoder,\n  orgBuffer: GPUBuffer,\n  readbackBuffer: GPUBuffer\n) {\n  cmdBuf.copyBufferToBuffer(orgBuffer, 0, readbackBuffer, 0, orgBuffer.size);\n}\n\nexport async function readBufferToCPU<T>(\n  TypedArrayClass: { new (a: ArrayBuffer): T },\n  buffer: GPUBuffer\n): Promise<T> {\n  await buffer.mapAsync(GPUMapMode.READ);\n  const arrayBufferData = buffer.getMappedRange();\n  // use slice() to copy. The 'arrayBufferData' might be deallocated after unmap (chrome)\n  const resultData = new TypedArrayClass(arrayBufferData.slice(0));\n  buffer.unmap();\n  return resultData;\n}\n\nexport async function downloadBuffer<T>(\n  device: GPUDevice,\n  TypedArrayClass: { new (a: ArrayBuffer): T },\n  orgBuffer: GPUBuffer\n) {\n  if (!CONFIG.isTest) {\n    console.warn(`Reading '${orgBuffer.label}' buffer back to CPU. This is slow!`); // prettier-ignore\n  }\n\n  let readbackBuffer: GPUBuffer | undefined = undefined;\n  try {\n    readbackBuffer = createReadbackBuffer(device, orgBuffer);\n\n    // copy using command\n    const cmdBuf = device.createCommandEncoder({\n      label: `${orgBuffer.label}-readback`,\n    });\n    cmdCopyToReadbackBuffer(cmdBuf, orgBuffer, readbackBuffer);\n    device.queue.submit([cmdBuf.finish()]);\n\n    // Warning: try-catch with promises\n    const result = await readBufferToCPU(TypedArrayClass, readbackBuffer);\n\n    return result;\n  } catch (e) {\n    throw e;\n  } finally {\n    if (readbackBuffer) {\n      // readbackBuffer.unmap(); // already unmapped by readBufferToCPU()\n      readbackBuffer.destroy();\n    }\n  }\n}\n\n///////////////\n/// Textures\n\n/** When reading data from texture to buffer, we need to provide alignments */\nexport function getPaddedBytesPerRow(width: number, bytesPerPixel: number) {\n  const unpaddedBytesPerRow = width * bytesPerPixel;\n  const align = 256; // COPY_BYTES_PER_ROW_ALIGNMENT\n  const paddedBytesPerRowPadding =\n    (align - (unpaddedBytesPerRow % align)) % align;\n  return unpaddedBytesPerRow + paddedBytesPerRowPadding;\n}\n\n///////////////\n/// Utils\n\n// deno-lint-ignore no-explicit-any\nexport const isGPUTextureView = (maybeTexView: any) =>\n  typeof maybeTexView === 'object' &&\n  getClassName(maybeTexView) === GPUTextureView.name;\n\n/** TS typings do not see difference between GPUTexture and GPUTextureView */\n// deno-lint-ignore no-explicit-any\nexport const assertIsGPUTextureView = (maybeTexView: any) => {\n  if (!isGPUTextureView(maybeTexView)) {\n    throw new Error(\n      `Expected ${GPUTextureView.name}, got ${getTypeName(maybeTexView)}`\n    );\n  }\n};\n", "/**************\n * Copied from official webgpu-samples repo under\n * 'BSD 3-Clause \"New\" or \"Revised\" License'.\n *\n * https://github.com/webgpu/webgpu-samples/blob/main/LICENSE.txt\n * https://webgpu.github.io/webgpu-samples/?sample=cameras\n */\n\nconst Key = {\n  CAMERA_FORWARD: 'w',\n  CAMERA_BACK: 's',\n  CAMERA_LEFT: 'a',\n  CAMERA_RIGHT: 'd',\n  CAMERA_UP: ' ',\n  CAMERA_DOWN: 'z',\n  CAMERA_GO_FASTER: 'shift',\n};\n\n// Input holds as snapshot of input state\nexport default interface Input {\n  // Digital input (e.g keyboard state)\n  readonly directions: {\n    forward: boolean;\n    backward: boolean;\n    left: boolean;\n    right: boolean;\n    up: boolean;\n    down: boolean;\n    goFaster: boolean;\n  };\n  // Analog input (e.g mouse, touchscreen)\n  readonly mouse: {\n    x: number;\n    y: number;\n    dragX: number;\n    dragY: number;\n    touching: boolean;\n  };\n}\n\nexport const createMockInputState = (): Input => ({\n  directions: {\n    forward: false,\n    backward: false,\n    left: false,\n    right: false,\n    up: false,\n    down: false,\n    goFaster: false,\n  },\n  mouse: {\n    x: 0,\n    y: 0,\n    dragX: 0,\n    dragY: 0,\n    touching: false,\n  },\n});\n\n// InputHandler is a function that when called, returns the current Input state.\nexport type InputHandler = () => Input;\n\n// createInputHandler returns an InputHandler by attaching event handlers to the window and canvas.\nexport function createInputHandler(\n  window: Window,\n  canvas: HTMLCanvasElement\n): InputHandler {\n  const { directions, mouse } = createMockInputState();\n\n  const setDigital = (e: KeyboardEvent, value: boolean) => {\n    switch (e.key.toLowerCase()) {\n      case Key.CAMERA_FORWARD:\n        directions.forward = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_BACK:\n        directions.backward = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_LEFT:\n        directions.left = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_RIGHT:\n        directions.right = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_UP:\n        directions.up = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_DOWN:\n        directions.down = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case Key.CAMERA_GO_FASTER:\n        directions.goFaster = value;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n    }\n  };\n\n  window.addEventListener('keydown', (e) => setDigital(e, true));\n  window.addEventListener('keyup', (e) => setDigital(e, false));\n\n  canvas.style.touchAction = 'pinch-zoom';\n  canvas.addEventListener('pointerdown', () => {\n    mouse.touching = true;\n  });\n  canvas.addEventListener('pointerup', () => {\n    mouse.touching = false;\n  });\n  canvas.addEventListener('pointermove', (e: PointerEvent) => {\n    // mouse.touching = e.pointerType == 'mouse' ? (e.buttons & 1) !== 0 : true;\n    mouse.x = e.clientX;\n    mouse.y = e.clientY;\n    if (mouse.touching) {\n      mouse.dragX += e.movementX;\n      mouse.dragY += e.movementY;\n    }\n  });\n\n  return () => {\n    const out: Input = {\n      directions: { ...directions },\n      mouse: { ...mouse },\n    };\n    // Clear the analog values, as these accumulate between requestAnimationFrame().\n    // If you call check input state every 16ms, we want to accumulate the changes\n    // over that time period.\n    mouse.dragX = 0;\n    mouse.dragY = 0;\n    return out;\n  };\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nexport let EPSILON = 0.000001;\n\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nexport function setEpsilon(v: number): number {\n  const old = EPSILON;\n  EPSILON = v;\n  return old;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nexport function degToRad(degrees: number): number {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nexport function radToDeg(radians: number): number {\n  return radians * 180 / Math.PI;\n}\n\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nexport function inverseLerp(a: number, b: number, v: number): number {\n  const d = b - a;\n  return (Math.abs(b - a) < EPSILON)\n     ? a\n     : (v - a) / d;\n}\n\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nexport function euclideanModulo(n: number, m: number) {\n  return ((n % m) + m) % m;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 2 values, Float32Array with 2 values, or a Float64Array with 2 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec2.setDefaultType}.\n */\nexport type Vec2 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec2 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec2. In other words you can do this\n *\n *     const v = vec2.cross(v1, v2);  // Creates a new Vec2 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec2.create();\n *     vec2.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec2.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec2 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec2\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec2\n */\nexport function setDefaultType(ctor: new (n: number) => Vec2) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Vec2Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `vec2.create` is usually used\n * to create a Vec2 to be filled out as in\n *\n * ```\n * const sum = vec2.create();\n * vec2.add(v1, v2, sum);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nexport function create(x = 0, y = 0): Vec2 {\n  const dst = new VecType(2);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n    }\n  }\n  return dst;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 3 values, Float32Array with 3 values, or a Float64Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec3.setDefaultType}.\n */\nexport type Vec3 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec3 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec3`. In other words you can do this\n *\n *     const v = vec3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec3.create();\n *     vec3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec3 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec3\n */\nexport function setDefaultType(ctor: new (n: number) => Vec3) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number): Vec3 {\n  const dst = new VecType(3);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n      }\n    }\n  }\n  return dst;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Vec2, create, setDefaultType, VecType } from './vec2';\nimport { Vec3, VecType as Vec3Type } from './vec3';\n\nexport default Vec2;\nexport { create, setDefaultType };\n\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = x;\n  dst[1] = y;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec2, min = 0, max = 1, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec2, b: Vec2, scale: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n\n  return dst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nexport function angle(a: Vec2, b: Vec2): number {\n  const ax = a[0];\n  const ay = a[1];\n  const bx = b[0];\n  const by = b[1];\n  const mag1 = Math.sqrt(ax * ax + ay * ay);\n  const mag2 = Math.sqrt(bx * bx + by * by);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec2, b: Vec2): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec2, b: Vec2): boolean {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec2, b: Vec2, t: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec2, b: Vec2, t: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec2, k: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec2, k: number, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nexport function cross(a: Vec2, b: Vec2, dst?: Vec3): Vec3 {\n  dst = dst || new Vec3Type(3);\n  const z = a[0] * b[1] - a[1] * b[0];\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = z;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec2, b: Vec2): number {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec2): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return Math.sqrt(v0 * v0 + v1 * v1);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec2): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  return v0 * v0 + v1 * v1;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec2, b: Vec2): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec2, b: Vec2): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const len = Math.sqrt(v0 * v0 + v1 * v1);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec2, b: Vec2, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec2, b: Vec2, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nexport function random(scale = 1, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const angle = Math.random() * 2 * Math.PI;\n  dst[0] = Math.cos(angle) * scale;\n  dst[1] = Math.sin(angle) * scale;\n\n  return dst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  dst[0] = 0;\n  dst[1] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec2, m: Mat4, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const x = v[0];\n  const y = v[1];\n\n  dst[0] = x * m[0] + y * m[4] + m[12];\n  dst[1] = x * m[1] + y * m[5] + m[13];\n\n  return dst;\n}\n\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat3(v: Vec2, m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || new VecType(2);\n\n  const x = v[0];\n  const y = v[1];\n\n  dst[0] = m[0] * x + m[4] * y + m[8];\n  dst[1] = m[1] * x + m[5] * y + m[9];\n\n  return dst;\n}\n\n/**\n * Rotate a 2D vector\n *\n * @param a The vec2 point to rotate\n * @param b The origin of the rotation\n * @param rad The angle of rotation in radians\n * @returns the rotated vector\n */\nexport function rotate(a: Vec2, b: Vec2, rad: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  //perform rotation and translate to correct position\n  dst[0] = p0 * cosC - p1 * sinC + b[0];\n  dst[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return dst;\n}\n\n/**\n * Treat a 2D vector as a direction and set it's length\n *\n * @param a The vec2 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec2, len: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec2 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec2, maxLen: number, dst?: Vec2) {\n  dst = dst || new VecType(2);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec2, b: Vec2, dst?: Vec2) {\n  dst = dst || new VecType(2);\n  return lerp(a, b, 0.5, dst);\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport { Quat } from './quat';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport Vec2, * as vec2 from './vec2-impl';\n\nexport default Mat3;\n\nexport type Mat3LikeCtor = new (n: number) => Mat3;\n\n/**\n * 3x3 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat3.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat3.create();\n *     mat3.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat3.identity();\n *     const trans = mat3.translation([1, 2, 3]);\n *     mat3.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType: Mat3LikeCtor = Float32Array;\n\n// This mess is because with Mat3 we have 3 unused elements.\n// For Float32Array and Float64Array that's not an issue\n// but for Array it's troublesome\nconst ctorMap = new Map<Mat3LikeCtor,() => Mat3>([\n  [Float32Array, () => new Float32Array(12)],\n  [Float64Array, () => new Float64Array(12)],\n  [Array, () => new Array(12).fill(0)],\n]);\nlet newMat3: () => Mat3 = ctorMap.get(Float32Array)!;\n\n/**\n * Sets the type this library creates for a Mat3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat3\n */\nexport function setDefaultType(ctor: new (n: number) => Mat3) {\n  const oldType = MatType;\n  MatType = ctor;\n  newMat3 = ctorMap.get(ctor)!;\n  return oldType;\n}\n\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat3Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat3.create` is usually used\n * to create a Mat3 to be filled out as in\n *\n * ```\n * const m = mat3.create();\n * mat3.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nexport function create(\n    v0?: number, v1?: number, v2?: number,\n    v3?: number, v4?: number, v5?: number,\n    v6?: number, v7?: number, v8?: number): Mat3 {\n  const dst = newMat3();\n  // to make the array homogenous\n  dst[3] = 0;\n  dst[7] = 0;\n  dst[11] = 0;\n\n  if (v0 !== undefined) {\n    dst[0] = v0;\n    if (v1 !== undefined) {\n      dst[1] = v1;\n      if (v2 !== undefined) {\n        dst[2] = v2;\n        if (v3 !== undefined) {\n          dst[4] = v3;\n          if (v4 !== undefined) {\n            dst[5] = v4;\n            if (v5 !== undefined) {\n              dst[6] = v5;\n              if (v6 !== undefined) {\n                dst[8] = v6;\n                if (v7 !== undefined) {\n                  dst[9] = v7;\n                  if (v8 !== undefined) {\n                    dst[10] = v8;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return dst;\n}\n\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nexport function set(\n    v0: number, v1: number, v2: number,\n    v3: number, v4: number, v5: number,\n    v6: number, v7: number, v8: number, dst?: Mat3) {\n  dst = dst || newMat3();\n\n  dst[0] = v0;  dst[1] = v1;  dst[ 2] = v2;  dst[ 3] = 0;\n  dst[4] = v3;  dst[5] = v4;  dst[ 6] = v5;  dst[ 7] = 0;\n  dst[8] = v6;  dst[9] = v7;  dst[10] = v8;  dst[11] = 0;\n\n  return dst;\n}\n\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nexport function fromMat4(m4: Mat4, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n  dst[0] = m4[0];  dst[1] = m4[1];  dst[ 2] = m4[ 2];  dst[ 3] = 0;\n  dst[4] = m4[4];  dst[5] = m4[5];  dst[ 6] = m4[ 6];  dst[ 7] = 0;\n  dst[8] = m4[8];  dst[9] = m4[9];  dst[10] = m4[10];  dst[11] = 0;\n  return dst;\n}\n\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nexport function fromQuat(q: Quat, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  dst[ 0] = 1 - yy - zz;  dst[ 1] = yx + wz;      dst[ 2] = zx - wy;      dst[ 3] = 0;\n  dst[ 4] = yx - wz;      dst[ 5] = 1 - xx - zz;  dst[ 6] = zy + wx;      dst[ 7] = 0;\n  dst[ 8] = zx + wy;      dst[ 9] = zy - wx;      dst[10] = 1 - xx - yy;  dst[11] = 0;\n\n  return dst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nexport function negate(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = -m[ 0];  dst[ 1] = -m[ 1];  dst[ 2] = -m[ 2];\n  dst[ 4] = -m[ 4];  dst[ 5] = -m[ 5];  dst[ 6] = -m[ 6];\n  dst[ 8] = -m[ 8];  dst[ 9] = -m[ 9];  dst[10] = -m[10];\n\n  return dst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport function copy(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = m[ 0];  dst[ 1] = m[ 1];  dst[ 2] = m[ 2];\n  dst[ 4] = m[ 4];  dst[ 5] = m[ 5];  dst[ 6] = m[ 6];\n  dst[ 8] = m[ 8];  dst[ 9] = m[ 9];  dst[10] = m[10];\n\n  return dst;\n}\n\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport const clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nexport function equalsApproximately(a: Mat3, b: Mat3): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nexport function equals(a: Mat3, b: Mat3): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10];\n}\n\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nexport function identity(dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = 1;  dst[ 1] = 0;  dst[ 2] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nexport function transpose(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n  if (dst === m) {\n    let t: number;\n\n    // 0 1 2\n    // 4 5 6\n    // 8 9 10\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  dst[ 0] = m00;  dst[ 1] = m10;  dst[ 2] = m20;\n  dst[ 4] = m01;  dst[ 5] = m11;  dst[ 6] = m21;\n  dst[ 8] = m02;  dst[ 9] = m12;  dst[10] = m22;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport function inverse(m: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  const b01 =  m22 * m11 - m12 * m21;\n  const b11 = -m22 * m10 + m12 * m20;\n  const b21 =  m21 * m10 - m11 * m20;\n\n  const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n\n  dst[ 0] = b01 * invDet;\n  dst[ 1] = (-m22 * m01 + m02 * m21) * invDet;\n  dst[ 2] = ( m12 * m01 - m02 * m11) * invDet;\n  dst[ 4] = b11 * invDet;\n  dst[ 5] = ( m22 * m00 - m02 * m20) * invDet;\n  dst[ 6] = (-m12 * m00 + m02 * m10) * invDet;\n  dst[ 8] = b21 * invDet;\n  dst[ 9] = (-m21 * m00 + m01 * m20) * invDet;\n  dst[10] = ( m11 * m00 - m01 * m10) * invDet;\n\n  return dst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nexport function determinant(m: Mat3): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  return m00 * (m11 * m22 - m21 * m12) -\n         m10 * (m01 * m22 - m21 * m02) +\n         m20 * (m01 * m12 - m11 * m02);\n}\n\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport const invert = inverse;\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport function multiply(a: Mat3, b: Mat3, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\n  return dst;\n}\n\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nexport function setTranslation(a: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n  }\n  dst[ 8] = v[0];\n  dst[ 9] = v[1];\n  dst[10] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n  dst[0] = m[8];\n  dst[1] = m[9];\n  return dst;\n}\n\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat3, axis: number, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  return dst;\n}\n\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nexport function setAxis(m: Mat3, v: Vec2, axis: number, dst?: Mat3): Mat3 {\n  if (dst !== m) {\n    dst = copy(m, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  return dst;\n}\n\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat3, dst?: Vec2): Vec2 {\n  dst = dst || vec2.create();\n\n  const xx = m[0];\n  const xy = m[1];\n  const yx = m[4];\n  const yy = m[5];\n\n  dst[0] = Math.sqrt(xx * xx + xy * xy);\n  dst[1] = Math.sqrt(yx * yx + yy * yy);\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nexport function translation(v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = 1;     dst[ 1] = 0;     dst[ 2] = 0;\n  dst[ 4] = 0;     dst[ 5] = 1;     dst[ 6] = 0;\n  dst[ 8] = v[0];  dst[ 9] = v[1];  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nexport function translate(m: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n  }\n\n  dst[ 8] = m00 * v0 + m10 * v1 + m20;\n  dst[ 9] = m01 * v0 + m11 * v1 + m21;\n  dst[10] = m02 * v0 + m12 * v1 + m22;\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotation(angleInRadians: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] =  c;  dst[ 1] = s;  dst[ 2] = 0;\n  dst[ 4] = -s;  dst[ 5] = c;  dst[ 6] = 0;\n  dst[ 8] =  0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotate(m: Mat3, angleInRadians: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function scaling(v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = v[0];  dst[ 1] = 0;     dst[ 2] = 0;\n  dst[ 4] = 0;     dst[ 5] = v[1];  dst[ 6] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function scale(m: Mat3, v: Vec2, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  const v0 = v[0];\n  const v1 = v[1];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function uniformScaling(s: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = s;  dst[ 1] = 0;  dst[ 2] = 0;\n  dst[ 4] = 0;  dst[ 5] = s;  dst[ 6] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function uniformScale(m: Mat3, s: number, dst?: Mat3): Mat3 {\n  dst = dst || newMat3();\n\n  dst[ 0] = s * m[0 * 4 + 0];\n  dst[ 1] = s * m[0 * 4 + 1];\n  dst[ 2] = s * m[0 * 4 + 2];\n\n  dst[ 4] = s * m[1 * 4 + 0];\n  dst[ 5] = s * m[1 * 4 + 1];\n  dst[ 6] = s * m[1 * 4 + 2];\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n  }\n\n  return dst;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec3, create, setDefaultType, VecType } from './vec3';\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Quat } from './quat';\n\nexport default Vec3;\nexport { create, setDefaultType };\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n  dst[2] = Math.ceil(v[2]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n  dst[2] = Math.floor(v[2]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n  dst[2] = Math.round(v[2]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec3, min = 0, max = 1, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n  dst[2] = Math.min(max, Math.max(min, v[2]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec3, b: Vec3, scale: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n  dst[2] = a[2] + b[2] * scale;\n\n  return dst;\n}\n\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nexport function angle(a: Vec3, b: Vec3): number {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n  const mag = mag1 * mag2;\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(cosine);\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec3, b: Vec3): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec3, b: Vec3): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec3, b: Vec3, t: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec3, b: Vec3, t: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec3, k: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec3, k: number, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n  dst[2] = 1 / v[2];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nexport function cross(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec3, b: Vec3): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec3): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec3): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  return v0 * v0 + v1 * v1 + v2 * v2;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec3, b: Vec3): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec3, b: Vec3): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec3, b: Vec3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nexport function random(scale = 1, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const angle = Math.random() * 2 * Math.PI;\n  const z = Math.random() * 2 - 1;\n  const zScale = Math.sqrt(1 - z * z) * scale;\n  dst[0] = Math.cos(angle) * zScale;\n  dst[1] = Math.sin(angle) * zScale;\n  dst[2] = z * scale;\n\n  return dst;\n}\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec3, m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n\n  dst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  dst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  dst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return dst;\n}\n\n/**\n * Transform vec4 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional Vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nexport function transformMat4Upper3x3(v: Vec3, m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat3(v: Vec3, m: Mat3, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  dst[0] = x * m[0] + y * m[4] + z * m[8];\n  dst[1] = x * m[1] + y * m[5] + z * m[9];\n  dst[2] = x * m[2] + y * m[6] + z * m[10];\n\n  return dst;\n}\n\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nexport function transformQuat(v: Vec3, q: Quat, dst?: Vec3): Vec3 {\n  dst = dst || new VecType(3);\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const w2 = q[3] * 2;\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  const uvX = qy * z - qz * y;\n  const uvY = qz * x - qx * z;\n  const uvZ = qx * y - qy * x;\n\n  dst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n  dst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n  dst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat3, dst?: Vec3) {\n    dst = dst || new VecType(3);\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat4, axis: number, dst?: Vec3) {\n    dst = dst || new VecType(3);\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat4, dst: Vec3) {\n    dst = dst || new VecType(3);\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return dst;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nexport function rotateX(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns the rotated vector\n */\nexport function rotateY(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n *\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @param dst - The vector to set. If not passed a new one is created.\n * @returns {vec3} out\n */\nexport function rotateZ(a: Vec3, b: Vec3, rad: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  const p = [];\n  const r = [];\n\n  // translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  dst[0] = r[0] + b[0];\n  dst[1] = r[1] + b[1];\n  dst[2] = r[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Treat a 3D vector as a direction and set it's length\n *\n * @param a The vec3 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec3, len: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec3 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec3, maxLen: number, dst?: Vec3) {\n  dst = dst || new VecType(3);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec3, b: Vec3, dst?: Vec3) {\n  dst = dst || new VecType(3);\n  return lerp(a, b, 0.5, dst);\n}\n", "\nimport { Mat3 } from './mat3';\nimport { Mat4 } from './mat4';\nimport { Quat } from './quat';\nimport Vec3, * as vec3 from './vec3-impl';\nimport * as utils from './utils';\n\nexport default Mat4;\n\nexport type Mat4LikeCtor = new (n: number) => Mat4;\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType: Mat4LikeCtor = Float32Array;\n\n/**\n * Sets the type this library creates for a Mat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat4\n */\nexport function setDefaultType(ctor: new (n: number) => Mat4) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat4Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat4.create` is usually used\n * to create a Mat4 to be filled out as in\n *\n * ```\n * const m = mat4.create();\n * mat4.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nexport function create(\n    v0?: number, v1?: number, v2?: number, v3?: number,\n    v4?: number, v5?: number, v6?: number, v7?: number,\n    v8?: number, v9?: number, v10?: number, v11?: number,\n    v12?: number, v13?: number, v14?: number, v15?: number): Mat4 {\n  const dst = new MatType(16);\n  if (v0 !== undefined) {\n    dst[0] = v0;\n    if (v1 !== undefined) {\n      dst[1] = v1;\n      if (v2 !== undefined) {\n        dst[2] = v2;\n        if (v3 !== undefined) {\n          dst[3] = v3;\n          if (v4 !== undefined) {\n            dst[4] = v4;\n            if (v5 !== undefined) {\n              dst[5] = v5;\n              if (v6 !== undefined) {\n                dst[6] = v6;\n                if (v7 !== undefined) {\n                  dst[7] = v7;\n                  if (v8 !== undefined) {\n                    dst[8] = v8;\n                    if (v9 !== undefined) {\n                      dst[9] = v9;\n                      if (v10 !== undefined) {\n                        dst[10] = v10;\n                        if (v11 !== undefined) {\n                          dst[11] = v11;\n                          if (v12 !== undefined) {\n                            dst[12] = v12;\n                            if (v13 !== undefined) {\n                              dst[13] = v13;\n                              if (v14 !== undefined) {\n                                dst[14] = v14;\n                                if (v15 !== undefined) {\n                                  dst[15] = v15;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nexport function set(\n    v0: number, v1: number, v2: number, v3: number,\n    v4: number, v5: number, v6: number, v7: number,\n    v8: number, v9: number, v10: number, v11: number,\n    v12: number, v13: number, v14: number, v15: number,\n    dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v0;   dst[ 1] = v1;   dst[ 2] = v2;   dst[ 3] = v3;\n  dst[ 4] = v4;   dst[ 5] = v5;   dst[ 6] = v6;   dst[ 7] = v7;\n  dst[ 8] = v8;   dst[ 9] = v9;   dst[10] = v10;  dst[11] = v11;\n  dst[12] = v12;  dst[13] = v13;  dst[14] = v14;  dst[15] = v15;\n\n  return dst;\n}\n\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nexport function fromMat3(m3: Mat3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m3[0];  dst[ 1] = m3[1];  dst[ 2] = m3[ 2];  dst[ 3] = 0;\n  dst[ 4] = m3[4];  dst[ 5] = m3[5];  dst[ 6] = m3[ 6];  dst[ 7] = 0;\n  dst[ 8] = m3[8];  dst[ 9] = m3[9];  dst[10] = m3[10];  dst[11] = 0;\n  dst[12] = 0;      dst[13] = 0;      dst[14] = 0;       dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nexport function fromQuat(q: Quat, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const x = q[0]; const y = q[1]; const z = q[2]; const w = q[3];\n  const x2 = x + x; const y2 = y + y; const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  dst[ 0] = 1 - yy - zz;  dst[ 1] = yx + wz;      dst[ 2] = zx - wy;      dst[ 3] = 0;\n  dst[ 4] = yx - wz;      dst[ 5] = 1 - xx - zz;  dst[ 6] = zy + wx;      dst[ 7] = 0;\n  dst[ 8] = zx + wy;      dst[ 9] = zy - wx;      dst[10] = 1 - xx - yy;  dst[11] = 0;\n  dst[12] = 0;            dst[13] = 0;            dst[14] = 0;            dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nexport function negate(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];  dst[ 1] = -m[ 1];  dst[ 2] = -m[ 2];  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];  dst[ 5] = -m[ 5];  dst[ 6] = -m[ 6];  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];  dst[ 9] = -m[ 9];  dst[10] = -m[10];  dst[11] = -m[11];\n  dst[12] = -m[12];  dst[13] = -m[13];  dst[14] = -m[14];  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport function copy(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];  dst[ 1] = m[ 1];  dst[ 2] = m[ 2];  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];  dst[ 5] = m[ 5];  dst[ 6] = m[ 6];  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];  dst[ 9] = m[ 9];  dst[10] = m[10];  dst[11] = m[11];\n  dst[12] = m[12];  dst[13] = m[13];  dst[14] = m[14];  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nexport const clone = copy;\n\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nexport function equalsApproximately(a: Mat4, b: Mat4): boolean {\n  return Math.abs(a[ 0] - b[ 0]) < utils.EPSILON &&\n         Math.abs(a[ 1] - b[ 1]) < utils.EPSILON &&\n         Math.abs(a[ 2] - b[ 2]) < utils.EPSILON &&\n         Math.abs(a[ 3] - b[ 3]) < utils.EPSILON &&\n         Math.abs(a[ 4] - b[ 4]) < utils.EPSILON &&\n         Math.abs(a[ 5] - b[ 5]) < utils.EPSILON &&\n         Math.abs(a[ 6] - b[ 6]) < utils.EPSILON &&\n         Math.abs(a[ 7] - b[ 7]) < utils.EPSILON &&\n         Math.abs(a[ 8] - b[ 8]) < utils.EPSILON &&\n         Math.abs(a[ 9] - b[ 9]) < utils.EPSILON &&\n         Math.abs(a[10] - b[10]) < utils.EPSILON &&\n         Math.abs(a[11] - b[11]) < utils.EPSILON &&\n         Math.abs(a[12] - b[12]) < utils.EPSILON &&\n         Math.abs(a[13] - b[13]) < utils.EPSILON &&\n         Math.abs(a[14] - b[14]) < utils.EPSILON &&\n         Math.abs(a[15] - b[15]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nexport function equals(a: Mat4, b: Mat4): boolean {\n  return a[ 0] === b[ 0] &&\n         a[ 1] === b[ 1] &&\n         a[ 2] === b[ 2] &&\n         a[ 3] === b[ 3] &&\n         a[ 4] === b[ 4] &&\n         a[ 5] === b[ 5] &&\n         a[ 6] === b[ 6] &&\n         a[ 7] === b[ 7] &&\n         a[ 8] === b[ 8] &&\n         a[ 9] === b[ 9] &&\n         a[10] === b[10] &&\n         a[11] === b[11] &&\n         a[12] === b[12] &&\n         a[13] === b[13] &&\n         a[14] === b[14] &&\n         a[15] === b[15];\n}\n\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nexport function identity(dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;  dst[ 1] = 0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = 1;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nexport function transpose(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;  dst[ 1] = m10;  dst[ 2] = m20;  dst[ 3] = m30;\n  dst[ 4] = m01;  dst[ 5] = m11;  dst[ 6] = m21;  dst[ 7] = m31;\n  dst[ 8] = m02;  dst[ 9] = m12;  dst[10] = m22;  dst[11] = m32;\n  dst[12] = m03;  dst[13] = m13;  dst[14] = m23;  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport function inverse(m: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n  const tmp12 = m20 * m31;\n  const tmp13 = m30 * m21;\n  const tmp14 = m10 * m31;\n  const tmp15 = m30 * m11;\n  const tmp16 = m10 * m21;\n  const tmp17 = m20 * m11;\n  const tmp18 = m00 * m31;\n  const tmp19 = m30 * m01;\n  const tmp20 = m00 * m21;\n  const tmp21 = m20 * m01;\n  const tmp22 = m00 * m11;\n  const tmp23 = m10 * m01;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n      (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n      (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n      (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n      (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n          (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n  dst[ 5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n          (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n  dst[ 6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n          (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n  dst[ 7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n          (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n  dst[ 8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n          (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n  dst[ 9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n          (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n  dst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n          (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n  dst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n          (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n  dst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n          (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n  dst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n          (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n  dst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n          (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n  dst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n          (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n\n  return dst;\n}\n\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nexport function determinant(m: Mat4): number {\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  const tmp0  = m22 * m33;\n  const tmp1  = m32 * m23;\n  const tmp2  = m12 * m33;\n  const tmp3  = m32 * m13;\n  const tmp4  = m12 * m23;\n  const tmp5  = m22 * m13;\n  const tmp6  = m02 * m33;\n  const tmp7  = m32 * m03;\n  const tmp8  = m02 * m23;\n  const tmp9  = m22 * m03;\n  const tmp10 = m02 * m13;\n  const tmp11 = m12 * m03;\n\n  const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n             (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n  const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n             (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n  const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n             (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n  const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n             (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n\n  return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nexport const invert = inverse;\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport function multiply(a: Mat4, b: Mat4, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nexport function setTranslation(a: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nexport function getTranslation(m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nexport function getAxis(m: Mat4, axis: number, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nexport function setAxis(m: Mat4, v: Vec3, axis: number, dst: Mat4): Mat4 {\n  if (dst !== m) {\n    dst = copy(m, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nexport function getScaling(m: Mat4, dst?: Vec3): Vec3 {\n  dst = dst || vec3.create();\n\n  const xx = m[0];\n  const xy = m[1];\n  const xz = m[2];\n  const yx = m[4];\n  const yy = m[5];\n  const yz = m[6];\n  const zx = m[8];\n  const zy = m[9];\n  const zz = m[10];\n\n  dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n  dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n  dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nexport function perspective(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (Number.isFinite(zFar)) {\n    const rangeInv = 1 / (zNear - zFar);\n    dst[10] = zFar * rangeInv;\n    dst[14] = zFar * zNear * rangeInv;\n  } else {\n    dst[10] = -1;\n    dst[14] = -zNear;\n  }\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane. (default = Infinity)\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */export function perspectiveReverseZ(fieldOfViewYInRadians: number, aspect: number, zNear: number, zFar = Infinity, dst?: Mat4) {\n  dst = dst || new MatType(16);\n\n  const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n\n  dst[ 0] = f / aspect;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n\n  dst[ 4] = 0;\n  dst[ 5] = f;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (zFar === Infinity) {\n    dst[10] = 0;\n    dst[14] = zNear;\n  } else {\n    const rangeInv = 1 / (zFar - zNear);\n    dst[10] = zNear * rangeInv;\n    dst[14] = zFar * zNear * rangeInv;\n  }\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nexport function ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 1 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = near / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nexport function frustum(left: number, right: number, bottom: number, top: number, near: number, far: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nexport function frustumReverseZ(left: number, right: number, bottom: number, top: number, near: number, far = Infinity, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[15] = 0;\n\n  if (far === Infinity) {\n    dst[10] = 0;\n    dst[14] = near;\n  } else {\n    const rangeInv = 1 / (far - near);\n    dst[10] = near * rangeInv;\n    dst[14] = far * near * rangeInv;\n  }\n\n  return dst;\n}\n\nlet xAxis: Vec3;\nlet yAxis: Vec3;\nlet zAxis: Vec3;\n\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nexport function aim(position: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];     dst[ 1] = xAxis[1];     dst[ 2] = xAxis[2];     dst[ 3] = 0;\n  dst[ 4] = yAxis[0];     dst[ 5] = yAxis[1];     dst[ 6] = yAxis[2];     dst[ 7] = 0;\n  dst[ 8] = zAxis[0];     dst[ 9] = zAxis[1];     dst[10] = zAxis[2];     dst[11] = 0;\n  dst[12] = position[0];  dst[13] = position[1];  dst[14] = position[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nexport function cameraAim(eye: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];     dst[ 1] = xAxis[1];     dst[ 2] = xAxis[2];     dst[ 3] = 0;\n  dst[ 4] = yAxis[0];     dst[ 5] = yAxis[1];     dst[ 6] = yAxis[2];     dst[ 7] = 0;\n  dst[ 8] = zAxis[0];     dst[ 9] = zAxis[1];     dst[10] = zAxis[2];     dst[11] = 0;\n  dst[12] = eye[0];  dst[13] = eye[1];  dst[14] = eye[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nexport function lookAt(eye: Vec3, target: Vec3, up: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || vec3.create();\n  yAxis = yAxis || vec3.create();\n  zAxis = zAxis || vec3.create();\n\n  vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n  vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n  vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];  dst[ 1] = yAxis[0];  dst[ 2] = zAxis[0];  dst[ 3] = 0;\n  dst[ 4] = xAxis[1];  dst[ 5] = yAxis[1];  dst[ 6] = zAxis[1];  dst[ 7] = 0;\n  dst[ 8] = xAxis[2];  dst[ 9] = yAxis[2];  dst[10] = zAxis[2];  dst[11] = 0;\n\n  dst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n  dst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n  dst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nexport function translation(v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;     dst[ 1] = 0;     dst[ 2] = 0;     dst[ 3] = 0;\n  dst[ 4] = 0;     dst[ 5] = 1;     dst[ 6] = 0;     dst[ 7] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = 1;     dst[11] = 0;\n  dst[12] = v[0];  dst[13] = v[1];  dst[14] = v[2];  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nexport function translate(m: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationX(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;  dst[ 1] =  0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] =  c;  dst[ 6] = s;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = -s;  dst[10] = c;  dst[11] = 0;\n  dst[12] = 0;  dst[13] =  0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateX(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationY(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;  dst[ 1] = 0;  dst[ 2] = -s;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = 1;  dst[ 6] =  0;  dst[ 7] = 0;\n  dst[ 8] = s;  dst[ 9] = 0;  dst[10] =  c;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] =  0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateY(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nexport function rotationZ(angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] =  c;  dst[ 1] = s;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = -s;  dst[ 5] = c;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] =  0;  dst[ 9] = 0;  dst[10] = 1;  dst[11] = 0;\n  dst[12] =  0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function rotateZ(m: Mat4, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nexport function axisRotation(axis: Vec3, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nexport const rotation = axisRotation;\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport function axisRotate(m: Mat4, axis: Vec3, angleInRadians: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nexport const rotate = axisRotate;\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function scaling(v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];  dst[ 1] = 0;     dst[ 2] = 0;     dst[ 3] = 0;\n  dst[ 4] = 0;     dst[ 5] = v[1];  dst[ 6] = 0;     dst[ 7] = 0;\n  dst[ 8] = 0;     dst[ 9] = 0;     dst[10] = v[2];  dst[11] = 0;\n  dst[12] = 0;     dst[13] = 0;     dst[14] = 0;     dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function scale(m: Mat4, v: Vec3, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nexport function uniformScaling(s: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = s;  dst[ 1] = 0;  dst[ 2] = 0;  dst[ 3] = 0;\n  dst[ 4] = 0;  dst[ 5] = s;  dst[ 6] = 0;  dst[ 7] = 0;\n  dst[ 8] = 0;  dst[ 9] = 0;  dst[10] = s;  dst[11] = 0;\n  dst[12] = 0;  dst[13] = 0;  dst[14] = 0;  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nexport function uniformScale(m: Mat4, s: number, dst?: Mat4): Mat4 {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = s * m[0 * 4 + 0];\n  dst[ 1] = s * m[0 * 4 + 1];\n  dst[ 2] = s * m[0 * 4 + 2];\n  dst[ 3] = s * m[0 * 4 + 3];\n  dst[ 4] = s * m[1 * 4 + 0];\n  dst[ 5] = s * m[1 * 4 + 1];\n  dst[ 6] = s * m[1 * 4 + 2];\n  dst[ 7] = s * m[1 * 4 + 3];\n  dst[ 8] = s * m[2 * 4 + 0];\n  dst[ 9] = s * m[2 * 4 + 1];\n  dst[10] = s * m[2 * 4 + 2];\n  dst[11] = s * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 4 values, Float32Array with 4 values, or a Float64Array with 4 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link quat.setDefaultType}.\n */\nexport type Quat = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let QuatType: new (n: number) => Quat = Float32Array;\n\n/**\n * Sets the type this library creates for a Quat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Quat4\n */\nexport function setDefaultType(ctor: new (n: number) => Quat) {\n  const oldType = QuatType;\n  QuatType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number, w?: number): Quat {\n  const dst = new QuatType(4);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n        if (w !== undefined) {\n          dst[3] = w;\n        }\n      }\n    }\n  }\n  return dst;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Quat, create, setDefaultType, QuatType } from './quat';\nimport { Mat3 } from './mat3.js';\nimport { Mat4 } from './mat4.js';\nimport { Vec3 } from './vec3.js';\nimport * as vec3 from './vec3-impl.js';\n\nexport type RotationOrder =  'xyz' |  'xzy' |  'yxz' |  'yzx' |  'zxy' |  'zyx';\n\nexport default Quat;\nexport { create, setDefaultType };\n\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, w: number, dst?: Quat) {\n  dst = dst || new QuatType(4);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n  dst[3] = w;\n\n  return dst;\n}\n\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nexport function fromAxisAngle(axis: Vec3, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n  const s = Math.sin(halfAngle);\n\n  dst[0] = s * axis[0];\n  dst[1] = s * axis[1];\n  dst[2] = s * axis[2];\n  dst[3] = Math.cos(halfAngle);\n\n  return dst;\n}\n\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nexport function toAxisAngle(q: Quat, dst?: Vec3): { angle: number, axis: Vec3 } {\n  dst = dst || vec3.create(4);\n\n  const angle = Math.acos(q[3]) * 2;\n  const s = Math.sin(angle * 0.5);\n  if (s > utils.EPSILON) {\n    dst[0] = q[0] / s;\n    dst[1] = q[1] / s;\n    dst[2] = q[2] / s;\n  } else {\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return { angle, axis: dst };\n}\n\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nexport function angle(a: Quat, b: Quat) {\n  const d = dot(a, b);\n  return Math.acos(2 * d * d - 1);\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function multiply(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  dst[0] = ax * bw + aw * bx + ay * bz - az * by;\n  dst[1] = ay * bw + aw * by + az * bx - ax * bz;\n  dst[2] = az * bw + aw * bz + ax * by - ay * bx;\n  dst[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return dst;\n}\n\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport const mul = multiply;\n\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateX(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bx = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw + qw * bx;\n  dst[1] = qy * bw + qz * bx;\n  dst[2] = qz * bw - qy * bx;\n  dst[3] = qw * bw - qx * bx;\n\n  return dst;\n}\n\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateY(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const by = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw - qz * by;\n  dst[1] = qy * bw + qw * by;\n  dst[2] = qz * bw + qx * by;\n  dst[3] = qw * bw - qy * by;\n\n  return dst;\n}\n\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function rotateZ(q: Quat, angleInRadians: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const halfAngle = angleInRadians * 0.5;\n\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  const bz = Math.sin(halfAngle);\n  const bw = Math.cos(halfAngle);\n\n  dst[0] = qx * bw + qy * bz;\n  dst[1] = qy * bw - qx * bz;\n  dst[2] = qz * bw + qw * bz;\n  dst[3] = qw * bw - qz * bz;\n\n  return dst;\n}\n\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nexport function slerp(a: Quat, b: Quat, t: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n\n  if (cosOmega < 0) {\n    cosOmega = -cosOmega;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n\n  let scale0;\n  let scale1;\n\n  if (1.0 - cosOmega > utils.EPSILON) {\n    const omega = Math.acos(cosOmega);\n    const sinOmega = Math.sin(omega);\n    scale0 = Math.sin((1 - t) * omega) / sinOmega;\n    scale1 = Math.sin(t * omega) / sinOmega;\n  } else {\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n\n  dst[0] = scale0 * ax + scale1 * bx;\n  dst[1] = scale0 * ay + scale1 * by;\n  dst[2] = scale0 * az + scale1 * bz;\n  dst[3] = scale0 * aw + scale1 * bw;\n\n  return dst;\n}\n\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nexport function inverse(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const a0 = q[0];\n  const a1 = q[1];\n  const a2 = q[2];\n  const a3 = q[3];\n\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1 / dot : 0;\n\n  dst[0] = -a0 * invDot;\n  dst[1] = -a1 * invDot;\n  dst[2] = -a2 * invDot;\n  dst[3] =  a3 * invDot;\n\n  return dst;\n}\n\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nexport function conjugate(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = -q[0];\n  dst[1] = -q[1];\n  dst[2] = -q[2];\n  dst[3] =  q[3];\n\n  return dst;\n}\n\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nexport function fromMat(m: Mat3 | Mat4, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  /*\n  0 1 2\n  3 4 5\n  6 7 8\n\n  0 1 2\n  4 5 6\n  8 9 10\n   */\n\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const trace = m[0] + m[5] + m[10];\n\n  if (trace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    const root = Math.sqrt(trace + 1); // 2w\n    dst[3] = 0.5 * root;\n    const invRoot = 0.5 / root; // 1/(4w)\n\n    dst[0] = (m[6] - m[9]) * invRoot;\n    dst[1] = (m[8] - m[2]) * invRoot;\n    dst[2] = (m[1] - m[4]) * invRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n\n    if (m[5] > m[0]) {\n      i = 1;\n    }\n    if (m[10] > m[i * 4 + i]) {\n      i = 2;\n    }\n\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n    dst[i] = 0.5 * root;\n\n    const invRoot = 0.5 / root;\n\n    dst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n    dst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n    dst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n  }\n\n  return dst;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nexport function fromEuler(\n    xAngleInRadians: number,\n    yAngleInRadians: number,\n    zAngleInRadians: number,\n    order: RotationOrder,\n    dst?: Quat) {\n  dst = dst || new QuatType(4);\n\n  const xHalfAngle = xAngleInRadians * 0.5;\n  const yHalfAngle = yAngleInRadians * 0.5;\n  const zHalfAngle = zAngleInRadians * 0.5;\n\n  const sx = Math.sin(xHalfAngle);\n  const cx = Math.cos(xHalfAngle);\n  const sy = Math.sin(yHalfAngle);\n  const cy = Math.cos(yHalfAngle);\n  const sz = Math.sin(zHalfAngle);\n  const cz = Math.cos(zHalfAngle);\n\n  switch (order) {\n    case 'xyz':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'xzy':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yxz':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz - sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    case 'yzx':\n      dst[0] = sx * cy * cz + cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zxy':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz + sx * sy * cz;\n      dst[3] = cx * cy * cz - sx * sy * sz;\n      break;\n\n    case 'zyx':\n      dst[0] = sx * cy * cz - cx * sy * sz;\n      dst[1] = cx * sy * cz + sx * cy * sz;\n      dst[2] = cx * cy * sz - sx * sy * cz;\n      dst[3] = cx * cy * cz + sx * sy * sz;\n      break;\n\n    default:\n      throw new Error(`Unknown rotation order: ${order}`);\n  }\n\n  return dst;\n}\n\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nexport function copy(q: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = q[0];\n  dst[1] = q[1];\n  dst[2] = q[2];\n  dst[3] = q[3];\n\n  return dst;\n}\n\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nexport const clone = copy;\n\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nexport function add(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  dst[3] = a[3] + b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nexport function subtract(a: Quat, b: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  dst[3] = a[3] - b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport function mulScalar(v: Quat, k: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  dst[3] = v[3] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nexport function divScalar(v: Quat, k: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  dst[3] = v[3] / k;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nexport function dot(a: Quat, b: Quat): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Quat, b: Quat, t: number, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  dst[3] = a[3] + t * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nexport function length(v: Quat): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nexport function lengthSq(v: Quat): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nexport function normalize(v: Quat, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n    dst[3] = v3 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nexport function equalsApproximately(a: Quat, b: Quat): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nexport function equals(a: Quat, b: Quat): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nexport function identity(dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 1;\n\n  return dst;\n}\n\nlet tempVec3: Vec3;\nlet xUnitVec3: Vec3;\nlet yUnitVec3: Vec3;\n\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nexport function rotationTo(aUnit: Vec3, bUnit: Vec3, dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  tempVec3 = tempVec3 || vec3.create();\n  xUnitVec3 = xUnitVec3 || vec3.create(1, 0, 0);\n  yUnitVec3 = yUnitVec3 || vec3.create(0, 1, 0);\n\n  const dot = vec3.dot(aUnit, bUnit);\n  if (dot < -0.999999) {\n    vec3.cross(xUnitVec3, aUnit, tempVec3);\n    if (vec3.len(tempVec3) < 0.000001) {\n      vec3.cross(yUnitVec3, aUnit, tempVec3);\n    }\n\n    vec3.normalize(tempVec3, tempVec3);\n    fromAxisAngle(tempVec3, Math.PI, dst);\n\n    return dst;\n  } else if (dot > 0.999999) {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 1;\n\n    return dst;\n  } else {\n    vec3.cross(aUnit, bUnit, tempVec3);\n\n    dst[0] = tempVec3[0];\n    dst[1] = tempVec3[1];\n    dst[2] = tempVec3[2];\n    dst[3] = 1 + dot;\n\n    return normalize(dst, dst);\n  }\n}\n\nlet tempQuat1: Quat;\nlet tempQuat2: Quat;\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nexport function sqlerp(\n    a: Quat,\n    b: Quat,\n    c: Quat,\n    d: Quat,\n    t: number,\n    dst?: Quat): Quat {\n  dst = dst || new QuatType(4);\n\n  tempQuat1 = tempQuat1 || new QuatType(4);\n  tempQuat2 = tempQuat2 || new QuatType(4);\n\n  slerp(a, d, t, tempQuat1);\n  slerp(b, c, t, tempQuat2);\n  slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), dst);\n\n  return dst;\n}\n", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A JavaScript array with 4 values, Float32Array with 4 values, or a Float64Array with 4 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link vec4.setDefaultType}.\n */\nexport type Vec4 = number[] | Float32Array | Float64Array;\n\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\n\nexport let VecType: new (n: number) => Vec4 = Float32Array;\n\n/**\n * Sets the type this library creates for a Vec4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec4\n */\nexport function setDefaultType(ctor: new (n: number) => Vec4) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nexport function create(x?: number, y?: number, z?: number, w?: number): Vec4 {\n  const dst = new VecType(4);\n  if (x !== undefined) {\n    dst[0] = x;\n    if (y !== undefined) {\n      dst[1] = y;\n      if (z !== undefined) {\n        dst[2] = z;\n        if (w !== undefined) {\n          dst[3] = w;\n        }\n      }\n    }\n  }\n  return dst;\n}", "/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport * as utils from './utils.js';\nimport { Vec4, create, setDefaultType, VecType } from './vec4';\nimport { Mat4 } from './mat4';\n\nexport default Vec4;\nexport { create, setDefaultType };\n\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nexport const fromValues = create;\n\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nexport function set(x: number, y: number, z: number, w: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  dst[0] = x;\n  dst[1] = y;\n  dst[2] = z;\n  dst[3] = w;\n\n  return dst;\n}\n\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nexport function ceil(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.ceil(v[0]);\n  dst[1] = Math.ceil(v[1]);\n  dst[2] = Math.ceil(v[2]);\n  dst[3] = Math.ceil(v[3]);\n\n  return dst;\n}\n\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nexport function floor(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.floor(v[0]);\n  dst[1] = Math.floor(v[1]);\n  dst[2] = Math.floor(v[2]);\n  dst[3] = Math.floor(v[3]);\n\n  return dst;\n}\n\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nexport function round(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.round(v[0]);\n  dst[1] = Math.round(v[1]);\n  dst[2] = Math.round(v[2]);\n  dst[3] = Math.round(v[3]);\n\n  return dst;\n}\n\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nexport function clamp(v: Vec4, min = 0, max = 1, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.min(max, Math.max(min, v[0]));\n  dst[1] = Math.min(max, Math.max(min, v[1]));\n  dst[2] = Math.min(max, Math.max(min, v[2]));\n  dst[3] = Math.min(max, Math.max(min, v[3]));\n\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nexport function add(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  dst[3] = a[3] + b[3];\n\n  return dst;\n}\n\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nexport function addScaled(a: Vec4, b: Vec4, scale: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + b[0] * scale;\n  dst[1] = a[1] + b[1] * scale;\n  dst[2] = a[2] + b[2] * scale;\n  dst[3] = a[3] + b[3] * scale;\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport function subtract(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  dst[3] = a[3] - b[3];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nexport const sub = subtract;\n\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nexport function equalsApproximately(a: Vec4, b: Vec4): boolean {\n  return Math.abs(a[0] - b[0]) < utils.EPSILON &&\n         Math.abs(a[1] - b[1]) < utils.EPSILON &&\n         Math.abs(a[2] - b[2]) < utils.EPSILON &&\n         Math.abs(a[3] - b[3]) < utils.EPSILON;\n}\n\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nexport function equals(a: Vec4, b: Vec4): boolean {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nexport function lerp(a: Vec4, b: Vec4, t: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  dst[3] = a[3] + t * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nexport function lerpV(a: Vec4, b: Vec4, t: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n  dst[3] = a[3] + t[3] * (b[3] - a[3]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nexport function max(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n  dst[3] = Math.max(a[3], b[3]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nexport function min(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n  dst[3] = Math.min(a[3], b[3]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function mulScalar(v: Vec4, k: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  dst[3] = v[3] * k;\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport const scale = mulScalar;\n\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nexport function divScalar(v: Vec4, k: number, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  dst[3] = v[3] / k;\n\n  return dst;\n}\n\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport function inverse(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = 1 / v[0];\n  dst[1] = 1 / v[1];\n  dst[2] = 1 / v[2];\n  dst[3] = 1 / v[3];\n\n  return dst;\n}\n\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nexport const invert = inverse;\n\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nexport function dot(a: Vec4, b: Vec4): number {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nexport function length(v: Vec4): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nexport const len = length;\n\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport function lengthSq(v: Vec4): number {\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nexport const lenSq = lengthSq;\n\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport function distance(a: Vec4, b: Vec4): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nexport const dist = distance;\n\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport function distanceSq(a: Vec4, b: Vec4): number {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  const dw = a[3] - b[3];\n  return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nexport const distSq = distanceSq;\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nexport function normalize(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const v3 = v[3];\n  const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n\n  if (len > 0.00001) {\n    dst[0] = v0 / len;\n    dst[1] = v1 / len;\n    dst[2] = v2 / len;\n    dst[3] = v3 / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nexport function negate(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n  dst[3] = -v[3];\n\n  return dst;\n}\n\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport function copy(v: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n  dst[3] = v[3];\n\n  return dst;\n}\n\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nexport const clone = copy;\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport function multiply(a: Vec4, b: Vec4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n  dst[3] = a[3] * b[3];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nexport const mul = multiply;\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport function divide(a: Vec4, b: Vec4, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n  dst[3] = a[3] / b[3];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nexport const div = divide;\n\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nexport function zero(dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  dst[0] = 0;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n\n  return dst;\n}\n\n\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nexport function transformMat4(v: Vec4, m: Mat4, dst?: Vec4): Vec4 {\n  dst = dst || new VecType(4);\n\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  const w = v[3];\n\n  dst[0] = m[0] * x + m[4] * y + m[ 8] * z + m[12] * w;\n  dst[1] = m[1] * x + m[5] * y + m[ 9] * z + m[13] * w;\n  dst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  dst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return dst;\n}\n\n\n/**\n * Treat a 4D vector as a direction and set it's length\n *\n * @param a The vec4 to lengthen\n * @param len The length of the resulting vector\n * @returns The lengthened vector\n */\nexport function setLength(a: Vec4, len: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n  normalize(a, dst);\n  return mulScalar(dst, len, dst);\n}\n\n/**\n * Ensure a vector is not longer than a max length\n *\n * @param a The vec4 to limit\n * @param maxLen The longest length of the resulting vector\n * @returns The vector, shortened to maxLen if it's too long\n */\nexport function truncate(a: Vec4, maxLen: number, dst?: Vec4) {\n  dst = dst || new VecType(4);\n\n  if (length(a) > maxLen) {\n    return setLength(a, maxLen, dst);\n  }\n\n  return copy(a, dst);\n}\n\n/**\n * Return the vector exactly between 2 endpoint vectors\n *\n * @param a Endpoint 1\n * @param b Endpoint 2\n * @returns The vector exactly residing between endpoints 1 and 2\n */\nexport function midpoint(a: Vec4, b: Vec4, dst?: Vec4) {\n  dst = dst || new VecType(4);\n  return lerp(a, b, 0.5, dst);\n}\n", "import Mat3, * as mat3 from './mat3-impl';\nimport Mat4, * as mat4 from './mat4-impl';\nimport Quat, * as quat from './quat-impl';\nimport Vec2, * as vec2 from './vec2-impl';\nimport Vec3, * as vec3 from './vec3-impl';\nimport Vec4, * as vec4 from './vec4-impl';\nimport * as utils from './utils';\n\n/**\n * Sets the type this library creates for all types\n *\n * example:\n *\n * ```\n * setDefaultType(Float64Array);\n * ```\n *\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n */\nexport function setDefaultType(ctor: new (n: number) => Float32Array | Float64Array | number[]) {\n  mat3.setDefaultType(ctor);\n  mat4.setDefaultType(ctor);\n  quat.setDefaultType(ctor);\n  vec2.setDefaultType(ctor);\n  vec3.setDefaultType(ctor);\n  vec4.setDefaultType(ctor);\n}\n\nexport {\n  Mat3,\n  mat3,\n  Mat4,\n  mat4,\n  Quat,\n  quat,\n  utils,\n  Vec2,\n  vec2,\n  Vec3,\n  vec3,\n  Vec4,\n  vec4,\n};", "import { Mat4 } from 'wgpu-matrix';\nimport { BYTES_F32, BYTES_U32 } from '../constants.ts';\nimport { divideCeil } from './index.ts';\n\nexport class TypedArrayView {\n  public readonly asF32: Float32Array;\n  public readonly asU32: Uint32Array;\n\n  /** Write cursor */\n  private offsetBytes = 0;\n\n  constructor(\n    private readonly buffer: ArrayBuffer,\n    private readonly byteOffset: number = 0,\n    private readonly byteSize: number = 0\n  ) {\n    this.byteSize = byteSize === 0 ? buffer.byteLength : byteSize;\n    // DO NOT USE THE CONSTRUCTOR WITH 3 PARAMS!\n    this.asF32 = new Float32Array(buffer);\n    this.asU32 = new Uint32Array(buffer);\n  }\n\n  f32 = (idx: number) => this.asF32[idx];\n  u32 = (idx: number) => this.asU32[idx];\n  cursor = () => this.offsetBytes;\n\n  resetCursor() {\n    this.offsetBytes = 0;\n  }\n\n  padding(bytesCount: number) {\n    this.offsetBytes += bytesCount;\n  }\n\n  assertWrittenBytes(bytesCount: number) {\n    if (this.offsetBytes !== bytesCount) {\n      throw new Error(`Written invalid byte count ${this.offsetBytes}. Expected ${bytesCount}.`); // prettier-ignore\n    }\n    if (this.offsetBytes % 16 !== 0) {\n      const nextValidSize = divideCeil(this.offsetBytes, 16) * 16;\n      const padddingU32s = (nextValidSize - this.offsetBytes) / BYTES_U32;\n      throw new Error(`Byte count ${this.offsetBytes} does not cleanly divide by 16. This might lead to errors. Add padding to fill to ${nextValidSize} bytes (${padddingU32s} u32 elements is enough).`); // prettier-ignore\n    }\n  }\n\n  writeMat4(mat: Mat4) {\n    for (let i = 0; i < 16; i++) {\n      this.writeF32(mat[i]);\n    }\n  }\n\n  writeF32Array(arr: Float32Array) {\n    for (let i = 0; i < arr.length; i++) {\n      this.writeF32(arr[i]);\n    }\n  }\n\n  writeF32(v: number) {\n    const offset = (this.byteOffset + this.offsetBytes) / BYTES_F32;\n    this.asF32[offset] = v;\n    this.offsetBytes += BYTES_F32;\n  }\n\n  writeU32(v: number) {\n    const offset = (this.byteOffset + this.offsetBytes) / BYTES_U32;\n    this.asU32[offset] = Math.floor(v);\n    this.offsetBytes += BYTES_U32;\n  }\n\n  upload(device: GPUDevice, gpuBuffer: GPUBuffer, gpuOffset: number) {\n    device.queue.writeBuffer(\n      gpuBuffer,\n      gpuOffset,\n      this.buffer,\n      this.byteOffset,\n      this.byteSize\n    );\n  }\n}\n", "import { BYTES_U32, CONFIG } from '../../../constants.ts';\nimport { STATS } from '../../../stats.ts';\nimport { Dimensions, divideCeil } from '../../../utils/index.ts';\nimport { formatBytes } from '../../../utils/string.ts';\nimport { StorageAccess, u32_type } from '../../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nconst storeTileDepth = /* wgsl */ `\n\nfn _storeTileHead(\n  viewportSize: vec2u,\n  tileXY: vec2u, depthBin: u32,\n  depthMin: f32, depthMax: f32,\n  nextPtr: u32\n) -> u32 {\n  let tileIdx: u32 = getHairTileIdx(viewportSize, tileXY, depthBin);\n  \n  // store depth\n  // TODO [IGNORE] low precision. Convert this into 0-1 inside the bounding sphere and then quantisize\n  let depthMax_U32 = u32(depthMax * f32(MAX_U32));\n  // WebGPU clears to 0. So atomicMin() is pointless. Use atomicMax() with inverted values instead\n  let depthMin_U32 = u32((1.0 - depthMin) * f32(MAX_U32));\n  atomicMax(&_hairTilesResult[tileIdx].maxDepth, depthMax_U32);\n  atomicMax(&_hairTilesResult[tileIdx].minDepth, depthMin_U32);\n\n  // store pointer to 1st segment.\n  // 0 is the value we cleared the buffer to. We always write +1, so previous value '0'\n  // means this ptr was never modified. It signifies the end of the list.\n  // But '0' is also a valid pointer into a linked list segments buffer.\n  // That's why we add 1. To detect this case and turn it into $INVALID_TILE_SEGMENT_PTR.\n  // This $INVALID_TILE_SEGMENT_PTR will be then written to the linked list segments buffer.\n  let lastHeadPtr = atomicExchange(\n    &_hairTilesResult[tileIdx].tileSegmentPtr,\n    nextPtr + 1u\n  );\n\n  return _translateHeadPointer(lastHeadPtr);\n}\n`;\n\nconst getTileDepth = /* wgsl */ `\n\nfn _getTileDepth(viewportSize: vec2u, tileXY: vec2u, depthBin: u32) -> vec2f {\n  let tileIdx: u32 = getHairTileIdx(viewportSize, tileXY, depthBin);\n  let tile = _hairTilesResult[tileIdx];\n  return vec2f(\n    f32(MAX_U32 - tile.minDepth) / f32(MAX_U32),\n    f32(tile.maxDepth) / f32(MAX_U32)\n  );\n}\n\nfn _getTileSegmentPtr(viewportSize: vec2u, tileXY: vec2u, depthBin: u32) -> u32 {\n  let tileIdx: u32 = getHairTileIdx(viewportSize, tileXY, depthBin);\n  let myPtr = _hairTilesResult[tileIdx].tileSegmentPtr;\n  return _translateHeadPointer(myPtr);\n}\n\n`;\n\n/**\n * For each tile contains:\n * - min and max depth\n * - pointer into the tile segments buffer\n */\nexport const BUFFER_HAIR_TILES_RESULT = (\n  bindingIdx: number,\n  access: StorageAccess\n) => /* wgsl */ `\n\nconst MAX_U32: u32 = 0xffffffffu;\nconst INVALID_TILE_SEGMENT_PTR: u32 = 0xffffffffu;\n\nstruct HairTileResult {\n  minDepth: ${u32_type(access)},\n  maxDepth: ${u32_type(access)},\n  tileSegmentPtr: ${u32_type(access)},\n  padding0: u32\n}\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairTilesResult: array<HairTileResult>;\n\n${access == 'read_write' ? storeTileDepth : getTileDepth}\n\nfn _translateHeadPointer(segmentPtr: u32) -> u32 {\n  // PS. there is no ternary in WGSL. There is select(). It was designed by someone THAT HAS NEVER WRITTEN A LINE OF CODE IN THEIR LIFE. I.N.C.O.M.P.E.T.E.N.C.E.\n  if (segmentPtr == 0u) { return INVALID_TILE_SEGMENT_PTR; }\n  return segmentPtr - 1u;\n}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport const getTileCount = (viewportSize: Dimensions): Dimensions => {\n  const { tileSize } = CONFIG.hairRender;\n  return {\n    width: divideCeil(viewportSize.width, tileSize),\n    height: divideCeil(viewportSize.height, tileSize),\n  };\n};\n\nexport function createHairTilesResultBuffer(\n  device: GPUDevice,\n  viewportSize: Dimensions\n): GPUBuffer {\n  const TILE_DEPTH_BINS_COUNT = CONFIG.hairRender.tileDepthBins;\n  const tileCount = getTileCount(viewportSize);\n  console.log(`Creating hair tiles buffer: ${tileCount.width}x${tileCount.height}x${TILE_DEPTH_BINS_COUNT} tiles`); // prettier-ignore\n  STATS.update(\n    'Tiles',\n    `${tileCount.width} x ${tileCount.height} x ${TILE_DEPTH_BINS_COUNT}`\n  );\n\n  const entries = tileCount.width * tileCount.height * TILE_DEPTH_BINS_COUNT;\n  const bytesPerEntry = 4 * BYTES_U32;\n  const size = entries * bytesPerEntry;\n  STATS.update('Tiles heads', formatBytes(size));\n\n  const extraUsage = CONFIG.isTest ? GPUBufferUsage.COPY_SRC : 0; // for stats, debug etc.\n  return device.createBuffer({\n    label: `hair-tiles-result`,\n    size,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | extraUsage,\n  });\n}\n", "import { BYTES_U32, CONFIG } from '../../../constants.ts';\nimport {\n  StorageAccess,\n  WEBGPU_MINIMAL_BUFFER_SIZE,\n  u32_type,\n} from '../../../utils/webgpu.ts';\nimport { getTileCount } from './hairTilesResultBuffer.ts';\nimport { Dimensions } from '../../../utils/index.ts';\nimport { STATS } from '../../../stats.ts';\nimport { formatBytes } from '../../../utils/string.ts';\n\n/*\nhttps://webgpu.github.io/webgpu-samples/?sample=a-buffer#translucent.wgsl\n*/\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nconst storeTileSegment = /* wgsl */ `\n\nfn _storeTileSegment(\n  nextPtr: u32, prevPtr: u32,\n  strandIdx: u32, segmentIdx: u32\n) {\n  let encodedSegment = (segmentIdx << 24) | strandIdx;\n  _hairTileSegments.data[nextPtr].strandAndSegmentIdxs = encodedSegment;\n  _hairTileSegments.data[nextPtr].next = prevPtr;\n}\n`;\n\nconst getTileSegment = /* wgsl */ `\n\nfn _getTileSegment(\n  maxDrawnSegments: u32,\n  tileSegmentPtr: u32,\n  /** strandIdx, segmentIdx, nextPtr */\n  result: ptr<function, vec3u>\n) -> bool {\n  if (tileSegmentPtr >= maxDrawnSegments || tileSegmentPtr == INVALID_TILE_SEGMENT_PTR) {\n    return false;\n  }\n\n  let data = _hairTileSegments.data[tileSegmentPtr];\n  (*result).x = data.strandAndSegmentIdxs & 0x00ffffff;\n  (*result).y = data.strandAndSegmentIdxs >> 24;\n  (*result).z = data.next;\n  return true;\n}\n`;\n\n/**\n * Per-tile linked list of packed (strandId, segmentId).\n */\nexport const BUFFER_HAIR_TILE_SEGMENTS = (\n  bindingIdx: number,\n  access: StorageAccess\n) => /* wgsl */ `\n\nstruct LinkedListElement {\n  strandAndSegmentIdxs: u32,\n  next: u32\n};\n\nstruct DrawnHairSegments {\n  drawnSegmentsCount: ${u32_type(access)},\n  data: array<LinkedListElement>\n};\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairTileSegments: DrawnHairSegments;\n\n\n${access == 'read_write' ? storeTileSegment : getTileSegment}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function getLengthOfHairTileSegmentsBuffer(viewportSize: Dimensions) {\n  const tileCount = getTileCount(viewportSize);\n  const cnt = Math.ceil(\n    tileCount.width * tileCount.height * CONFIG.hairRender.avgSegmentsPerTile\n  );\n  return 1 + cnt;\n}\n\nexport function createHairTileSegmentsBuffer(\n  device: GPUDevice,\n  viewportSize: Dimensions\n): GPUBuffer {\n  const entries = getLengthOfHairTileSegmentsBuffer(viewportSize);\n  const bytesPerEntry = 2 * BYTES_U32;\n  const size = Math.max(entries * bytesPerEntry, WEBGPU_MINIMAL_BUFFER_SIZE);\n  STATS.update('Tiles segments', formatBytes(size));\n\n  const extraUsage = CONFIG.isTest ? GPUBufferUsage.COPY_SRC : 0; // for stats, debug etc.\n  return device.createBuffer({\n    label: `hair-segments-per-tile`,\n    size,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | extraUsage,\n  });\n}\n", "import { Mat4, mat4, vec4, Vec4, Vec3 } from 'wgpu-matrix';\nimport { CameraProjection } from '../constants.ts';\nimport { Dimensions, dgr2rad } from './index.ts';\n\nexport function createCameraProjectionMat(\n  camera: CameraProjection,\n  viewportSize: Dimensions\n): Mat4 {\n  const aspectRatio = viewportSize.width / viewportSize.height;\n\n  return mat4.perspective(\n    dgr2rad(camera.fovDgr),\n    aspectRatio,\n    camera.near,\n    camera.far\n  );\n}\n\nexport function getViewProjectionMatrix(\n  viewMat: Mat4,\n  projMat: Mat4,\n  result?: Mat4\n): Mat4 {\n  return mat4.multiply(projMat, viewMat, result);\n}\n\nexport function getModelViewProjectionMatrix(\n  modelMat: Mat4,\n  viewMat: Mat4,\n  projMat: Mat4,\n  result?: Mat4\n): Mat4 {\n  result = mat4.multiply(viewMat, modelMat, result);\n  result = mat4.multiply(projMat, result, result);\n  return result;\n}\n\nexport function projectPoint(mvpMatrix: Mat4, p: Vec4 | Vec3, result?: Vec4) {\n  let v: Vec4;\n  if (p.length === 4) {\n    if (p[3] !== 1) {\n      throw new Error(`Tried to project a point, but provided Vec4 has .w !== 1`); // prettier-ignore\n    }\n    v = p;\n  } else {\n    v = vec4.create(p[0], p[1], p[2], 1);\n  }\n  return vec4.transformMat4(v, mvpMatrix, result);\n}\n\nexport function projectPointWithPerspDiv(\n  mvpMatrix: Mat4,\n  p: Vec4 | Vec3,\n  result?: Vec4\n) {\n  const result2 = projectPoint(mvpMatrix, p, result);\n  vec4.divScalar(result2, result2[3], result2);\n  return result2;\n}\n", "import { Mat4, mat4, vec3, vec4 } from 'wgpu-matrix';\nimport { AXIS_Y, CONFIG } from '../../../constants.ts';\nimport { sphericalToCartesian } from '../../../utils/index.ts';\nimport { Scene } from '../../../scene/scene.ts';\nimport { projectPoint } from '../../../utils/matrices.ts';\nimport { BoundingSphere } from '../../../utils/bounds.ts';\n\nconst TMP_PROJ = mat4.create();\nconst TMP_VIEW = mat4.create();\nconst TMP_MODEL_VIEW = mat4.create();\nconst TMP_VEC3 = vec3.create();\nconst TMP_VEC4 = vec4.create();\n\nexport function getShadowSourceWorldPosition() {\n  const src = CONFIG.shadows.source;\n  const pos = sphericalToCartesian(src.posPhi, src.posTheta, 'dgr', TMP_VEC3);\n  vec3.scale(pos, src.distance, pos);\n  return pos;\n}\n\nexport function getShadowSourceViewMatrix(modelMatrix: Mat4) {\n  const pos = getShadowSourceWorldPosition();\n  const src = CONFIG.shadows.source;\n  // transform by model matrix so we can handle when object moves\n  const target = projectPoint(modelMatrix, src.target, TMP_VEC4);\n  return mat4.lookAt(pos, target, AXIS_Y, TMP_VIEW);\n}\n\nconst SAFETY_MARGIN = 1.05;\nconst BIG_NUMBER = 9999999;\n\n/** this is for directional light, all rays are parallel */\nexport function getShadowSourceProjectionMatrix(\n  modelMatrix: Mat4,\n  viewMatrix: Mat4,\n  scene: Scene\n) {\n  const mvMat = mat4.multiply(viewMatrix, modelMatrix, TMP_MODEL_VIEW);\n\n  let left = BIG_NUMBER;\n  let right = -BIG_NUMBER;\n  let bottom = BIG_NUMBER;\n  let top = -BIG_NUMBER;\n  const near = 0.1; // I won't bother with view space calcs..\n  const far = 20;\n\n  const addBoundSphere = (s: BoundingSphere) => {\n    const spOBJ = vec4.set(\n      s.center[0],\n      s.center[1],\n      s.center[2],\n      1.0,\n      TMP_VEC4\n    );\n    const sphVP = projectPoint(mvMat, spOBJ, TMP_VEC4);\n    left = Math.min(left, sphVP[0] - s.radius);\n    right = Math.max(right, sphVP[0] + s.radius);\n    bottom = Math.min(bottom, sphVP[1] - s.radius);\n    top = Math.max(top, sphVP[1] + s.radius);\n  };\n\n  addBoundSphere(scene.hairObject.bounds.sphere);\n\n  for (const o of scene.objects) {\n    if (!o.isColliderPreview) {\n      addBoundSphere(o.bounds.sphere);\n    }\n  }\n\n  return mat4.ortho(\n    left * SAFETY_MARGIN,\n    right * SAFETY_MARGIN,\n    bottom * SAFETY_MARGIN,\n    top * SAFETY_MARGIN,\n    near,\n    far,\n    TMP_PROJ\n  );\n}\n", "import { Dimensions } from '../../../utils/index.ts';\n\nconst MAX_PREVIEW_SIZE = 500;\n\nexport function getShadowMapPreviewSize(viewportSize: Dimensions) {\n  return Math.floor(\n    Math.min(MAX_PREVIEW_SIZE, viewportSize.width / 3, viewportSize.height / 3)\n  );\n}\n", "import { BYTES_VEC4, CONFIG } from '../../constants.ts';\nimport { TypedArrayView } from '../../utils/typedArrayView.ts';\nimport { BoundingBox, BoundingBoxPoint } from '../../utils/bounds.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\nimport { vec3 } from 'wgpu-matrix';\n\nexport type SdfPoint3D = BoundingBoxPoint;\n\nexport class SDFCollider {\n  public static SDF_DATA_SNIPPET = /* wgsl */ `\n    struct SDFCollider {\n      boundsMin: vec4f,\n      boundsMax: vec4f,\n    };\n\n    fn getSdfDebugDepthSlice() -> f32 {\n      var s = _uniforms.sdf.boundsMin.w;\n      if (s > 1.0) { return s - 2.0; }\n      return s;\n    }\n    fn isSdfDebugSemiTransparent() -> bool { return _uniforms.sdf.boundsMin.w > 1.0; }\n    fn getSDF_Offset() -> f32 { return _uniforms.sdf.boundsMax.w; }\n  `;\n  public static BUFFER_SIZE = 2 * BYTES_VEC4;\n\n  public static TEXTURE_SDF = (\n    bindingIdx: number,\n    samplerBindingIdx: number\n  ) => /* wgsl */ `\n    @group(0) @binding(${bindingIdx})\n    var _sdfTexture: texture_3d<f32>;\n\n    @group(0) @binding(${samplerBindingIdx}) \n    var _sdfSampler: sampler;\n\n    fn sampleSDFCollider(sdfBoundsMin: vec3f, sdfBoundsMax: vec3f, p: vec3f) -> f32 {\n      // TBH bounds can be as bound sphere if mesh is cube-ish in shape\n      var t: vec3f = saturate(\n        (p - sdfBoundsMin) / (sdfBoundsMax - sdfBoundsMin)\n      );\n      // t.y = 1.0 - t.y; // WebGPU reverted Y-axis\n      // t.z = 1.0 - t.z; // WebGPU reverted Z-axis (I guess?)\n      return textureSampleLevel(_sdfTexture, _sdfSampler, t, 0.0).x;\n    }\n  `;\n\n  constructor(\n    public readonly name: string,\n    public readonly bounds: BoundingBox,\n    public readonly dims: number,\n    private readonly texture: GPUTexture,\n    private readonly textureView: GPUTextureView,\n    private readonly sampler: GPUSampler\n  ) {\n    if (!CONFIG.isTest) {\n      assertIsGPUTextureView(textureView);\n    }\n\n    const [boundsMin, boundsMax] = bounds;\n    const size = vec3.subtract(boundsMax, boundsMin);\n    const cellSize = vec3.scale(size, 1 / (dims - 1));\n    console.log(`SDF collider '${name}' (dims=${dims}, cellSize=${cellSize}), bounds:`, bounds); // prettier-ignore\n  }\n\n  bindTexture = (bindingIdx: number): GPUBindGroupEntry => ({\n    binding: bindingIdx,\n    resource: this.textureView,\n  });\n\n  bindSampler = (bindingIdx: number): GPUBindGroupEntry => ({\n    binding: bindingIdx,\n    resource: this.sampler,\n  });\n\n  writeToDataView(dataView: TypedArrayView) {\n    const c = CONFIG.hairSimulation.sdf;\n    const [boundsMin, boundsMax] = this.bounds;\n\n    dataView.writeF32(boundsMin[0]);\n    dataView.writeF32(boundsMin[1]);\n    dataView.writeF32(boundsMin[2]);\n    const mod = c.debugSemitransparent ? 2 : 0;\n    dataView.writeF32(c.debugSlice + mod);\n\n    dataView.writeF32(boundsMax[0]);\n    dataView.writeF32(boundsMax[1]);\n    dataView.writeF32(boundsMax[2]);\n    dataView.writeF32(c.distanceOffset);\n  }\n}\n", "import { vec3, Vec3 } from 'wgpu-matrix';\nimport { CO_PER_VERTEX, VERTS_IN_TRIANGLE } from '../constants.ts';\n\nexport interface Bounds3d {\n  sphere: BoundingSphere;\n  box: BoundingBox;\n}\n\nexport function calculateBounds(\n  vertices: Float32Array,\n  indices?: Uint32Array\n): Bounds3d {\n  const box = indices\n    ? calcBoundingBoxIndex(vertices, indices)\n    : calcBoundingBox(vertices);\n  return { box, sphere: calcBoundingSphere(box) };\n}\n\nexport type BoundingBoxPoint = [number, number, number];\nexport type BoundingBox = [BoundingBoxPoint, BoundingBoxPoint];\n\ntype VertexCb = (v: [number, number, number]) => void;\n\nfunction yieldVertices(\n  vertices: Float32Array,\n  stride = CO_PER_VERTEX,\n  cb: VertexCb\n) {\n  const vertCount = vertices.length / stride;\n  const v: [number, number, number] = [0, 0, 0];\n\n  for (let i = 0; i < vertCount; i++) {\n    const offset = i * stride;\n    v[0] = vertices[offset];\n    v[1] = vertices[offset + 1];\n    v[2] = vertices[offset + 2];\n    cb(v);\n  }\n}\n\nfunction yieldVerticesIndex(\n  vertices: Float32Array,\n  indices: Uint32Array,\n  cb: VertexCb\n) {\n  const v: [number, number, number] = [0, 0, 0];\n\n  for (let i = 0; i < indices.length; i++) {\n    const offset = indices[i] * VERTS_IN_TRIANGLE;\n    v[0] = vertices[offset];\n    v[1] = vertices[offset + 1];\n    v[2] = vertices[offset + 2];\n    cb(v);\n  }\n}\n\nexport function boundsCalculator(): [BoundingBox, VertexCb] {\n  const maxCo: BoundingBoxPoint = [undefined!, undefined!, undefined!];\n  const minCo: BoundingBoxPoint = [undefined!, undefined!, undefined!];\n  const cb: VertexCb = (v) => {\n    for (let co = 0; co < 3; co++) {\n      maxCo[co] = maxCo[co] !== undefined ? Math.max(maxCo[co], v[co]) : v[co];\n      minCo[co] = minCo[co] !== undefined ? Math.min(minCo[co], v[co]) : v[co];\n    }\n  };\n  return [[minCo, maxCo], cb];\n}\n\nexport function calcBoundingBox(\n  vertices: Float32Array,\n  stride = CO_PER_VERTEX\n): BoundingBox {\n  const [results, addVert] = boundsCalculator();\n  yieldVertices(vertices, stride, addVert);\n  return results;\n}\n\nexport function calcBoundingBoxIndex(\n  vertices: Float32Array,\n  indices: Uint32Array\n): BoundingBox {\n  const [results, addVert] = boundsCalculator();\n  yieldVerticesIndex(vertices, indices, addVert);\n  return results;\n}\n\nexport type BoundingSphere = { center: Vec3; radius: number };\n\nexport function isSameBoundingSphere(\n  a: BoundingSphere | undefined,\n  b: BoundingSphere | undefined\n) {\n  return (\n    a?.center[0] === b?.center[0] &&\n    a?.center[1] === b?.center[1] &&\n    a?.center[2] === b?.center[2] &&\n    a?.radius === b?.radius\n  );\n}\n\nexport function calcBoundingSphere([\n  minCo,\n  maxCo,\n]: BoundingBox): BoundingSphere {\n  const center = vec3.midpoint(minCo, maxCo);\n  const radius = vec3.distance(center, maxCo);\n  return { center, radius };\n}\n\nexport function printBoundingBox(\n  vertices: Float32Array,\n  stride = CO_PER_VERTEX\n) {\n  const [minCo, maxCo] = calcBoundingBox(vertices, stride);\n  const p = (a: number[]) => '[' + a.map((x) => x.toFixed(2)).join(',') + ']';\n  console.log(`Bounding box min:`, p(minCo));\n  console.log(`Bounding box max:`, p(maxCo));\n}\n\nexport function scaleBoundingBox(bb: BoundingBox, scale: number): BoundingBox {\n  if (scale <= 0) {\n    throw new Error(`Invalid scale=${scale}`);\n  }\n  const [boundsMin, boundsMax] = bb;\n  const center = vec3.midpoint(boundsMin, boundsMax);\n  const v = vec3.subtract(boundsMax, center); // center -> bounds max\n  const scaledV = vec3.scale(v, scale);\n  return [\n    vec3.subtract(center, scaledV), //\n    vec3.add(center, scaledV),\n    // deno-lint-ignore no-explicit-any\n  ] as any; // Vec3 vs [number, number, number]\n}\n", "import { CONFIG } from '../../../constants.ts';\n\nexport const GRID_FLOAT_TO_U32_MUL = 1000000.0;\n\nexport const GRID_UTILS = /* wgsl */ `\n\nconst GRID_DIMS: u32 = ${CONFIG.hairSimulation.physicsForcesGrid.dims}u;\n\n// There are no float atomics in WGSL. Convert to i32\nconst GRID_FLOAT_TO_U32_MUL: f32 = ${GRID_FLOAT_TO_U32_MUL};\nfn gridEncodeValue(v: f32) -> i32 { return i32(v * GRID_FLOAT_TO_U32_MUL); }\nfn gridDecodeValue(v: i32) -> f32 { return f32(v) / GRID_FLOAT_TO_U32_MUL; }\n\n\nfn _getGridIdx(p: vec3u) -> u32 {\n  return (\n    clamp(p.z, 0u, GRID_DIMS - 1u) * GRID_DIMS * GRID_DIMS +\n    clamp(p.y, 0u, GRID_DIMS - 1u) * GRID_DIMS +\n    clamp(p.x, 0u, GRID_DIMS - 1u)\n  );\n}\n\nfn getGridCellSize(gridBoundsMin: vec3f, gridBoundsMax: vec3f) -> vec3f {\n  let size = gridBoundsMax - gridBoundsMin;\n  return size / f32(GRID_DIMS - 1u);\n}\n\n/** Take (0,1,4) grid point and turn into vec3f coords */\nfn getGridPointPositionWS(\n  gridBoundsMin: vec3f,\n  gridBoundsMax: vec3f,\n  p: vec3u\n) -> vec3f {\n  let cellSize = getGridCellSize(gridBoundsMin, gridBoundsMax);\n  return gridBoundsMin + cellSize * vec3f(p);\n}\n\nfn getClosestGridPoint(\n  gridBoundsMin: vec3f,\n  gridBoundsMax: vec3f,\n  p: vec3f\n) -> vec3u {\n  var t: vec3f = saturate(\n    (p - gridBoundsMin) / (gridBoundsMax - gridBoundsMin)\n  );\n  var r: GridCoordinates;\n  return vec3u(round(t * f32(GRID_DIMS - 1u)));\n}\n\nstruct GridCoordinates {\n  // XYZ of the 'lower' cell-cube corner. E.g [0, 1, 2]\n  cellMin: vec3u,\n   // XYZ of the 'upper' cell-cube corner. E.g [1, 2, 3]\n   // Effectively $cellMin + (1,1,1)$\n  cellMax: vec3u,\n  // provided point $p in grid coordinates. E.g. [1.1, 2.4, 3.4]\n  pInGrid: vec3f\n}\n\n\nfn _getGridCell(\n  gridBoundsMin: vec3f,\n  gridBoundsMax: vec3f,\n  p: vec3f,\n) -> GridCoordinates {\n  var t: vec3f = saturate(\n    (p - gridBoundsMin) / (gridBoundsMax - gridBoundsMin)\n  );\n  var r: GridCoordinates;\n  r.pInGrid = t * f32(GRID_DIMS - 1u);\n  r.cellMin = vec3u(floor(t * f32(GRID_DIMS - 1u)));\n  r.cellMax = vec3u( ceil(t * f32(GRID_DIMS - 1u)));\n  return r;\n}\n\nfn _getGridCellWeights(\n  cellCornerCo: vec3u,\n  originalPoint: vec3f,\n) -> vec3f {\n  let w_x = clamp(1.0 - f32(abs(originalPoint.x - f32(cellCornerCo.x))), 0.0, 1.0);\n  let w_y = clamp(1.0 - f32(abs(originalPoint.y - f32(cellCornerCo.y))), 0.0, 1.0);\n  let w_z = clamp(1.0 - f32(abs(originalPoint.z - f32(cellCornerCo.z))), 0.0, 1.0);\n  return vec3f(w_x, w_y, w_z);\n}\n\n/** \n * Compress '_getGridCellWeights()' into a single value. Used when stored value is not a vector.\n * Not amazing, but..\n*/\nfn _getGridCellWeight(cellW: vec3f) -> f32 {\n  return length(cellW);\n}\n`;\n", "import { vec3 } from 'wgpu-matrix';\nimport { BYTES_VEC4, CONFIG, GridDebugValue } from '../../../constants.ts';\nimport { BoundingBox, scaleBoundingBox } from '../../../utils/bounds.ts';\nimport {\n  WEBGPU_MINIMAL_BUFFER_SIZE,\n  bindBuffer,\n  createGPU_StorageBuffer,\n} from '../../../utils/webgpu.ts';\nimport { TypedArrayView } from '../../../utils/typedArrayView.ts';\nimport { GRID_FLOAT_TO_U32_MUL } from './grids.wgsl.ts';\nimport { STATS } from '../../../stats.ts';\nimport { formatBytes } from '../../../utils/string.ts';\n\nexport class GridData {\n  public static GRID_DATA_SNIPPET = /* wgsl */ `\n\n  struct GridData {\n    boundsMin: vec4f,\n    boundsMax: vec3f,\n    debugDisplayValue: u32, // also encodes if abs the value\n  }\n  \n  fn getGridDebugDepthSlice() -> f32 {\n    let FLOAT_EPSILON: f32 = 1e-7;\n    return clamp(_uniforms.gridData.boundsMin.w, FLOAT_EPSILON, 1.0 - FLOAT_EPSILON);\n  }\n  `;\n  public static BUFFER_SIZE = 2 * BYTES_VEC4;\n\n  private readonly densityVelocityBuffer: GPUBuffer;\n  private readonly densityGradAndWindBuffer: GPUBuffer;\n  public readonly bounds: BoundingBox;\n\n  constructor(device: GPUDevice, bounds_: BoundingBox) {\n    this.bounds = scaleBoundingBox(\n      bounds_,\n      CONFIG.hairSimulation.physicsForcesGrid.scale\n    );\n    if (CONFIG.isTest) {\n      this.densityVelocityBuffer = undefined!;\n      this.densityGradAndWindBuffer = undefined!;\n      return;\n    }\n\n    const dims = CONFIG.hairSimulation.physicsForcesGrid.dims;\n    const [boundsMin, boundsMax] = this.bounds;\n    const size = vec3.subtract(boundsMax, boundsMin);\n    const cellSize = vec3.scale(size, 1 / (dims - 1));\n    const cellCount = dims * dims * dims;\n    console.log(`Physics grid (dims=${dims}x${dims}x${dims}, ${cellCount} points, cellSize=${cellSize}), bounds:`, this.bounds); // prettier-ignore\n\n    this.densityVelocityBuffer = createPhysicsForcesBuffer(\n      device,\n      'grid-density-velocity',\n      dims\n    );\n    this.densityGradAndWindBuffer = createPhysicsForcesBuffer(\n      device,\n      'grid-density-grad-and-wind',\n      dims\n    );\n  }\n\n  clearDensityVelocityBuffer(cmdBuf: GPUCommandEncoder) {\n    cmdBuf.clearBuffer(\n      this.densityVelocityBuffer,\n      0,\n      this.densityVelocityBuffer.size\n    );\n  }\n\n  clearDensityGradAndWindBuffer(cmdBuf: GPUCommandEncoder) {\n    cmdBuf.clearBuffer(\n      this.densityGradAndWindBuffer,\n      0,\n      this.densityGradAndWindBuffer.size\n    );\n  }\n\n  bindDensityVelocityBuffer = (bindingIdx: number) =>\n    bindBuffer(bindingIdx, this.densityVelocityBuffer);\n\n  bindDensityGradAndWindBuffer = (bindingIdx: number) =>\n    bindBuffer(bindingIdx, this.densityGradAndWindBuffer);\n\n  getDebuggedGridBuffer() {\n    const v = CONFIG.hairSimulation.physicsForcesGrid.debugValue;\n    return v == GridDebugValue.WIND || v == GridDebugValue.DENSITY_GRADIENT\n      ? this.densityGradAndWindBuffer\n      : this.densityVelocityBuffer;\n  }\n\n  writeToDataView(dataView: TypedArrayView) {\n    const c = CONFIG.hairSimulation.physicsForcesGrid;\n    const [boundsMin, boundsMax] = this.bounds;\n\n    dataView.writeF32(boundsMin[0]);\n    dataView.writeF32(boundsMin[1]);\n    dataView.writeF32(boundsMin[2]);\n    dataView.writeF32(c.debugSlice);\n\n    dataView.writeF32(boundsMax[0]);\n    dataView.writeF32(boundsMax[1]);\n    dataView.writeF32(boundsMax[2]);\n    dataView.writeU32(c.debugValue + (c.debugAbsValue ? 16 : 0));\n  }\n}\n\nfunction createPhysicsForcesBuffer(\n  device: GPUDevice,\n  name: string,\n  dims: number\n): GPUBuffer {\n  const cellCount = dims * dims * dims;\n  const intsPerCell = 4;\n  const entriesCnt = Math.max(\n    WEBGPU_MINIMAL_BUFFER_SIZE,\n    cellCount * intsPerCell\n  );\n  // console.log(`Create density velocity grid. Dims=${dims}x${dims}x${dims} (${cellCount} points)`); // prettier-ignore\n\n  // mock data.\n  // Use with CONFIG.hairSimulation.densityVelocityGrid.enableUpdates = false to debug visualization\n  const data = new Int32Array(entriesCnt);\n  const f32_2_i32 = (x: number) => Math.floor(x * GRID_FLOAT_TO_U32_MUL);\n  // const f32_2_i32 = (x: number) => Math.floor(x);\n\n  for (let z = 0; z < dims; z++) {\n    for (let y = 0; y < dims; y++) {\n      for (let x = 0; x < dims; x++) {\n        const idx =\n          z * dims * dims + //\n          y * dims +\n          x;\n        // velocity\n        // data[4 * idx + 0] = f32_2_i32(z >= 2 ? -1 : 1);\n        // data[4 * idx + 1] = f32_2_i32(z >= 2 ? -1 : 1);\n        // data[4 * idx + 2] = f32_2_i32(z >= 2 ? -1 : 1);\n        // density\n        const c = x == 1 || x == 5; // true\n        data[4 * idx + 3] = f32_2_i32(c ? 1 : 0);\n      }\n    }\n  }\n  // console.log(data);\n\n  const result = createGPU_StorageBuffer(device, name, data);\n  STATS.update('Physics grid', '2 * ' + formatBytes(result.size));\n  return result;\n}\n", "import { Mat4, mat4, vec3 } from 'wgpu-matrix';\nimport {\n  BYTES_F32,\n  BYTES_MAT4,\n  BYTES_UVEC4,\n  BYTES_VEC4,\n  CONFIG,\n  DISPLAY_MODE,\n  LightCfg,\n} from '../constants.ts';\nimport { PassCtx } from './passCtx.ts';\nimport { TypedArrayView } from '../utils/typedArrayView.ts';\nimport { sphericalToCartesian } from '../utils/index.ts';\nimport { getLengthOfHairTileSegmentsBuffer } from './swHair/shared/hairTileSegmentsBuffer.ts';\nimport { getModelViewProjectionMatrix } from '../utils/matrices.ts';\nimport {\n  getShadowSourceProjectionMatrix,\n  getShadowSourceViewMatrix,\n  getShadowSourceWorldPosition,\n} from './shadowMapPass/shared/getMVP_ShadowSourceMatrix.ts';\nimport { getShadowMapPreviewSize } from './shadowMapPass/shared/getShadowMapPreviewSize.ts';\nimport { Scene } from '../scene/scene.ts';\nimport { SDFCollider } from '../scene/sdfCollider/sdfCollider.ts';\nimport { GridData } from './simulation/grids/gridData.ts';\n\nconst TMP_MAT4 = mat4.create(); // prealloc\nconst TMP_MAT4_2 = mat4.create(); // prealloc\n\nexport class RenderUniformsBuffer {\n  public static SHADER_SNIPPET = (bindingIdx: number) => /* wgsl */ `\n    const b11 = 3u; // binary 0b11\n    const b111 = 7u; // binary 0b111\n    const b1111 = 15u; // binary 0b1111\n    const b11111 = 31u; // binary 0b11111\n    const b111111 = 63u; // binary 0b111111\n\n    const DISPLAY_MODE_FINAL = ${DISPLAY_MODE.FINAL}u;\n    const DISPLAY_MODE_TILES = ${DISPLAY_MODE.TILES}u;\n    const DISPLAY_MODE_HW_RENDER = ${DISPLAY_MODE.HW_RENDER}u;\n    const DISPLAY_MODE_USED_SLICES = ${DISPLAY_MODE.USED_SLICES}u;\n    const DISPLAY_MODE_DEPTH = ${DISPLAY_MODE.DEPTH}u;\n    const DISPLAY_MODE_NORMALS = ${DISPLAY_MODE.NORMALS}u;\n    const DISPLAY_MODE_AO = ${DISPLAY_MODE.AO}u;\n\n    struct Light {\n      position: vec4f, // [x, y, z, 0.0]\n      colorAndEnergy: vec4f, // [r, g, b, energy]\n    }\n\n    // https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/webfx/passes/ForwardPass.ts#L65\n    struct Shadows {\n      sourceModelViewMat: mat4x4<f32>,\n      sourceProjMatrix: mat4x4<f32>,\n      sourceMVP_Matrix: mat4x4<f32>,\n      sourcePosition: vec4f, // xyz, but .w is fiber width\n      usePCSS: u32,\n      PCF_Radius: u32,\n      bias: f32,\n      strength: f32,\n    }\n    fn getShadowFiberRadius() -> f32 { return _uniforms.shadows.sourcePosition.w; }\n\n    struct AmbientOcclusion {\n      radius: f32, // in world space\n      directionOffset: f32,\n      falloffStart2: f32,\n      falloffEnd2: f32,\n      // vec4f end, start vec4u\n      numDirections: u32,\n      numSteps: u32,\n      strength: f32,\n      padding0: f32,\n    }\n\n    struct HairMaterialParams {\n      // 1 * vec4f\n      color0: vec3f,\n      specular: f32,\n      // 1 * vec4f\n      color1: vec3f,\n      shadows: f32,\n      // 4 * f32\n      weightTT: f32,\n      weightTRT: f32,\n      shift: f32,\n      roughness: f32,\n      // 4 * f32\n      colorRng: f32,\n      lumaRng: f32,\n      attenuation: f32,\n      padding1: f32,\n    }\n\n    struct Background {\n      color0: vec3f,\n      noiseScale: f32,\n      color1: vec3f,\n      gradientStrength: f32,\n    }\n\n    ${SDFCollider.SDF_DATA_SNIPPET}\n    ${GridData.GRID_DATA_SNIPPET}\n\n    struct Uniforms {\n      vpMatrix: mat4x4<f32>,\n      vpMatrixInv: mat4x4<f32>,\n      viewMatrix: mat4x4<f32>,\n      projMatrix: mat4x4<f32>,\n      projMatrixInv: mat4x4<f32>,\n      modelMatrix: mat4x4<f32>,\n      modelViewMat: mat4x4<f32>,\n      mvpMatrix: mat4x4<f32>,\n      collisionSphereModelMatrix: mat4x4<f32>,\n      viewport: vec4f,\n      cameraPosition: vec4f,\n      colorMgmt: vec4f,\n      lightAmbient: vec4f,\n      light0: Light,\n      light1: Light,\n      light2: Light,\n      shadows: Shadows,\n      ao: AmbientOcclusion,\n      hairMaterial: HairMaterialParams,\n      sdf: SDFCollider,\n      gridData: GridData,\n      // START: misc vec4f\n      fiberRadius: f32,\n      dbgShadowMapPreviewSize: f32,\n      maxDrawnHairSegments: u32,\n      displayMode: u32, // display mode + some of it's settings\n      // back to proper align\n      background: Background,\n      // collider sphere vec4f\n      collisionSpherePosition: vec3f,\n      gizmoActiveState: u32,\n    };\n    @group(0) @binding(${bindingIdx})\n    var<uniform> _uniforms: Uniforms;\n\n    fn getDisplayMode() -> u32 { return _uniforms.displayMode & 0xff; }\n    fn getDbgModeExtra() -> u32 { return (_uniforms.displayMode >> 8) & 0xffff; }\n    fn getDbgTileModeMaxSegments() -> u32 { return getDbgModeExtra(); }\n    fn getDbgSlicesModeMaxSlices() -> u32 { \n      return select(0u, getDbgModeExtra(), getDisplayMode() == DISPLAY_MODE_USED_SLICES);\n    }\n    fn getDbgFinalModeShowTiles() -> bool {\n      let flags = select(0u, getDbgModeExtra(), getDisplayMode() == DISPLAY_MODE_FINAL);\n      return (flags & 1u) > 0u;\n    }\n  `;\n\n  private static LIGHT_SIZE = 2 * BYTES_VEC4;\n  private static SHADOWS_SIZE =\n    BYTES_MAT4 + // sourceModelViewMat\n    BYTES_MAT4 + // sourceProjMatrix\n    BYTES_MAT4 + // mvpShadowSourceMatrix\n    BYTES_VEC4 + // shadowSourcePosition;\n    BYTES_VEC4; // flags + settings\n  private static AO_SIZE = BYTES_VEC4 + BYTES_UVEC4;\n  private static BACKGROUND_SIZE = 2 * BYTES_VEC4;\n\n  private static BUFFER_SIZE =\n    BYTES_MAT4 + // vpMatrix\n    BYTES_MAT4 + // vpMatrixInv\n    BYTES_MAT4 + // viewMatrix\n    BYTES_MAT4 + // projMatrix\n    BYTES_MAT4 + // projMatrixInv\n    BYTES_MAT4 + // modelMat\n    BYTES_MAT4 + // modelViewMat\n    BYTES_MAT4 + // mvpMat\n    BYTES_MAT4 + // collisionSphereModelMatrix\n    BYTES_VEC4 + // viewport\n    BYTES_VEC4 + // cameraPosition\n    BYTES_VEC4 + // color mgmt\n    BYTES_VEC4 + // lightAmbient\n    3 * RenderUniformsBuffer.LIGHT_SIZE + // lights\n    RenderUniformsBuffer.SHADOWS_SIZE + // ahadows\n    RenderUniformsBuffer.AO_SIZE + // ao\n    4 * BYTES_VEC4 + // hairMaterial\n    SDFCollider.BUFFER_SIZE + // sdf\n    GridData.BUFFER_SIZE + // grids\n    4 * BYTES_F32 + // fiberRadius, dbgShadowMapPreviewSize, maxDrawnHairSegments,\n    RenderUniformsBuffer.BACKGROUND_SIZE + // bg\n    BYTES_VEC4; // collider sphere vec4f\n\n  private readonly gpuBuffer: GPUBuffer;\n  private readonly data = new ArrayBuffer(RenderUniformsBuffer.BUFFER_SIZE);\n  private readonly dataView: TypedArrayView;\n\n  constructor(device: GPUDevice) {\n    this.gpuBuffer = device.createBuffer({\n      label: 'render-uniforms-buffer',\n      size: RenderUniformsBuffer.BUFFER_SIZE,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    this.dataView = new TypedArrayView(this.data);\n  }\n\n  createBindingDesc = (bindingIdx: number): GPUBindGroupEntry => ({\n    binding: bindingIdx,\n    resource: { buffer: this.gpuBuffer },\n  });\n\n  update(ctx: PassCtx) {\n    const {\n      device,\n      vpMatrix,\n      viewMatrix,\n      projMatrix,\n      viewport,\n      cameraPositionWorldSpace,\n      scene,\n    } = ctx;\n    const { modelMatrix } = ctx.scene;\n    const c = CONFIG;\n    const col = c.colors;\n    const camPos = cameraPositionWorldSpace;\n\n    this.dataView.resetCursor();\n    this.dataView.writeMat4(vpMatrix);\n    this.dataView.writeMat4(mat4.invert(vpMatrix, TMP_MAT4));\n    this.dataView.writeMat4(viewMatrix);\n    this.dataView.writeMat4(projMatrix);\n    this.dataView.writeMat4(mat4.invert(projMatrix, TMP_MAT4));\n    this.dataView.writeMat4(modelMatrix);\n    // model-view matrix\n    mat4.multiply(viewMatrix, modelMatrix, TMP_MAT4);\n    this.dataView.writeMat4(TMP_MAT4);\n    // model-view-projection matrix\n    getModelViewProjectionMatrix(modelMatrix, viewMatrix, projMatrix, TMP_MAT4);\n    this.dataView.writeMat4(TMP_MAT4);\n    // collisionSphereModelMatrix\n    const colSph = CONFIG.hairSimulation.collisionSphere;\n    const r = colSph[3] * 0.95; // make it a bit smaller, so it's easier to see\n    const traMat = mat4.translation(colSph, TMP_MAT4_2);\n    const colSphMat = mat4.scale(traMat, [r, r, r], TMP_MAT4);\n    this.dataView.writeMat4(colSphMat);\n\n    // viewport\n    this.dataView.writeF32(viewport.width);\n    this.dataView.writeF32(viewport.height);\n    this.dataView.writeF32(0.0);\n    this.dataView.writeF32(0.0);\n    // camera position\n    this.dataView.writeF32(camPos[0]);\n    this.dataView.writeF32(camPos[1]);\n    this.dataView.writeF32(camPos[2]);\n    this.dataView.writeF32(0.0);\n    // color mgmt\n    this.dataView.writeF32(col.gamma);\n    this.dataView.writeF32(col.exposure);\n    this.dataView.writeF32(col.ditherStrength);\n    this.dataView.writeF32(0.0);\n    // lights\n    this.dataView.writeF32(c.lightAmbient.color[0]);\n    this.dataView.writeF32(c.lightAmbient.color[1]);\n    this.dataView.writeF32(c.lightAmbient.color[2]);\n    this.dataView.writeF32(c.lightAmbient.energy);\n    this.writeLight(c.lights[0]);\n    this.writeLight(c.lights[1]);\n    this.writeLight(c.lights[2]);\n    // shadows\n    this.writeShadows(scene, modelMatrix);\n    // ao\n    this.writeAo();\n    // hair material\n    this.writeHairMaterial();\n    // sdf + grids\n    ctx.scene.sdfCollider.writeToDataView(this.dataView);\n    ctx.scene.physicsGrid.writeToDataView(this.dataView);\n    // misc\n    this.dataView.writeF32(c.hairRender.fiberRadius);\n    this.dataView.writeF32(getShadowMapPreviewSize(viewport));\n    this.dataView.writeU32(getLengthOfHairTileSegmentsBuffer(viewport));\n    this.dataView.writeU32(this.encodeDebugMode());\n    // bg\n    this.writeBackground();\n    // collider sphere vec4f\n    this.dataView.writeF32(colSph[0]); // collisionSpherePosition: vec3f,\n    this.dataView.writeF32(colSph[1]);\n    this.dataView.writeF32(colSph[2]);\n    this.dataView.writeU32(CONFIG.colliderGizmo.activeAxis); // gizmoActiveState: u32,\n\n    // final write\n    this.dataView.assertWrittenBytes(RenderUniformsBuffer.BUFFER_SIZE);\n    this.dataView.upload(device, this.gpuBuffer, 0);\n  }\n\n  private writeLight(l: LightCfg) {\n    // NOTE: Light positions are calculated with pivot (0, 0, 0).\n    //       But hair is at (0, 1.53, 0). So the light position adjustments\n    //       GUI might not be intuitive. We could make it object space, but..\n    //       I REALLY LIKE CURRENT LOOK AND I AM NOT WILLING TO RECONFIGURE THE SCENE AGAIN!\n    const pos = sphericalToCartesian(l.posPhi, l.posTheta, 'dgr', TMP_VEC3);\n    const dist = 2.0;\n    this.dataView.writeF32(pos[0] * dist);\n    this.dataView.writeF32(pos[1] * dist);\n    this.dataView.writeF32(pos[2] * dist);\n    this.dataView.writeF32(0.0);\n\n    this.dataView.writeF32(l.color[0]);\n    this.dataView.writeF32(l.color[1]);\n    this.dataView.writeF32(l.color[2]);\n    this.dataView.writeF32(l.energy);\n  }\n\n  private writeShadows(scene: Scene, modelMatrix: Mat4) {\n    const c = CONFIG.shadows;\n    const viewMat = getShadowSourceViewMatrix(modelMatrix);\n    const projMat = getShadowSourceProjectionMatrix(\n      modelMatrix,\n      viewMat,\n      scene\n    );\n\n    // source ModelView Mat\n    const mvMat = mat4.multiply(viewMat, modelMatrix, TMP_MAT4);\n    this.dataView.writeMat4(mvMat);\n    // source Proj Matrix\n    this.dataView.writeMat4(projMat);\n    // mvp matrix\n    const mvpMatrix = getModelViewProjectionMatrix(\n      modelMatrix,\n      viewMat,\n      projMat,\n      TMP_MAT4\n    );\n    this.dataView.writeMat4(mvpMatrix);\n    // shadow position\n    const shadowPos = getShadowSourceWorldPosition();\n    this.dataView.writeF32(shadowPos[0]);\n    this.dataView.writeF32(shadowPos[1]);\n    this.dataView.writeF32(shadowPos[2]);\n    const fiberRadius =\n      c.hairFiberWidthMultiplier * CONFIG.hairRender.fiberRadius;\n    this.dataView.writeF32(fiberRadius);\n    // settings\n    this.dataView.writeU32(c.usePCSS ? 1 : 0); // usePCSS: u32,\n    this.dataView.writeU32(c.PCF_Radius); // PCF_Radius: u32,\n    this.dataView.writeF32(c.bias); // bias: f32,\n    this.dataView.writeF32(c.strength); // strength: f32,\n  }\n\n  private writeAo() {\n    const c = CONFIG.ao;\n\n    this.dataView.writeF32(c.radius);\n    this.dataView.writeF32(c.directionOffset);\n    this.dataView.writeF32(c.falloffStart2);\n    this.dataView.writeF32(c.falloffEnd2);\n\n    this.dataView.writeU32(c.numDirections);\n    this.dataView.writeU32(c.numSteps);\n    const str = c.strength;\n    this.dataView.writeF32(str);\n    this.dataView.writeU32(0); // padding0: u32,\n  }\n\n  private writeHairMaterial() {\n    const m = CONFIG.hairRender.material;\n\n    this.dataView.writeF32(m.color0[0]);\n    this.dataView.writeF32(m.color0[1]);\n    this.dataView.writeF32(m.color0[2]);\n    this.dataView.writeF32(m.specular);\n\n    this.dataView.writeF32(m.color1[0]);\n    this.dataView.writeF32(m.color1[1]);\n    this.dataView.writeF32(m.color1[2]);\n    this.dataView.writeF32(m.shadows);\n\n    this.dataView.writeF32(m.weightTT);\n    this.dataView.writeF32(m.weightTRT);\n    this.dataView.writeF32(m.shift);\n    this.dataView.writeF32(m.roughness);\n\n    this.dataView.writeF32(m.colorRng);\n    this.dataView.writeF32(m.lumaRng);\n    this.dataView.writeF32(m.attenuation);\n    this.dataView.writeF32(0.0);\n  }\n\n  private writeBackground() {\n    const bg = CONFIG.background;\n    this.dataView.writeF32(bg.color0[0]);\n    this.dataView.writeF32(bg.color0[1]);\n    this.dataView.writeF32(bg.color0[2]);\n    this.dataView.writeF32(bg.noiseScale);\n\n    this.dataView.writeF32(bg.color1[0]);\n    this.dataView.writeF32(bg.color1[1]);\n    this.dataView.writeF32(bg.color1[2]);\n    this.dataView.writeF32(bg.gradientStrength);\n  }\n\n  private encodeDebugMode() {\n    const c = CONFIG;\n    const hr = CONFIG.hairRender;\n    let extraData = 0;\n\n    if (c.displayMode === DISPLAY_MODE.TILES) {\n      extraData = hr.dbgTileModeMaxSegments;\n    } else if (c.displayMode === DISPLAY_MODE.USED_SLICES) {\n      extraData = hr.dbgSlicesModeMaxSlices;\n    } else if (c.displayMode === DISPLAY_MODE.FINAL) {\n      extraData = hr.dbgShowTiles ? 1 : 0;\n    }\n\n    return c.displayMode | (extraData << 8);\n  }\n}\n\nconst TMP_VEC3 = vec3.create();\n", "import { Mat4, mat4, vec3 } from 'wgpu-matrix';\nimport Input from './sys_web/input.ts';\nimport { CONFIG, CameraPosition } from './constants.ts';\nimport { clamp } from './utils/index.ts';\nimport { STATS } from './stats.ts';\nimport { projectPoint } from './utils/matrices.ts';\n\nconst ANGLE_90_DRG_IN_RAD = Math.PI / 2;\nconst ANGLE_UP_DOWN = 0; // pitch\nconst ANGLE_LEFT_RIGHT = 1; // yaw\n\n/** https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/ecs/components/FpsController.ts */\nexport class Camera {\n  private readonly _viewMatrix = mat4.identity();\n  private readonly _tmpMatrix = mat4.identity(); // cache to prevent alloc\n  /** Polar coordinate angles  */\n  private readonly _angles: [number, number] = [0, 0];\n  /** Position world space */\n  private readonly _position: [number, number, number] = [0, 0, 0];\n\n  constructor(options: CameraPosition = CONFIG.camera.position) {\n    this.resetPosition(options);\n  }\n\n  get positionWorldSpace() {\n    return this._position;\n  }\n\n  resetPosition = (options: CameraPosition = CONFIG.camera.position) => {\n    if (options.position?.length === 3) {\n      this._position[0] = options.position[0];\n      this._position[1] = options.position[1];\n      this._position[2] = options.position[2];\n    }\n    if (options.rotation?.length === 2) {\n      this._angles[ANGLE_UP_DOWN] = options.rotation[1];\n      this._angles[ANGLE_LEFT_RIGHT] = options.rotation[0];\n    }\n  };\n\n  update(deltaTime: number, input: Input): void {\n    this.applyMovement(deltaTime, input);\n    this.applyRotation(deltaTime, input);\n    this.updateShownStats();\n  }\n\n  private applyMovement(deltaTime: number, input: Input) {\n    const sign = (positive: boolean, negative: boolean) =>\n      (positive ? 1 : 0) - (negative ? 1 : 0);\n\n    const cfg = CONFIG.camera;\n    const digital = input.directions;\n    const m =\n      deltaTime *\n      (digital.goFaster ? cfg.movementSpeedFaster : cfg.movementSpeed);\n    const moveDir: [number, number, number, number] = [0, 0, 0, 1];\n    moveDir[0] = m * sign(digital.right, digital.left);\n    moveDir[1] = m * sign(digital.up, digital.down);\n    moveDir[2] = m * sign(digital.backward, digital.forward);\n\n    const rotMatrixInv = mat4.transpose(this.getRotationMat(), this._tmpMatrix);\n    const moveDirLocal = projectPoint(rotMatrixInv, moveDir, moveDir);\n    vec3.add(this._position, moveDirLocal, this._position);\n  }\n\n  private applyRotation(deltaTime: number, input: Input) {\n    const cfg = CONFIG.camera;\n    const yaw = input.mouse.dragX * deltaTime * cfg.rotationSpeed;\n    const pitch = input.mouse.dragY * deltaTime * cfg.rotationSpeed;\n\n    this._angles[ANGLE_LEFT_RIGHT] += yaw;\n    this._angles[ANGLE_UP_DOWN] += pitch;\n    const safeAngle = ANGLE_90_DRG_IN_RAD * 0.95; // no extremes pls!\n    this._angles[ANGLE_UP_DOWN] = clamp(\n      this._angles[ANGLE_UP_DOWN],\n      -safeAngle,\n      safeAngle\n    );\n  }\n\n  private updateShownStats() {\n    const fmt = (x: number) => x.toFixed(1);\n    const p = this._position;\n    const r = this._angles;\n    STATS.update('Camera pos', `[${fmt(p[0])}, ${fmt(p[1])}, ${fmt(p[2])}]`);\n    STATS.update(\n      'Camera rot',\n      `[${fmt(r[ANGLE_LEFT_RIGHT])}, ${fmt(r[ANGLE_UP_DOWN])}]`\n    );\n  }\n\n  private getRotationMat(): Mat4 {\n    const angles = this._angles;\n    const result = mat4.identity(this._tmpMatrix);\n    mat4.rotateX(result, angles[ANGLE_UP_DOWN], result); // up-down\n    mat4.rotateY(result, angles[ANGLE_LEFT_RIGHT], result); // left-right\n    return result;\n  }\n\n  get viewMatrix(): Mat4 {\n    const rotMat = this.getRotationMat();\n    const pos = this._position;\n\n    // we have to reverse position, as moving camera X units\n    // moves scene -X units\n    return mat4.translate(\n      rotMat,\n      [-pos[0], -pos[1], -pos[2]],\n      this._viewMatrix\n    );\n  }\n}\n", "export const FULLSCREEN_TRIANGLE_POSITION = /* wgsl */ `\n\n/** https://www.saschawillems.de/blog/2016/08/13/vulkan-tutorial-on-rendering-a-fullscreen-quad-without-buffers/ */\nfn getFullscreenTrianglePosition(vertIdx: u32) -> vec4f {\n  let outUV = vec2u((vertIdx << 1) & 2, vertIdx & 2);\n  return vec4f(vec2f(outUV) * 2.0 - 1.0, 0.0, 1.0);\n}\n`;\n\nexport function cmdDrawFullscreenTriangle(renderPass: GPURenderPassEncoder) {\n  renderPass.draw(3);\n}\n", "export class BindingsCache {\n  private cache: Record<string, GPUBindGroup | undefined> = {};\n\n  getBindings(key: string, factory: () => GPUBindGroup): GPUBindGroup {\n    const cachedVal = this.cache[key];\n    if (cachedVal) {\n      return cachedVal;\n    }\n\n    const val = factory();\n    this.cache[key] = val;\n    return val;\n  }\n\n  clear() {\n    // Object.values(this.cache).forEach((bg) => {\n    // bg?.destroy(); // no such fn?\n    // });\n    this.cache = {};\n  }\n}\n", "import { ClearColor, DEPTH_FORMAT } from '../../constants.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\n\ntype PassClass = { NAME: string };\n\nexport const createLabel = (pass: PassClass, name = '') =>\n  `${pass.NAME}${name ? '-' + name : ''}`;\n\nexport const labelShader = (pass: PassClass, name = '') =>\n  `${createLabel(pass, name)}-shader`;\nexport const labelPipeline = (pass: PassClass, name = '') =>\n  `${createLabel(pass, name)}-pipeline`;\nexport const labelUniformBindings = (pass: PassClass, name = '') =>\n  `${createLabel(pass, name)}-uniforms`;\n\nexport const PIPELINE_PRIMITIVE_TRIANGLE_LIST: GPUPrimitiveState = {\n  cullMode: 'back',\n  topology: 'triangle-list',\n  stripIndexFormat: undefined,\n};\n\nexport const PIPELINE_DEPTH_ON: GPUDepthStencilState = {\n  format: DEPTH_FORMAT,\n  depthWriteEnabled: true,\n  depthCompare: 'less',\n};\n\nexport const assignResourcesToBindings = (\n  pass: PassClass,\n  device: GPUDevice,\n  pipeline: GPURenderPipeline | GPUComputePipeline,\n  entries: GPUBindGroupEntry[]\n) => {\n  return assignResourcesToBindings2(pass, '', device, pipeline, entries);\n};\n\nexport const assignResourcesToBindings2 = (\n  pass: PassClass,\n  name: string,\n  device: GPUDevice,\n  pipeline: GPURenderPipeline | GPUComputePipeline,\n  entries: GPUBindGroupEntry[]\n) => {\n  const uniformsLayout = pipeline.getBindGroupLayout(0);\n  return device.createBindGroup({\n    label: labelUniformBindings(pass, name),\n    layout: uniformsLayout,\n    entries,\n  });\n};\n\nexport const useColorAttachment = (\n  colorTexture: GPUTextureView,\n  clearColor: ClearColor,\n  loadOp: GPULoadOp,\n  storeOp: GPUStoreOp = 'store'\n): GPURenderPassColorAttachment => {\n  assertIsGPUTextureView(colorTexture);\n  return {\n    view: colorTexture,\n    loadOp,\n    storeOp,\n    clearValue: clearColor,\n  };\n};\n\nexport const useDepthStencilAttachment = (\n  depthTexture: GPUTextureView,\n  depthLoadOp: GPULoadOp,\n  depthStoreOp: GPUStoreOp = 'store'\n): GPURenderPassDepthStencilAttachment => {\n  assertIsGPUTextureView(depthTexture);\n  return {\n    view: depthTexture,\n    depthClearValue: 1.0,\n    depthLoadOp,\n    depthStoreOp,\n  };\n};\n", "/**\n * https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n */\nexport const SNIPPET_ACES = /* wgsl */ `\n\nfn doACES_Tonemapping(x: vec3f) -> vec3f {\n  let a = 2.51;\n  let b = 0.03;\n  let c = 2.43;\n  let d = 0.59;\n  let e = 0.14;\n  return saturate((x*(a*x+b)) / (x*(c*x+d)+e));\n}\n`;\n", "import { IS_WGPU } from '../../constants.ts';\n\n/** usual 8x8 Bayer matrix dithering */\nexport const SNIPPET_DITHER = /* wgsl */ `\n\nconst DITHER_ELEMENT_RANGE: f32 = 63.0;\n\n/** No. of possible colors in u8 color value */\nconst DITHER_LINEAR_COLORSPACE_COLORS: f32 = 256.0;\n\n// Too lazy to use texture or smth\nconst DITHER_MATRIX = array<u32, 64>(\n  0, 32,  8, 40,  2, 34, 10, 42,\n 48, 16, 56, 24, 50, 18, 58, 26,\n 12, 44,  4, 36, 14, 46,  6, 38,\n 60, 28, 52, 20, 62, 30, 54, 22,\n  3, 35, 11, 43,  1, 33,  9, 41,\n 51, 19, 59, 27, 49, 17, 57, 25,\n 15, 47,  7, 39, 13, 45,  5, 37,\n 63, 31, 55, 23, 61, 29, 53, 21\n);\n\n/** Returns 0-1 dithered value\n * @ Param gl_FragCoord - fragment coordinate (in pixels)\n */\nfn getDitherForPixel(gl_FragCoord: vec2u) -> f32 {\n  let pxPos = vec2u(\n    gl_FragCoord.x % 8u,\n    gl_FragCoord.y % 8u\n  );\n  let idx = pxPos.y * 8u + pxPos.x;\n  // Disabled on Deno, as Naga does not allow indexing 'array<u32, 64>'\n  // with nonconst values. See 'nagaFixes.ts'.\n  let matValue = DITHER_MATRIX[${IS_WGPU ? '0' : 'idx'}]; // [1-64]\n  return f32(matValue) / DITHER_ELEMENT_RANGE;\n}\n\n/**\n * Add some random value to each pixel,\n * hoping it would make it different than neighbours\n */\nfn ditherColor (\n  gl_FragCoord: vec2u,\n  originalColor: vec3f,\n  strength: f32\n) -> vec3f {\n  let ditherMod = getDitherForPixel(gl_FragCoord) * strength  / DITHER_LINEAR_COLORSPACE_COLORS;\n  return originalColor + ditherMod;\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\n\nconst CAMERA_CFG = CONFIG.camera.projection;\n\n/** I always forget the order. */\nexport const LINEAR_DEPTH = /* wgsl */ `\n\n/** Returns value [zNear, zFar] */\nfn linearizeDepth(depth: f32) -> f32 {\n  let zNear: f32 = ${CAMERA_CFG.near}f;\n  let zFar: f32 = ${CAMERA_CFG.far}f;\n  \n  // PP := projection matrix\n  // PP[10] = zFar / (zNear - zFar);\n  // PP[14] = (zFar * zNear) / (zNear - zFar);\n  // PP[11] = -1 ; PP[15] = 0 ; w = 1 \n  // z = PP[10] * p.z + PP[14] * w; // matrix mul, but x,y do not matter for z,w coords\n  // w = PP[11] * p.z + PP[15] * w;\n  // z' = z / w = (zFar / (zNear - zFar) * p.z + (zFar * zNear) / (zNear - zFar)) / (-p.z)\n  // p.z = (zFar * zNear) / (zFar + (zNear - zFar) * z')\n  return zNear * zFar / (zFar + (zNear - zFar) * depth);\n  \n  // OpenGL:\n  // let z = depth * 2.0 - 1.0; // back to NDC\n  // let z = depth;\n  // return (2.0 * zNear * zFar) / (zFar + zNear - z * (zFar - zNear));\n}\n\n/** Returns value [0, 1] */\nfn linearizeDepth_0_1(depth: f32) -> f32 {\n  let zNear: f32 = ${CAMERA_CFG.near}f;\n  let zFar: f32 = ${CAMERA_CFG.far}f;\n  let d2 = linearizeDepth(depth);\n  return d2 / (zFar - zNear);\n}\n`;\n", "const MAT4 = 'mat4x4<f32>';\n\n/** I always forget the order. */\nexport const GET_MVP_MAT = /* wgsl */ `\nfn getMVP_Mat(modelMat: ${MAT4}, viewMat: ${MAT4}, projMat: ${MAT4}) -> ${MAT4} {\n  let a = viewMat * modelMat;\n  return projMat * a;\n}\n`;\n\nexport const NORMALS_UTILS = /* wgsl */ `\n\n// WARNING: This is true only when you do not have scale (only rotation and transpose).\n// https://paroj.github.io/gltut/Illumination/Tut09%20Normal%20Transformation.html\nfn transformNormalToWorldSpace(modelMat: mat4x4f, normalV: vec3f) -> vec3f {\n  let normalMatrix = modelMat; // !\n  let normalWS = normalMatrix * vec4f(normalV, 0.0);\n  return normalize(normalWS.xyz);\n}\n\n\n/** https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/\n * \n * NOTE: I'm running of of patience writing this code, do not judge */\nfn OctWrap(v: vec2f) -> vec2f {\n  // https://gpuweb.github.io/gpuweb/wgsl/#select-builtin\n  // select(f, t, cond); // yes, this is the actuall syntax..\n  let signX = select(-1.0, 1.0, v.x >= 0.0);\n  let signY = select(-1.0, 1.0, v.y >= 0.0);\n  return (1.0 - abs(v.yx)) * vec2f(signX, signY);\n}\n \n/** https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/\n * \n * Result is in [0 .. 1]\n * \n * NOTE: I'm running of of patience writing this code, do not judge */\nfn encodeOctahedronNormal(n0: vec3f) -> vec2f {\n  var n = n0 / (abs(n0.x) + abs(n0.y) + abs(n0.z));\n  if (n.z < 0.0) {\n    let a = OctWrap(n.xy);\n    n.x = a.x;\n    n.y = a.y;\n  }\n  return n.xy * 0.5 + 0.5;\n}\n\n/** https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/ */\nfn decodeOctahedronNormal(f_: vec2f) -> vec3f {\n  let f = f_ * 2.0 - 1.0;\n \n  // https://twitter.com/Stubbesaurus/status/937994790553227264\n  var n = vec3f(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));\n  let t = saturate(-n.z);\n  if (n.x >= 0.0){ n.x -= t; } else { n.x += t; }\n  if (n.y >= 0.0){ n.y -= t; } else { n.y += t; }\n  return normalize(n);\n}\n`;\n\nexport const GENERIC_UTILS = /* wgsl */ `\n\nconst PI: f32 = ${Math.PI};\nconst HALF_PI: f32 = ${0.5 * Math.PI};\nconst TWO_PI: f32 = ${2 * Math.PI};\nconst ONE_OVER_PI: f32 = ${1.0 / Math.PI};\nconst FLOAT_EPSILON: f32 = 1e-7;\n\nfn safeNormalize3(v: vec3f) -> vec3f {\n  return select(\n    vec3f(0., 0., 0.), // when not OK\n    normalize(v), // when OK\n    dot(v, v) >= FLOAT_EPSILON\n  );\n}\n\nfn safeNormalize2(v: vec2f) -> vec2f {\n  return select(\n    vec2f(0., 0.), // when not OK\n    normalize(v), // when OK\n    dot(v, v) >= FLOAT_EPSILON\n  );\n}\n\nfn divideCeil(a: u32, b: u32) -> u32 {\n  return (a + b - 1) / b;\n}\n\nfn projectVertex(mvpMat: mat4x4f, pos: vec4f) -> vec3f {\n  let posClip = mvpMat * pos;\n  let posNDC = posClip / posClip.w;\n  return posNDC.xyz;\n}\n\n/** https://stackoverflow.com/a/64330724 */\nfn projectPointToLine(l1: vec2f, l2: vec2f, p: vec2f) -> vec2f {\n  let ab = l2 - l1;\n  let ac = p - l1;\n  let ad = ab * dot(ab, ac) / dot(ab, ab);\n  let d = l1 + ad;\n  return d;\n}\n\nfn ndc2viewportPx(viewportSize: vec2f, pos: vec3f) -> vec2f {\n  let pos_0_1 = pos.xy * 0.5 + 0.5; // to [0-1]\n  return pos_0_1 * viewportSize.xy;\n}\n\nfn dotMax0 (n: vec3f, toEye: vec3f) -> f32 {\n  return max(0.0, dot(n, toEye));\n}\n\n/**\n * Takes param 't' in range [0.0 .. 1.0] and 'maxIdx'. Returns u32 indices\n * of points before 't' and after 't' as well as the fract between these points.\n * \n * E.g.\n * When 't=0.6' and 'maxIdx=4', it returns indices 1, 2 and the fract is 0.4.\n */\nfn remapToIndices(maxIdx: u32, t: f32, outIdx: ptr<function, vec2u>) -> f32 {\n  let a = t * (f32(maxIdx) - 1.);\n  let a_u32 = u32(a);\n  (*outIdx).x = clamp(a_u32,      0u, maxIdx - 1u);\n  (*outIdx).y = clamp(a_u32 + 1u, 0u, maxIdx - 1u);\n  return fract(a);\n}\n\n/** https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/shaders/_utils.glsl#L41 */\nfn toLuma_fromLinear(rgbCol: vec3f) -> f32 {\n  let toLumaCoef = vec3f(0.2126729,  0.7151522, 0.0721750);\n  return dot(toLumaCoef, rgbCol);\n}\n\nfn scissorWithViewport(viewportSize: vec2u, posPx: vec2u) -> vec2u {\n  return vec2u(\n    clamp(posPx.x, 0u, viewportSize.x - 1u),\n    clamp(posPx.y, 0u, viewportSize.y - 1u)\n  );\n}\n\nfn outOfScreen(coord: vec2f) -> bool {\n  return (\n    coord.x < 0.0 || coord.x > 1.0 ||\n    coord.y < 0.0 || coord.y > 1.0\n  );\n}\n\nfn getDepthBin(\n  binCount: u32,\n  tileDepth: vec2f,\n  pixelDepth: f32,\n) -> u32 {\n  let tileDepthSpan = abs(tileDepth.y - tileDepth.x);\n  let t = (pixelDepth - tileDepth.x) / tileDepthSpan;\n  return clamp(u32(t * f32(binCount)), 0u, binCount - 1u);\n}\n\nfn mapRange(\n  inMin: f32, inMax: f32,\n  outMin: f32, outMax: f32,\n  value: f32\n) -> f32 {\n  let t = saturate((value - inMin) / (inMax - inMin));\n  return mix(outMin, outMax, t);\n}\n\n`;\n", "export const TEXTURE_AO = (binding: number) => /* wgsl */ `\n\n@group(0) @binding(${binding})\nvar _aoTexture: texture_2d<f32>;\n\n// TODO [IGNORE] add blur pass or at least bilinear sampling to smooth AO out\nfn sampleAo(viewport: vec2f, positionPx: vec2f) -> f32 {\n  let aoTexSize = textureDimensions(_aoTexture);\n  let t = positionPx.xy / viewport.xy;\n  let aoSamplePx = vec2i(vec2f(aoTexSize) * t);\n  return textureLoad(_aoTexture, aoSamplePx, 0).r;\n}\n`;\n", "import { SNIPPET_ACES } from '../_shaderSnippets/aces.wgsl.ts';\nimport { SNIPPET_DITHER } from '../_shaderSnippets/dither.wgsl.ts';\nimport { FULLSCREEN_TRIANGLE_POSITION } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { LINEAR_DEPTH } from '../_shaderSnippets/linearDepth.wgsl.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { TEXTURE_AO } from '../aoPass/shared/textureAo.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    resultHDR_Texture: 1,\n    depthTexture: 2,\n    normalsTexture: 3,\n    aoTexture: 4,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${FULLSCREEN_TRIANGLE_POSITION}\n${SNIPPET_DITHER}\n${SNIPPET_ACES}\n${LINEAR_DEPTH}\n${GENERIC_UTILS}\n${SHADER_SNIPPETS.NORMALS_UTILS}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${TEXTURE_AO(b.aoTexture)}\n\n@group(0) @binding(${b.resultHDR_Texture})\nvar _resultHDR_Texture: texture_2d<f32>;\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\n@group(0) @binding(${b.normalsTexture})\nvar _normalsTexture: texture_2d<f32>;\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4f {\n  return getFullscreenTrianglePosition(VertexIndex);\n}\n\nfn doGamma (color: vec3f, gammaValue: f32) -> vec3f {\n  return pow(color, vec3f(1.0 / gammaValue));\n}\n\n@fragment\nfn main_fs(\n  @builtin(position) positionPxF32: vec4<f32>\n) -> @location(0) vec4<f32> {\n  let gamma = _uniforms.colorMgmt.x;\n  let exposure = _uniforms.colorMgmt.y;\n  let ditherStr = _uniforms.colorMgmt.z;\n\n  let fragPositionPx = vec2u(positionPxF32.xy);\n  var color = vec3f(0.0);\n  let resultColor = textureLoad(_resultHDR_Texture, fragPositionPx, 0).rgb;\n  let displayMode = getDisplayMode();\n  \n  if (\n    displayMode == DISPLAY_MODE_FINAL || \n    displayMode == DISPLAY_MODE_HW_RENDER\n  ) {\n    color = resultColor;\n    color = ditherColor(fragPositionPx, color, ditherStr);\n    color = color * exposure;\n    color = saturate(doACES_Tonemapping(color));\n    color = doGamma(color, gamma);\n\n  } else if (displayMode == DISPLAY_MODE_DEPTH) {\n    let depth: f32 = textureLoad(_depthTexture, fragPositionPx, 0);\n    var c = linearizeDepth_0_1(depth);\n    // let rescale = vec2f(0.005, 0.009);\n    let rescale = vec2f(0.002, 0.01);\n    c = mapRange(rescale.x, rescale.y, 0., 1., c);\n    color = vec3f(c);\n  \n  } else if (displayMode == DISPLAY_MODE_NORMALS) {\n    let normalsOct: vec2f = textureLoad(_normalsTexture, fragPositionPx, 0).xy;\n    let normal = decodeOctahedronNormal(normalsOct);\n    color = vec3f(abs(normal.xyz));\n\n  } else if (displayMode == DISPLAY_MODE_AO) {\n    let ao = sampleAo(vec2f(_uniforms.viewport.xy), positionPxF32.xy);\n    color = vec3f(ao);\n  \n  } else {\n    color = resultColor;\n  }\n\n  return vec4(color.xyz, 1.0);\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { FULLSCREEN_TRIANGLE_POSITION } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    depthTexture: 1,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${FULLSCREEN_TRIANGLE_POSITION}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4f {\n  return getFullscreenTrianglePosition(VertexIndex);\n}\n\n\n@fragment\nfn main_fs(\n  @builtin(position) positionPxF32: vec4<f32>\n) -> @location(0) vec4<f32> {\n  let previewSize = _uniforms.dbgShadowMapPreviewSize;\n  // THIS DEPENDS ON THE POSITION OF THE PREVIEW ON SCREEN. CHANGE .TS CODE TOO!\n  let previewPosition = vec2f(\n    ${CONFIG.shadows.debugViewPosition[0]},\n    ${CONFIG.shadows.debugViewPosition[1]},\n  );\n\n  let shadowMapSize: f32 = ${CONFIG.shadows.textureSize}.0;\n  let sample_0_1 = (positionPxF32.xy - previewPosition) / vec2f(previewSize, previewSize);\n  let fragPositionPx = vec2u(shadowMapSize * sample_0_1);\n  \n  let depthTextSamplePx: vec2i = vec2i(i32(fragPositionPx.x), i32(fragPositionPx.y)); // wgpu's naga requiers vec2i..\n  var depth: f32 = 1.0 - textureLoad(_depthTexture, depthTextSamplePx, 0);\n\n  return vec4(depth, depth, depth, 1.0);\n  // return vec4(sample_0_1.xy, 0., 1.0);\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\nimport { cmdDrawFullscreenTriangle } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  assignResourcesToBindings,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\n\nimport { SHADER_PARAMS, SHADER_CODE } from './presentPass.wgsl.ts';\nimport * as DBG_SHADOWS from './dbgShadows.wgsl.ts';\nimport { getShadowMapPreviewSize } from '../shadowMapPass/shared/getShadowMapPreviewSize.ts';\n\nconst LABEL_DBG_SHADOW_MAP = 'dbg-shadow-map';\n\nexport class PresentPass {\n  public static NAME: string = 'PresentPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly pipelineDbgShadowMap: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    // present the result\n    let shaderModule = device.createShaderModule({\n      label: labelShader(PresentPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = this.createPipeline(\n      device,\n      outTextureFormat,\n      shaderModule,\n      ''\n    );\n\n    // dbg shadow map\n    shaderModule = device.createShaderModule({\n      label: labelShader(PresentPass, LABEL_DBG_SHADOW_MAP),\n      code: DBG_SHADOWS.SHADER_CODE(),\n    });\n    this.pipelineDbgShadowMap = this.createPipeline(\n      device,\n      outTextureFormat,\n      shaderModule,\n      LABEL_DBG_SHADOW_MAP\n    );\n  }\n\n  private createPipeline = (\n    device: GPUDevice,\n    outTextureFormat: GPUTextureFormat,\n    shaderModule: GPUShaderModule,\n    label: string\n  ) =>\n    device.createRenderPipeline({\n      label: labelPipeline(PresentPass, label),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: [],\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [{ format: outTextureFormat }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n  onViewportResize = () => this.bindingsCache.clear();\n\n  cmdDraw(ctx: PassCtx, screenTexture: GPUTextureView, loadOp: GPULoadOp) {\n    const { cmdBuf, profiler } = ctx;\n    assertIsGPUTextureView(screenTexture);\n\n    const renderPass = cmdBuf.beginRenderPass({\n      label: PresentPass.NAME,\n      colorAttachments: [\n        // TBH no need for clear as we override every pixel\n        useColorAttachment(screenTexture, CONFIG.clearColor, loadOp),\n      ],\n      timestampWrites: profiler?.createScopeGpu(PresentPass.NAME),\n    });\n\n    // render main scene\n    const bindings = this.bindingsCache.getBindings('-', () =>\n      this.createBindings(ctx)\n    );\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setPipeline(this.pipeline);\n    cmdDrawFullscreenTriangle(renderPass);\n\n    // debug views\n    if (CONFIG.shadows.showDebugView) {\n      this.renderDbgShadowMap(ctx, renderPass);\n    }\n\n    // end\n    renderPass.end();\n  }\n\n  private createBindings = (ctx: PassCtx): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      hdrRenderTexture,\n      normalsTexture,\n      depthTexture,\n      aoTexture,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(hdrRenderTexture);\n\n    return assignResourcesToBindings(PresentPass, device, this.pipeline, [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n      { binding: b.resultHDR_Texture, resource: hdrRenderTexture },\n      { binding: b.depthTexture, resource: depthTexture },\n      { binding: b.normalsTexture, resource: normalsTexture },\n      { binding: b.aoTexture, resource: aoTexture },\n    ]);\n  };\n\n  /////////////////\n  /// DBG ShadowMap\n  private renderDbgShadowMap(ctx: PassCtx, renderPass: GPURenderPassEncoder) {\n    const { viewport } = ctx;\n    const pipeline = this.pipelineDbgShadowMap;\n    const bindings = this.bindingsCache.getBindings(LABEL_DBG_SHADOW_MAP, () =>\n      this.createDbgShadowMapBindings(ctx, pipeline)\n    );\n    const size = getShadowMapPreviewSize(viewport);\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setPipeline(pipeline);\n\n    const pos = CONFIG.shadows.debugViewPosition;\n    const x = pos[0];\n    const y = pos[1];\n    renderPass.setViewport(x, y, size, size, 0, 1);\n    cmdDrawFullscreenTriangle(renderPass);\n  }\n\n  private createDbgShadowMapBindings = (\n    ctx: PassCtx,\n    pipeline: GPURenderPipeline\n  ): GPUBindGroup => {\n    const { device, globalUniforms, shadowDepthTexture } = ctx;\n    const b = DBG_SHADOWS.SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(shadowDepthTexture);\n\n    return assignResourcesToBindings2(\n      PresentPass,\n      LABEL_DBG_SHADOW_MAP,\n      device,\n      pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        { binding: b.depthTexture, resource: shadowDepthTexture },\n      ]\n    );\n  };\n}\n", "import { BYTES_VEC3, BYTES_VEC2 } from '../constants.ts';\nimport { Bounds3d } from '../utils/bounds.ts';\n\n/** Original mesh as imported from the OBJ file */\nexport interface GPUMesh {\n  name: string;\n  vertexCount: number;\n  triangleCount: number;\n  positionsBuffer: GPUBuffer;\n  normalsBuffer: GPUBuffer;\n  uvBuffer: GPUBuffer;\n  indexBuffer: GPUBuffer;\n  bounds: Bounds3d;\n  /** Object rendered just to show where collider is */\n  isColliderPreview: boolean;\n}\n\nexport const VERTEX_ATTRIBUTE_POSITION: GPUVertexBufferLayout = {\n  attributes: [\n    {\n      shaderLocation: 0, // position\n      offset: 0,\n      format: 'float32x3',\n    },\n  ],\n  arrayStride: BYTES_VEC3,\n  stepMode: 'vertex',\n};\n\nexport const VERTEX_ATTRIBUTES: GPUVertexBufferLayout[] = [\n  VERTEX_ATTRIBUTE_POSITION,\n  {\n    attributes: [\n      {\n        shaderLocation: 1, // normals\n        offset: 0,\n        format: 'float32x3', // only nanite object uses octahedron normals\n      },\n    ],\n    arrayStride: BYTES_VEC3,\n    stepMode: 'vertex',\n  },\n  {\n    attributes: [\n      {\n        shaderLocation: 2, // uv\n        offset: 0,\n        format: 'float32x2',\n      },\n    ],\n    arrayStride: BYTES_VEC2,\n    stepMode: 'vertex',\n  },\n];\n", "/**\n * - https://github.com/Scthe/WebFX/blob/master/src/shaders/_pbr.glsl\n * - https://github.com/Scthe/nanite-webgpu/blob/master/src/passes/_shaderSnippets/pbr.wgsl.ts\n */\nexport const SNIPPET_SHADING_PBR_UTILS = /* wgsl */ `\n\n\n/**\n * Fresnel (F): Schlick's version\n *\n * If cosTheta 0 means 90dgr, so return big value, if is 1 means 0dgr return\n * just F0. Function modeled to have shape of most common fresnel\n * reflectance function shape.\n *\n * @param float cosTheta - cos(viewDirection V, halfway vector H),\n * @param vec3 F0 - surface reflectance at 0dgr. vec3 somewhat models wavelengths\n */\nfn FresnelSchlick(cosTheta: f32, F0: vec3f) -> vec3f {\n  return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n/** Same as above, but for a single value (no color) */\nfn FresnelSchlick1(cosTheta: f32, F0: f32) -> f32 {\n  return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\n/**\n* Normal distribution function (D): GGX\n*\n* Just standard implementation ('Real Shading in Unreal Engine 4' equation 2)\n*\n* @param vec3 N - normalized normal\n* @param vec3 H - halfway vector\n* @param float roughness [0,1]\n*/\nfn DistributionGGX(N: vec3f, H: vec3f, roughness: f32) -> f32 {\n  let a      = roughness * roughness;\n  let a2     = a * a;\n  let NdotH  = dotMax0(N, H);\n  let NdotH2 = NdotH * NdotH;\n\n  var denom = NdotH2 * (a2 - 1.0) + 1.0;\n  denom = PI * denom * denom;\n  return a2 / denom;\n}\n\n/**\n* Self-shadowing Smith helper function.\n*\n* @see 'Real Shading in Unreal Engine 4' equation 4 line 1,2\n*\n* @param vec3 NdotV dot prod. between normal and vector to camera/light source\n* @param float roughness material property\n*/\nfn GeometrySchlickGGX(NdotV: f32, roughness: f32) -> f32 {\n  let r = (roughness + 1.0);\n  let k = (r * r) / 8.0;\n  let denom = NdotV * (1.0 - k) + k;\n  return NdotV / denom;\n}\n\n/**\n* Self-shadowing (G): GGX\n*\n* Just standard implementation ('Real Shading in Unreal Engine 4' equation 4 line 3). We do calculate self-shadowing in directions light-point and point-camera, then mul.\n*\n* @param vec3 N normal at current frag\n* @param vec3 V frag -> point\n* @param vec3 L frag -> light\n* @param float roughness material property\n*\n*/\nfn GeometrySmith(N: vec3f, V: vec3f, L: vec3f, roughness: f32) -> f32 {\n  let NdotV = dotMax0(N, V);\n  let NdotL = dotMax0(N, L);\n  let ggx2  = GeometrySchlickGGX(NdotV, roughness);\n  let ggx1  = GeometrySchlickGGX(NdotL, roughness);\n  return ggx1 * ggx2;\n}\n\n`;\n\n/**\n * - https://github.com/Scthe/WebFX/blob/master/src/shaders/_pbr.glsl\n * - https://github.com/Scthe/nanite-webgpu/blob/master/src/passes/_shaderSnippets/pbr.wgsl.ts\n */\nexport const SNIPPET_SHADING_PBR = /* wgsl */ `\n\n${SNIPPET_SHADING_PBR_UTILS}\n\nconst DIELECTRIC_FRESNEL = vec3f(0.04, 0.04, 0.04); // nearly black\nconst METALLIC_DIFFUSE_CONTRIBUTION = vec3(0.0, 0.0, 0.0); // none\n\nstruct Material {\n  positionWS: vec3f,\n  normal: vec3f,\n  toEye: vec3f,\n  // disney pbr:\n  albedo: vec3f,\n  roughness: f32,\n  isMetallic: f32,\n  ao: f32,\n  shadow: f32\n};\n\n\nfn pbr_LambertDiffuse(material: Material) -> vec3f {\n  // return material.albedo / PI;\n  return material.albedo;\n}\n\nfn pbr_CookTorrance(\n  material: Material,\n  V: vec3f,\n  L: vec3f,\n  // out parameter\n  // https://www.w3.org/TR/WGSL/#ref-ptr-use-cases\n  F: ptr<function,vec3f>\n) -> vec3f {\n  let H = normalize(V + L); // halfway vector\n  let N = material.normal; // normal at fragment\n\n  // F - Fresnel\n  let F0 = mix(DIELECTRIC_FRESNEL, material.albedo, material.isMetallic);\n  *F = FresnelSchlick(dotMax0(H, V), F0);\n  // G - microfacet self-shadowing\n  let G = GeometrySmith(N, V, L, material.roughness);\n  // D - Normals distribution\n  let NDF = DistributionGGX(N, H, material.roughness);\n\n  // Cook-Torrance BRDF using NDF,G,F\n  let numerator = NDF * G * (*F);\n  let denominator = 4.0 * dotMax0(N, V) * dotMax0(N, L);\n  return numerator / max(denominator, 0.001);\n}\n\nfn pbr_mixDiffuseAndSpecular(material: Material, diffuse: vec3f, specular: vec3f, F: vec3f) -> vec3f {\n  let kS = F;\n  // kD for metalics is ~0 (means they have pure black diffuse color, but take color of specular)\n  let kD = mix(vec3f(1.0, 1.0, 1.0) - kS, METALLIC_DIFFUSE_CONTRIBUTION, material.isMetallic);\n  return kD * diffuse + specular;\n}\n\n\nfn disneyPBR(material: Material, light: Light) -> vec3f {\n  let N = material.normal; // normal at fragment\n  let V = material.toEye; // viewDir\n  let L = normalize(light.position.xyz - material.positionWS.xyz); // wi in integral\n  let attenuation = 1.0; // hardcoded for this demo\n\n  // diffuse\n  let lambert = pbr_LambertDiffuse(material);\n\n  // specular\n  var F: vec3f = vec3f();\n  let specular = pbr_CookTorrance(material, V, L, &F);\n\n  // final light calc.\n  let NdotL = dotMax0(N, L);\n  let brdfFinal = pbr_mixDiffuseAndSpecular(material, lambert, specular, F);\n  let radiance = light.colorAndEnergy.rgb * attenuation * light.colorAndEnergy.a; // incoming color from light\n  return brdfFinal * radiance * NdotL;\n}\n`;\n", "/** https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/shaders/_shadows.glsl */\nexport const SAMPLE_SHADOW_MAP = (b: {\n  bindingTexture: number;\n  bindingSampler: number;\n}) => /* wgsl */ `\n\n@group(0) @binding(${b.bindingTexture})\nvar _shadowMapTexture: texture_depth_2d;\n\n@group(0) @binding(${b.bindingSampler})\n// var _shadowMapSampler: sampler_comparison;\nvar _shadowMapSampler: sampler;\n\nconst IN_SHADOW = 1.0;\nconst NOT_IN_SHADOW = 0.0;\n\n// settings\nconst PCSS_PENUMBRA_WIDTH = 10.0;\nconst PCSS_PENUMBRA_BASE: i32 = 1; // we want at least some blur\n\nfn projectToShadowSpace(\n  mvpShadowSourceMatrix: mat4x4f,\n  positionWS: vec4f\n) -> vec3f {\n  // https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/shaders/sintel.vert.glsl\n  // XY is in (-1, 1) space, Z is in (0, 1) space\n  let posFromLight = mvpShadowSourceMatrix * positionWS;\n  // Convert XY to (0, 1)\n  return vec3f(\n    posFromLight.x * 0.5 + 0.5,\n    1.0 - (posFromLight.y * 0.5 + 0.5), // Y is flipped because texture coords are Y-down.\n    posFromLight.z\n  );\n}\n\n/*\n--- MINIMAL IMPLEMENTATION ---\nvar shadowMapDepth : f32 = textureSample(\n  _shadowMapTexture,\n  _shadowMapSampler,\n  postionShadowSourceSpace.xy\n);\nlet isInShadow = postionShadowSourceSpace.z - bias > shadowMapDepth;\nreturn select(NOT_IN_SHADOW, IN_SHADOW, isInShadow);\n*/\n\nfn calculateDirectionalShadow(\n  usePcss: bool,\n  shadowSourcePositionWS: vec3f,\n  positionWS: vec3f,\n  normalWS: vec3f,\n  /** positionWS that was multiplied by shadow sources $mvpMatrix\n   * AKA position of fragment as rendered from light POV */\n  postionShadowSourceSpace: vec3f,\n  sampleRadiusPCF: u32,\n  bias: f32,\n) -> f32 {\n  // GDC_Poster_NormalOffset.png\n  let toShadowSource = normalize(shadowSourcePositionWS - positionWS);\n  let actualBias: f32 = max(abs(bias) * (1.0 - dot(normalWS, toShadowSource)), 0.0005);\n\n  var actualSampleRadius: i32 = i32(sampleRadiusPCF); // PCF\n\n  if (usePcss) {\n    // PCSS\n    let fragmentDepth = postionShadowSourceSpace.z;\n    let shadowMapDepth4 = textureGather(\n      _shadowMapTexture,\n      _shadowMapSampler,\n      postionShadowSourceSpace.xy\n    );\n    let shadowMapDepth = (shadowMapDepth4.x + shadowMapDepth4.y + shadowMapDepth4.z + shadowMapDepth4.w) / 4.0;\n    let depthDiff = max(fragmentDepth - shadowMapDepth, 0.0);\n    actualSampleRadius = PCSS_PENUMBRA_BASE + i32(depthDiff / shadowMapDepth * PCSS_PENUMBRA_WIDTH);\n  }\n\n  let result = _sampleShadowMap(actualSampleRadius, postionShadowSourceSpace, actualBias);\n  \n  \n  if (!_isValidShadowSample(postionShadowSourceSpace)){\n    return NOT_IN_SHADOW;\n  }\n  return result;\n}\n\n// There are following cases:\n//  * fragmentDepth > shadowMapDepth\n//      there exist some object that is closer to shadow source than object\n//      Means object is IN SHADOW\n//  * fragmentDepth == shadowMapDepth\n//      this is the object that casts the shadow\n//      Means NO SHADOW\n//  * fragmentDepth < shadowMapDepth\n//      would probably happen if object is not shadow-caster\n//      Means NO SHADOW\nfn _sampleShadowMap(sampleRadius: i32, lightPosProj: vec3f, bias: f32) -> f32 {\n  // depth of current fragment (we multiplied by light-shadow matrix\n  // in vert. shader, did w-divide here)\n  let fragmentDepth = lightPosProj.z;\n  let shadowTextureSize = textureDimensions(_shadowMapTexture, 0).x;\n  let texelSize: vec2f = vec2f(1. / f32(shadowTextureSize));\n  var shadow = 0.0;\n\n  for (var x: i32 = -sampleRadius; x <= sampleRadius; x++) {\n  for (var y: i32 = -sampleRadius; y <= sampleRadius; y++) {\n    let offset = vec2f(f32(x), f32(y)) * texelSize;\n    \n    // Btw. PCSS has variable radius, which can trigger: \"Variable radius triggers nonuniform flow analysis error\"\n    /* // The docs for this fn are even worse than for OpenGL. And that's saying something..\n    let shadowMapDepth = textureSampleCompare(\n      _shadowMapTexture,\n      _shadowMapSampler,\n      lightPosProj.xy + offset,\n      fragmentDepth - bias\n    );\n    shadow += shadowMapDepth;*/\n\n    // textureSample() - only fragment shaders. No compute? Prob. cause mipmaps. Try textureSampleLevel()\n    // let shadowMapDepth: f32 = textureSample(_shadowMapTexture, _shadowMapSampler, lightPosProj.xy + offset);\n    let shadowMapDepth4 = textureGather(\n      _shadowMapTexture,\n      _shadowMapSampler,\n      lightPosProj.xy + offset\n    );\n    let shadowMapDepth = (shadowMapDepth4.x + shadowMapDepth4.y + shadowMapDepth4.z + shadowMapDepth4.w) / 4.0;\n    let isInShadow = fragmentDepth - bias > shadowMapDepth;\n    shadow += select(NOT_IN_SHADOW, IN_SHADOW, isInShadow);\n  }\n  }\n\n  let pcfSize = f32(sampleRadius * 2 + 1);\n  return shadow / (pcfSize * pcfSize);\n}\n\n// for special cases we cannot early return cause:\n// \"error: 'textureSampleCompare' must only be called from uniform control flow\".\n// So do the samples ALWAYS, regardless of everything\nfn _isValidShadowSample(postionShadowSourceSpace: vec3f) -> bool {\n  // Special case if we went beyond the far plane of the frustum.\n  // Mark no shadow, cause it's better than dark region\n  // far away (or whatever relative light-camera postion is)\n  if (postionShadowSourceSpace.z > 1.0) {\n    return false;\n  }\n  // would cause 'invalid' sampling, mark as no shadow too.\n  if (outOfScreen(postionShadowSourceSpace.xy)) {\n    return false;\n  }\n  return true;\n}\n\n`;\n\nexport function createShadowSampler(device: GPUDevice) {\n  return device.createSampler({\n    label: 'shadow-map-sampler',\n    // compare: 'less',\n  });\n}\n", "import { SNIPPET_SHADING_PBR } from '../_shaderSnippets/pbr.wgsl.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { TEXTURE_AO } from '../aoPass/shared/textureAo.wgsl.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport { SAMPLE_SHADOW_MAP } from '../shadowMapPass/shared/sampleShadows.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  firstInstance: {\n    sintel: 0,\n    colliderPreview: 1,\n  },\n  bindings: {\n    renderUniforms: 0,\n    shadowMapTexture: 1,\n    shadowMapSampler: 2,\n    aoTexture: 3,\n  },\n};\n\nexport const DEFAULT_COLOR: [number, number, number] = [0.9, 0.9, 0.9];\n\n///////////////////////////\n/// SHADER CODE\n///\n/// https://github.com/Scthe/WebFX/blob/master/src/shaders/sintel.frag.glsl#L135\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${SHADER_SNIPPETS.NORMALS_UTILS}\n${SNIPPET_SHADING_PBR}\n${SAMPLE_SHADOW_MAP({\n  bindingTexture: b.shadowMapTexture,\n  bindingSampler: b.shadowMapSampler,\n})}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${TEXTURE_AO(b.aoTexture)}\n\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) positionWS: vec4f,\n  @location(1) normalWS: vec3f,\n  @location(2) uv: vec2f,\n  // vertex transformed by shadow source's MVP matrix\n  @location(3) positionShadowSpace: vec3f,\n  @location(4) @interpolate(flat) isColliderPreview: u32,\n};\n\n\n@vertex\nfn main_vs(\n  @builtin(instance_index) instanceIdx: u32,\n  @location(0) inWorldPos : vec3f,\n  @location(1) inNormal : vec3f,\n  @location(2) inUV : vec2f,\n) -> VertexOutput {\n  var result: VertexOutput;\n  var mvpMatrix = _uniforms.mvpMatrix;\n  var mvpShadowSourceMatrix = _uniforms.shadows.sourceMVP_Matrix;\n  var modelMat = _uniforms.modelMatrix;\n  \n  if (instanceIdx == ${c.firstInstance.colliderPreview}u) {\n    modelMat = _uniforms.collisionSphereModelMatrix;\n    mvpMatrix = getMVP_Mat(modelMat, _uniforms.viewMatrix, _uniforms.projMatrix);\n    mvpShadowSourceMatrix = mat4x4<f32>();\n    result.isColliderPreview = 1u;\n  }\n\n  let vertexPos = vec4<f32>(inWorldPos.xyz, 1.0);\n  result.position = mvpMatrix * vertexPos;\n  result.positionWS = vertexPos;\n  result.normalWS = transformNormalToWorldSpace(modelMat, inNormal);\n  result.uv = inUV;\n  result.positionShadowSpace = projectToShadowSpace(\n    mvpShadowSourceMatrix, vertexPos\n  );\n\n  return result;\n}\n\n\nstruct FragmentOutput {\n  @location(0) color: vec4<f32>,\n  @location(1) normals: vec2<f32>,\n};\n\n\n@fragment\nfn main_fs(fragIn: VertexOutput) -> FragmentOutput {\n  // https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/shaders/sintel.frag.glsl\n  // material\n  var material: Material;\n  createDefaultMaterial(&material, fragIn.positionWS, normalize(fragIn.normalWS));\n  \n  // shadow\n  let shadowSourcePositionWS = _uniforms.shadows.sourcePosition.xyz;\n  material.shadow = 1.0 - calculateDirectionalShadow(\n    _uniforms.shadows.usePCSS > 0u,\n    shadowSourcePositionWS,\n    fragIn.positionWS.xyz,\n    normalize(fragIn.normalWS),\n    fragIn.positionShadowSpace,\n    _uniforms.shadows.PCF_Radius,\n    _uniforms.shadows.bias\n  );\n  var c = material.shadow;\n\n  // ao\n  let ao = sampleAo(vec2f(_uniforms.viewport.xy), fragIn.position.xy);\n  material.ao = mix(1.0, ao, _uniforms.ao.strength);\n  // c = material.ao;\n\n  // collider\n  let isColliderPreview = fragIn.isColliderPreview > 0u;\n  if (isColliderPreview) {\n    material.albedo = vec3f(1., 1., 1.);\n    material.shadow = 1.0;\n    material.ao = 1.0;\n    material.roughness = 1.0;\n    material.isMetallic = 0.4;\n  }\n\n  // shading\n  var color = doShading(material);\n  if (isColliderPreview) {\n    color = mix(color, vec3f(1., 1., 0.0), 0.5);\n  }\n\n  var result: FragmentOutput;\n  result.color = vec4f(color.xyz, 1.0);\n  // result.color = vec4f(c,c,c, 1.0); // dbg\n  result.normals = encodeOctahedronNormal(material.normal);\n  return result;\n}\n\n\nfn doShading(material: Material) -> vec3f {\n  let ambient = _uniforms.lightAmbient.rgb * _uniforms.lightAmbient.a;\n  var radianceSum = vec3(0.0);\n\n  radianceSum += disneyPBR(material, _uniforms.light0);\n  radianceSum += disneyPBR(material, _uniforms.light1);\n  radianceSum += disneyPBR(material, _uniforms.light2);\n\n  radianceSum *= saturate(material.ao);\n  let maxShadowStr = _uniforms.shadows.strength;\n  radianceSum *= clamp(material.shadow, 1.0 - maxShadowStr, 1.0);\n\n  return ambient + radianceSum;\n}\n\nfn createDefaultMaterial(\n  material: ptr<function, Material>,\n  positionWS: vec4f,\n  normalWS: vec3f\n){\n  let cameraPos = _uniforms.cameraPosition.xyz;\n  \n  (*material).positionWS = positionWS.xyz;\n  (*material).normal = normalWS;\n  (*material).toEye = normalize(cameraPos - positionWS.xyz);\n  // brdf params:\n  (*material).albedo = vec3f(\n    ${DEFAULT_COLOR[0]},\n    ${DEFAULT_COLOR[1]},\n    ${DEFAULT_COLOR[2]});\n  (*material).roughness = 0.8;\n  (*material).isMetallic = 0.0;\n  (*material).ao = 1.0;\n  (*material).shadow = 1.0;\n}\n`;\n", "import { CONFIG, VERTS_IN_TRIANGLE } from '../../constants.ts';\nimport { GPUMesh, VERTEX_ATTRIBUTES } from '../../scene/gpuMesh.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n  useColorAttachment,\n  useDepthStencilAttachment,\n  assignResourcesToBindings2,\n  PIPELINE_DEPTH_ON,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './drawMeshesPass.wgsl.ts';\n\nexport class DrawMeshesPass {\n  public static NAME: string = 'DrawMeshesPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(\n    device: GPUDevice,\n    outTextureFormat: GPUTextureFormat,\n    normalsTextureFormat: GPUTextureFormat\n  ) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(DrawMeshesPass),\n      code: SHADER_CODE(),\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      label: labelPipeline(DrawMeshesPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: VERTEX_ATTRIBUTES,\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [\n          { format: outTextureFormat },\n          { format: normalsTextureFormat },\n        ],\n      },\n      primitive: PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n      depthStencil: PIPELINE_DEPTH_ON,\n    });\n  }\n\n  onViewportResize = () => {\n    this.bindingsCache.clear();\n  };\n\n  cmdDrawMeshes(ctx: PassCtx) {\n    const {\n      cmdBuf,\n      profiler,\n      depthTexture,\n      hdrRenderTexture,\n      normalsTexture,\n      scene,\n    } = ctx;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/beginRenderPass\n    const renderPass = cmdBuf.beginRenderPass({\n      label: DrawMeshesPass.NAME,\n      colorAttachments: [\n        useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n        useColorAttachment(normalsTexture, CONFIG.clearNormals, 'clear'),\n      ],\n      depthStencilAttachment: useDepthStencilAttachment(depthTexture, 'clear'),\n      timestampWrites: profiler?.createScopeGpu(DrawMeshesPass.NAME),\n    });\n\n    // set render pass data\n    renderPass.setPipeline(this.pipeline);\n\n    for (const object of scene.objects) {\n      this.renderObject(ctx, renderPass, object);\n    }\n\n    // fin\n    renderPass.end();\n  }\n\n  private renderObject(\n    ctx: PassCtx,\n    renderPass: GPURenderPassEncoder,\n    object: GPUMesh\n  ) {\n    if (object.isColliderPreview && !CONFIG.drawColliders) {\n      return;\n    }\n\n    const bindings = this.bindingsCache.getBindings(object.name, () =>\n      this.createBindings(ctx, object)\n    );\n\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setVertexBuffer(0, object.positionsBuffer);\n    renderPass.setVertexBuffer(1, object.normalsBuffer);\n    renderPass.setVertexBuffer(2, object.uvBuffer);\n    renderPass.setIndexBuffer(object.indexBuffer, 'uint32');\n\n    const vertexCount = object.triangleCount * VERTS_IN_TRIANGLE;\n    const firstInstance = object.isColliderPreview\n      ? SHADER_PARAMS.firstInstance.colliderPreview\n      : SHADER_PARAMS.firstInstance.sintel;\n    renderPass.drawIndexed(\n      vertexCount,\n      1, // instance count\n      0, // first index\n      0, // base vertex\n      firstInstance // first instance\n    );\n  }\n\n  private createBindings = (ctx: PassCtx, object: GPUMesh): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      shadowDepthTexture,\n      shadowMapSampler,\n      aoTexture,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(shadowDepthTexture);\n    assertIsGPUTextureView(aoTexture);\n\n    return assignResourcesToBindings2(\n      DrawMeshesPass,\n      object.name,\n      device,\n      this.pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        { binding: b.shadowMapTexture, resource: shadowDepthTexture },\n        { binding: b.shadowMapSampler, resource: shadowMapSampler },\n        { binding: b.aoTexture, resource: aoTexture },\n      ]\n    );\n  };\n}\n", "/**\n * https://www.shadertoy.com/view/lsf3WH\n *\n * The MIT License\n * Copyright \u00A9 2013 Inigo Quilez\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * https://www.youtube.com/c/InigoQuilez\n * https://iquilezles.org/\n *\n * Converted to WGSL by me.\n */\nexport const SNIPPET_NOISE = /* wgsl */ `\n\n/** range: [-1, 1] */\nfn hash(p0: vec2f) -> f32 {\n  let p  = 50.0 * fract(p0 * 0.3183099 + vec2f(0.71, 0.113));\n  return -1.0 + 2.0 * fract(p.x * p.y * (p.x + p.y));\n}\n\n/** range: [-1, 1] */\nfn noise(p: vec2f) -> f32 {\n    let i = floor(p);\n    let f = fract(p);\n\t\n    // quintic interpolant\n    let u = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(hash(i + vec2(0.0,0.0)), \n                   hash(i + vec2(1.0,0.0)), u.x),\n               mix(hash(i + vec2(0.0,1.0)), \n                   hash(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\n/** range: [-1, 1] */\nfn fractalNoise(p: vec2f, scale: f32) -> f32 {\n  var uv = p * scale;\n  let m = mat2x2f(1.6,  1.2, -1.2,  1.6);\n  var f  = 0.5000 * noise(uv); uv = m * uv;\n      f += 0.2500 * noise(uv); uv = m * uv;\n      f += 0.1250 * noise(uv); uv = m * uv;\n      f += 0.0625 * noise(uv); uv = m * uv;\n  return f;\n}\n\nfn randomRGB(v: u32, brightnessMod: f32) -> vec3f {\n  return saturate(vec3f(\n    fract(f32(v) * 1.73) * brightnessMod,\n    fract(f32(v) * 1.17) * brightnessMod,\n    fract(f32(v) * 1.31) * brightnessMod,\n  ));\n}\n`;\n", "import { FULLSCREEN_TRIANGLE_POSITION } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { SNIPPET_NOISE } from '../_shaderSnippets/noise.wgsl.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${FULLSCREEN_TRIANGLE_POSITION}\n${SNIPPET_NOISE}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4f {\n  return getFullscreenTrianglePosition(VertexIndex);\n}\n\n\n@fragment\nfn main_fs(\n  @builtin(position) positionPxF32: vec4<f32>\n) -> @location(0) vec4<f32> {\n  let color0 = _uniforms.background.color0;\n  let color1 = _uniforms.background.color1;\n  let noiseScale = _uniforms.background.noiseScale;\n  let gradientStrength = _uniforms.background.gradientStrength;\n\n  // get noise\n  let uv = positionPxF32.xy / _uniforms.viewport.xy;\n  let c = fractalNoise(uv, noiseScale) * 0.5 + 0.5;\n  \n  // mix colors\n  var color = mix(color0, color1, c);\n  color = mix(color, vec3f(1.0 - uv.y), gradientStrength);\n  return vec4(color.xyz, 1.0);\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\nimport { cmdDrawFullscreenTriangle } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  assignResourcesToBindings,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport {\n  SHADER_CODE,\n  SHADER_PARAMS,\n} from './drawBackgroundGradientPass.wgsl.ts';\n\nexport class DrawBackgroundGradientPass {\n  public static NAME: string = 'DrawBackgroundGradientPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(DrawBackgroundGradientPass),\n      code: SHADER_CODE(),\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      label: labelPipeline(DrawBackgroundGradientPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: [],\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [{ format: outTextureFormat }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  onViewportResize = () => this.bindingsCache.clear();\n\n  cmdDraw(ctx: PassCtx) {\n    const { cmdBuf, profiler, hdrRenderTexture } = ctx;\n    assertIsGPUTextureView(hdrRenderTexture);\n\n    const renderPass = cmdBuf.beginRenderPass({\n      label: DrawBackgroundGradientPass.NAME,\n      colorAttachments: [\n        // TBH no need for clear as we override every pixel\n        useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n      ],\n      timestampWrites: profiler?.createScopeGpu(\n        DrawBackgroundGradientPass.NAME\n      ),\n    });\n\n    const bindings = this.bindingsCache.getBindings('-', () =>\n      this.createBindings(ctx)\n    );\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setPipeline(this.pipeline);\n    cmdDrawFullscreenTriangle(renderPass);\n    renderPass.end();\n  }\n\n  private createBindings = ({\n    device,\n    globalUniforms,\n  }: PassCtx): GPUBindGroup => {\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(\n      DrawBackgroundGradientPass,\n      device,\n      this.pipeline,\n      [globalUniforms.createBindingDesc(b.renderUniforms)]\n    );\n  };\n}\n", "import { createGPU_IndexBuffer } from '../../utils/webgpu.ts';\nimport { TfxFileData } from './tfxFileLoader.ts';\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\n/** Used only for the naive hw hair rendering technique */\nexport type HairIndexBuffer = ReturnType<typeof createHairIndexBuffer>;\n\nexport const getHairTriangleCount = (\n  numHairStrands: number,\n  numVerticesPerStrand: number\n) => {\n  const iCount = numHairStrands * (numVerticesPerStrand - 1) * 6;\n  return Math.floor(iCount / 3);\n};\n\n/** https://github.com/Scthe/WebFX/blob/master/src/webfx/tfxLoader.ts#L30 */\nexport function createHairIndexBuffer(\n  device: GPUDevice,\n  name: string,\n  tfxData: TfxFileData\n) {\n  const { numHairStrands, numVerticesPerStrand } = tfxData.header;\n  // if you have 4 points in a strand, there are 3 segments\n  const idxElements = numHairStrands * (numVerticesPerStrand - 1);\n  const idxCpu = Array(idxElements * 6).fill(0);\n\n  let id = 0;\n  let iCount = 0; // actually a vertices count\n\n  // 0 --- 1\n  // |  /  |\n  // 2 --- 3\n  for (let i = 0; i < numHairStrands; i++) {\n    for (let j = 0; j < numVerticesPerStrand - 1; j++) {\n      idxCpu[iCount++] = 2 * id;\n      idxCpu[iCount++] = 2 * id + 1;\n      idxCpu[iCount++] = 2 * id + 2;\n      idxCpu[iCount++] = 2 * id + 2;\n      idxCpu[iCount++] = 2 * id + 1;\n      idxCpu[iCount++] = 2 * id + 3;\n      id++;\n    }\n    id++;\n  }\n\n  const idxData = Uint32Array.from(idxCpu);\n  const indexBuffer = createGPU_IndexBuffer(device, `${name}-indices`, idxData);\n  // console.log('INDICES', typedArr2str(idxData, 6));\n\n  return {\n    indexBuffer,\n    indexFormat: 'uint32' as GPUIndexFormat,\n    triangleCount: Math.floor(iCount / 3),\n  };\n}\n", "import { BoundingSphere } from '../../utils/bounds.ts';\nimport { TypedArrayView } from '../../utils/typedArrayView.ts';\nimport {\n  WEBGPU_MINIMAL_BUFFER_SIZE,\n  createGPU_StorageBuffer,\n} from '../../utils/webgpu.ts';\nimport { TfxFileData } from './tfxFileLoader.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nexport const BUFFER_HAIR_DATA = (bindingIdx: number) => /* wgsl */ `\n\nstruct HairData {\n  boundingSphere: vec4f,\n  strandsCount: u32,\n  pointsPerStrand: u32,\n};\n\n@group(0) @binding(${bindingIdx})\nvar<storage, read> _hairData: HairData;\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function createHairDataBuffer(\n  device: GPUDevice,\n  name: string,\n  tfxData: TfxFileData,\n  boundingSphere: BoundingSphere\n): GPUBuffer {\n  const BYTES = WEBGPU_MINIMAL_BUFFER_SIZE;\n\n  const data = new ArrayBuffer(BYTES);\n  const dataView = new TypedArrayView(data);\n  dataView.writeF32(boundingSphere.center[0]);\n  dataView.writeF32(boundingSphere.center[1]);\n  dataView.writeF32(boundingSphere.center[2]);\n  dataView.writeF32(boundingSphere.radius);\n  dataView.writeU32(tfxData.header.numHairStrands);\n  dataView.writeU32(tfxData.header.numVerticesPerStrand);\n\n  return createGPU_StorageBuffer(device, `${name}-hair-data`, dataView.asU32);\n}\n", "import { createGPU_StorageBuffer } from '../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\n/** Access points positions. Read-only */\nexport const BUFFER_HAIR_POINTS_POSITIONS_R = (\n  bindingIdx: number,\n  opts: {\n    bufferName: string;\n    getterName: string;\n  }\n) => /* wgsl */ `\n\n@group(0) @binding(${bindingIdx})\nvar<storage, read> ${opts.bufferName}: array<vec4f>;\n\nfn ${opts.getterName}(\n  pointsPerStrand: u32,\n  strandIdx: u32,\n  pointIdx: u32\n) -> vec4f {\n  return ${opts.bufferName}[strandIdx * pointsPerStrand + pointIdx];\n}\n`;\n\n/** Used for rendering */\nexport const BUFFER_HAIR_POINTS_POSITIONS = (bindingIdx: number) =>\n  BUFFER_HAIR_POINTS_POSITIONS_R(bindingIdx, {\n    bufferName: '_hairPointPositions',\n    getterName: '_getHairPointPosition',\n  });\n\n/** Access points positions. Read-write */\nexport const BUFFER_HAIR_POINTS_POSITIONS_RW = (\n  bindingIdx: number,\n  opts: {\n    bufferName: string;\n    setterName: string;\n    getterName: string;\n  }\n) => /* wgsl */ `\n\n@group(0) @binding(${bindingIdx})\nvar<storage, read_write> ${opts.bufferName}: array<vec4f>;\n\nfn ${opts.getterName}(\n  pointsPerStrand: u32,\n  strandIdx: u32,\n  pointIdx: u32\n) -> vec4f {\n  return ${opts.bufferName}[strandIdx * pointsPerStrand + pointIdx];\n}\n\nfn ${opts.setterName}(\n  pointsPerStrand: u32,\n  strandIdx: u32,\n  pointIdx: u32,\n  value: vec4f,\n) {\n  ${opts.bufferName}[strandIdx * pointsPerStrand + pointIdx] = value;\n}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function createHairPointsPositionsBuffer(\n  device: GPUDevice,\n  name: string,\n  positions: Float32Array,\n  extraUsage: GPUBufferUsageFlags\n): GPUBuffer {\n  // console.log('POSITIONS', typedArr2str(positions, 4));\n  return createGPU_StorageBuffer(\n    device,\n    `${name}-points-positions`,\n    positions,\n    extraUsage\n  );\n}\n", "import { TfxFileData } from './tfxFileLoader.ts';\nimport { CONFIG } from '../../constants.ts';\nimport { StorageAccess, createGPU_StorageBuffer } from '../../utils/webgpu.ts';\nimport { createArray } from '../../utils/arrays.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nconst setShadingPoint = /* wgsl */ `\n\nfn _setShadingPoint(strandId: u32, pointIdx: u32, color: vec4f) {\n  let offset = strandId * SHADING_POINTS;\n  let i0 = clamp(pointIdx, 0u, SHADING_POINTS - 1u);\n  _hairShading[offset + i0] = color;\n}\n`;\n\nexport const BUFFER_HAIR_SHADING = (\n  bindingIdx: number,\n  access: StorageAccess\n) => /* wgsl */ `\n\nconst SHADING_POINTS = ${CONFIG.hairRender.shadingPoints}u;\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairShading: array<vec4f>;\n\nfn _sampleShading(strandId: u32, t: f32) -> vec4f {\n  let offset = strandId * SHADING_POINTS;\n  let SHADING_POINTS_f32 = f32(SHADING_POINTS);\n\n  var indices: vec2u;\n  let fractMod = remapToIndices(SHADING_POINTS, t, &indices);\n  let c0 = _hairShading[offset + indices.x];\n  let c1 = _hairShading[offset + indices.y];\n  return mix(c0, c1, fractMod);\n}\n\n${access === 'read_write' ? setShadingPoint : ''}\n\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\n/** Has pre-filled red-green gradient */\nexport function createHairShadingBuffer(\n  device: GPUDevice,\n  name: string,\n  tfxFile: TfxFileData\n): GPUBuffer {\n  const {\n    header: { numHairStrands },\n  } = tfxFile;\n  const { shadingPoints } = CONFIG.hairRender;\n\n  // gradient: red at root, green at tip\n  const gradient = createArray(shadingPoints).map((_, i) => {\n    const p = i / (shadingPoints - 1);\n    // smooth gradient\n    return [1.0 - p, p, 0.0, 1.0];\n    // dbg: change color half-way\n    // return p >= 0.5 ? [0.0, 1.0, 0.0, 1.0] : [1.0, 0.0, 0.0, 1.0];\n  });\n\n  const data = new Float32Array(\n    createArray(numHairStrands)\n      .map(() => gradient)\n      .flat()\n      .flat()\n  );\n\n  return createGPU_StorageBuffer(device, `${name}-shading`, data);\n}\n", "import { vec3 } from 'wgpu-matrix';\nimport { TfxFileData } from './tfxFileLoader.ts';\nimport { createGPU_StorageBuffer } from '../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nexport const BUFFER_HAIR_TANGENTS = (bindingIdx: number) => /* wgsl */ `\n\n@group(0) @binding(${bindingIdx})\nvar<storage, read> _hairTangents: array<vec4f>;\n\nfn _getHairTangent(\n  pointsPerStrand: u32,\n  strandIdx: u32,\n  pointIdx: u32\n) -> vec4f {\n  return _hairTangents[strandIdx * pointsPerStrand + pointIdx];\n}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\ntype Vec3 = [number, number, number];\n\nfunction subtractNorm(a: Vec3, b: Vec3): Vec3 {\n  const c = vec3.subtract(a, b);\n  // deno-lint-ignore no-explicit-any\n  return vec3.normalize(c, c) as any;\n}\n\nexport function createHairTangentsBuffer(\n  device: GPUDevice,\n  name: string,\n  tfxFile: TfxFileData\n): GPUBuffer {\n  const {\n    vertexPositions,\n    header: { numHairStrands, numVerticesPerStrand },\n  } = tfxFile;\n\n  // NOTE: positions are in XYZW, so 4 components\n  const tangents = new Float32Array(vertexPositions.length);\n\n  const getVertexPos = (idx: number): Vec3 => [\n    vertexPositions[idx * 4],\n    vertexPositions[idx * 4 + 1],\n    vertexPositions[idx * 4 + 2],\n  ];\n  const setTangent = (idx: number, t: Vec3) => {\n    tangents[idx * 4 + 0] = t[0];\n    tangents[idx * 4 + 1] = t[1];\n    tangents[idx * 4 + 2] = t[2];\n    tangents[idx * 4 + 3] = 0.0;\n  };\n\n  for (let iStrand = 0; iStrand < numHairStrands; iStrand++) {\n    const indexRootVertMaster = iStrand * numVerticesPerStrand;\n\n    // vertex 1 through n-1\n    for (let i = 0; i < numVerticesPerStrand; i++) {\n      const isTip = i == numVerticesPerStrand - 1; // e.g. 31 in 32-vertices-per-strand\n      const k = isTip ? i - 1 : i; // use one before last\n      const vert = getVertexPos(indexRootVertMaster + k);\n      const vertNext = getVertexPos(indexRootVertMaster + k + 1);\n      const tangent = subtractNorm(vertNext, vert); // vert toward vertNext\n      setTangent(indexRootVertMaster + i, tangent);\n    }\n  }\n  // console.log('TANGENTS', typedArr2str(tangents, 4));\n\n  return createGPU_StorageBuffer(device, `${name}-tangents`, tangents);\n}\n", "/**\n * Access the current line segment\n * We will move vertices left or right by hair thickness:\n *   - odd vertices are moved left,\n *   - even are moved right.\n * And by 'left' and 'right' we mean cross(toCamera, tangent).\n */\nexport const HW_RASTERIZE_HAIR = /* wgsl */ `\n\nstruct HwHairRasterizeParams {\n  modelViewMatrix: mat4x4f,\n  projMatrix: mat4x4f,\n  fiberRadius: f32,\n  inVertexIndex: u32,\n}\n\nstruct HwRasterizedHair {\n  position: vec4f,\n  tangentOBJ: vec3f,\n}\n\n/** NOTE: all the comments assume you have 32 verts per strand */\nfn hwRasterizeHair(\n  p: HwHairRasterizeParams,\n) -> HwRasterizedHair {\n  var result: HwRasterizedHair;\n\n  let index: u32 = p.inVertexIndex / 2u; // each segment is 2 triangles, so we get same strand data twice.\n  let isOdd = (p.inVertexIndex & 0x01u) > 0u;\n  let positionOrg = _hairPointPositions[index].xyz;\n  let tangentOrg = _hairTangents[index].xyz;\n  let positionVS = p.modelViewMatrix * vec4f(positionOrg, 1.0);\n  let tangentVS  = p.modelViewMatrix * vec4f(tangentOrg, 1.0);\n\n  // Calculate bitangent vectors\n  let right: vec3f = safeNormalize3(cross(tangentVS.xyz, vec3f(0., 0., 1.)));\n  \n  // Calculate the negative and positive offset screenspace positions\n  // 0 is for odd vertexId, 1 is for even vertexId\n  let thicknessVector: vec3f = right * p.fiberRadius;\n  let hairEdgePositionsOdd  = vec4f(positionVS.xyz - thicknessVector, 1.0); // position 'left'\n  let hairEdgePositionsEven = vec4f(positionVS.xyz + thicknessVector, 1.0); // position 'right'\n  let hairEdgePosition = select( // DO NOT QUESTION THE ORDER OF PARAMS!\n    hairEdgePositionsEven,\n    hairEdgePositionsOdd,\n    isOdd\n  );\n  \n  result.position = p.projMatrix * hairEdgePosition;\n  result.tangentOBJ = tangentOrg;\n  return result;\n}\n\nstruct HairStrandData {\n  strandIdx: u32,\n  tFullStrand: f32,\n}\n\nfn getHairStrandData(\n  pointsPerStrand: u32,\n  inVertexIndex : u32,\n) -> HairStrandData {\n  let pointIdx = inVertexIndex / 2u;\n  let strandIdx = pointIdx / pointsPerStrand;\n  let pointInStrandIdx = pointIdx % pointsPerStrand;\n  let tFullStrand = f32(pointInStrandIdx) / f32(pointsPerStrand);\n  return HairStrandData(strandIdx, tFullStrand);\n}\n\n`;\n", "import { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { BUFFER_HAIR_SHADING } from '../../scene/hair/hairShadingBuffer.ts';\nimport { BUFFER_HAIR_TANGENTS } from '../../scene/hair/hairTangentsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport { HW_RASTERIZE_HAIR } from './shaderImpl/hwRasterizeHair.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    hairPositions: 1,\n    hairTangents: 2,\n    hairData: 3,\n    hairShading: 4,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.NORMALS_UTILS}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${HW_RASTERIZE_HAIR}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_POINTS_POSITIONS(b.hairPositions)}\n${BUFFER_HAIR_TANGENTS(b.hairTangents)}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_SHADING(b.hairShading, 'read')}\n\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) tangentWS: vec4f,\n  @location(1) @interpolate(flat) strandIdx: u32,\n  @location(2) tFullStrand: f32,\n};\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) inVertexIndex : u32\n) -> VertexOutput {\n  let hwRasterParams = HwHairRasterizeParams(\n    _uniforms.modelViewMat,\n    _uniforms.projMatrix,\n    _uniforms.fiberRadius,\n    inVertexIndex\n  );\n  let hwRasterResult = hwRasterizeHair(hwRasterParams);\n\n  let strandData = getHairStrandData(\n    _hairData.pointsPerStrand,\n    inVertexIndex\n  );\n\n  var result: VertexOutput;\n  result.position = hwRasterResult.position;\n  result.tangentWS = _uniforms.modelMatrix * vec4f(hwRasterResult.tangentOBJ, 1.);\n  result.strandIdx = strandData.strandIdx;\n  result.tFullStrand = strandData.tFullStrand;\n  return result;\n}\n\n\nstruct FragmentOutput {\n  @location(0) color: vec4<f32>,\n  @location(1) normals: vec2<f32>,\n};\n\n@fragment\nfn main_fs(fragIn: VertexOutput) -> FragmentOutput {\n  let displayMode = getDisplayMode();\n\n  var result: FragmentOutput;\n  // result.color = vec4f(1.0, 0.0, 0.0, 1.0);\n  // let c = 0.4;\n  // result.color = vec4f(c, c, c, 1.0);\n\n  if (displayMode == DISPLAY_MODE_HW_RENDER) {\n    var color = _sampleShading(fragIn.strandIdx, fragIn.tFullStrand);\n    result.color = vec4f(color.rgb, 1.0);\n    // dbg: gradient root -> tip\n    // result.color = mix(vec4f(1., 0., 0., 1.0), vec4f(0., 0., 1., 1.0), fragIn.tFullStrand);\n  } else {\n    result.color.a = 0.0;\n  }\n\n  let tangent = normalize(fragIn.tangentWS.xyz);\n  result.normals = encodeOctahedronNormal(tangent);\n  \n  return result;\n}\n`;\n", "import { CONFIG, VERTS_IN_TRIANGLE } from '../../constants.ts';\nimport { getHairTriangleCount } from '../../scene/hair/hairIndexBuffer.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  useDepthStencilAttachment,\n  assignResourcesToBindings2,\n  PIPELINE_DEPTH_ON,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './hwHairPass.wgsl.ts';\n\nexport class HwHairPass {\n  public static NAME: string = 'HwHairPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(\n    device: GPUDevice,\n    outTextureFormat: GPUTextureFormat,\n    normalsTextureFormat: GPUTextureFormat\n  ) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HwHairPass),\n      code: SHADER_CODE(),\n    });\n\n    const pipelineDesc = HwHairPass.createPipelineDesc(shaderModule);\n    pipelineDesc.fragment?.targets.push(\n      {\n        format: outTextureFormat,\n        // used to control color write from shader. Cause sometimes we use this pass only for normals and depth\n        blend: {\n          color: {\n            srcFactor: 'src-alpha',\n            dstFactor: 'one-minus-src-alpha',\n          },\n          alpha: {\n            srcFactor: 'src-alpha',\n            dstFactor: 'one-minus-src-alpha',\n          },\n        },\n      },\n      { format: normalsTextureFormat }\n    );\n    this.pipeline = device.createRenderPipeline(pipelineDesc);\n  }\n\n  public static createPipelineDesc(\n    shaderModule: GPUShaderModule\n  ): GPURenderPipelineDescriptor {\n    return {\n      label: labelPipeline(HwHairPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: [],\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [],\n      },\n      primitive: {\n        cullMode: 'none',\n        topology: 'triangle-list',\n        stripIndexFormat: undefined,\n      },\n      depthStencil: PIPELINE_DEPTH_ON,\n    };\n  }\n\n  cmdDrawHair(ctx: PassCtx) {\n    const {\n      cmdBuf,\n      profiler,\n      depthTexture,\n      hdrRenderTexture,\n      normalsTexture,\n      scene,\n    } = ctx;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/beginRenderPass\n    const renderPass = cmdBuf.beginRenderPass({\n      label: HwHairPass.NAME,\n      colorAttachments: [\n        useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n        useColorAttachment(normalsTexture, CONFIG.clearNormals, 'load'),\n      ],\n      depthStencilAttachment: useDepthStencilAttachment(depthTexture, 'load'),\n      timestampWrites: profiler?.createScopeGpu(HwHairPass.NAME),\n    });\n\n    // set render pass data\n    renderPass.setPipeline(this.pipeline);\n\n    // render hair\n    const hairObject = scene.hairObject;\n    const bindings = this.bindingsCache.getBindings(hairObject.name, () =>\n      this.createBindings(ctx, hairObject)\n    );\n    renderPass.setBindGroup(0, bindings);\n    HwHairPass.cmdRenderHair(renderPass, hairObject);\n\n    // fin\n    renderPass.end();\n    hairObject.reportRenderedStrandCount();\n  }\n\n  public static cmdRenderHair(\n    renderPass: GPURenderPassEncoder,\n    hairObject: HairObject\n  ) {\n    hairObject.bindIndexBuffer(renderPass);\n\n    // render full hair\n    // const { triangleCount } = object.buffers.indicesData;\n    // render with LOD\n    const renderedStrandCnt = hairObject.getRenderedStrandCount();\n    const triangleCount = getHairTriangleCount(\n      renderedStrandCnt,\n      hairObject.pointsPerStrand\n    );\n\n    const vertexCount = triangleCount * VERTS_IN_TRIANGLE;\n    renderPass.drawIndexed(\n      vertexCount,\n      1, // instance count\n      0, // first index\n      0, // base vertex\n      0 // first instance\n    );\n  }\n\n  private createBindings = (\n    { device, globalUniforms }: PassCtx,\n    object: HairObject\n  ): GPUBindGroup => {\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings2(\n      HwHairPass,\n      object.name,\n      device,\n      this.pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        object.bindPointsPositions(b.hairPositions),\n        object.bindTangents(b.hairTangents),\n        object.bindHairData(b.hairData),\n        object.bindShading(b.hairShading),\n      ]\n    );\n  };\n}\n", "/**\nhttps://github.com/Scthe/nanite-webgpu/blob/master/src/passes/rasterizeSw/rasterizeSwPass.wgsl.ts\n\nTutorials:\n* https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/\n* https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage.html\n* https://jtsorlinis.github.io/rendering-tutorial/\n*/\nexport const SW_RASTERIZE_HAIR = /* wgsl */ `\n\n\n// test colors in ABGR\nconst COLOR_RED: u32 = 0xff0000ffu;\nconst COLOR_GREEN: u32 = 0xff00ff00u;\nconst COLOR_BLUE: u32 = 0xffff0000u;\nconst COLOR_TEAL: u32 = 0xffffff00u;\nconst COLOR_PINK: u32 = 0xffff00ffu;\nconst COLOR_YELLOW: u32 = 0xff00ffffu;\nconst COLOR_WHITE: u32 = 0xffffffffu;\n\nstruct ProjectHairParams {\n  pointsPerStrand: u32,\n  viewportSize: vec2f,\n  fiberRadius: f32,\n}\n\nstruct ProjectedHairSegment {\n  v00: vec2f,\n  v01: vec2f,\n  v10: vec2f,\n  v11: vec2f,\n  depthsProj: vec4f,\n}\n\n/**\n * https://www.sctheblog.com/blog/hair-software-rasterize/#projecting-hair-as-billboards\n *  \n * NOTE: all the comments assume you have 32 verts per strand */\nfn projectHairSegment(\n  params: ProjectHairParams,\n  strandIdx: u32,\n  segmentIdx: u32, // [0...31], we later discard 31\n) -> ProjectedHairSegment {\n  var r: ProjectedHairSegment;\n\n  var v0: vec2f;\n  var v1: vec2f;\n  var d01: vec2f;\n  projectHairPoint(\n    params, strandIdx, segmentIdx, \n    &v0, &v1, &d01\n  );\n  r.v00 = v0;\n  r.v01 = v1;\n  r.depthsProj.x = d01.x;\n  r.depthsProj.y = d01.y;\n\n  projectHairPoint(\n    params, strandIdx, segmentIdx + 1, \n    &v0, &v1, &d01\n  );\n  r.v10 = v0;\n  r.v11 = v1;\n  r.depthsProj.z = d01.x;\n  r.depthsProj.w = d01.y;\n\n  return r;\n}\n\n/**\n * https://www.sctheblog.com/blog/hair-software-rasterize/#projecting-hair-as-billboards\n * \n * NOTE: all the comments assume you have 32 verts per strand\n * \n * Same as projectHairSegment(), but only for a single point, instead of both start and end points.\n*/\nfn projectHairPoint(\n  p: ProjectHairParams,\n  strandIdx: u32,\n  pointIdx: u32, // [0...31], we later discard 31\n  v0: ptr<function, vec2f>, v1: ptr<function, vec2f>,\n  depthsProj: ptr<function, vec2f>,\n) {\n  // This used to be view-space calculation, but toCamera vector [0, 0, 1]\n  // sometimes has to be [0, 0, -1]. Not sure when. So we do this in world space\n  let cameraPosition = _uniforms.cameraPosition;\n  let mMat = _uniforms.modelMatrix;\n  let viewProjMat = _uniforms.vpMatrix;\n\n  let p0_WS: vec4f = mMat * vec4f(_getHairPointPosition(p.pointsPerStrand, strandIdx, pointIdx).xyz, 1.0);\n  let t0_WS: vec4f = mMat * vec4f(      _getHairTangent(p.pointsPerStrand, strandIdx, pointIdx).xyz, 1.0);\n  \n  // Calculate bitangent vectors (cross between tangent and to-camera vectors)\n  let towardsCamera: vec3f = normalize(cameraPosition.xyz - p0_WS.xyz);\n  let right0: vec3f = normalize(cross(t0_WS.xyz, towardsCamera)).xyz * p.fiberRadius;\n  let v0_WS = vec4f(p0_WS.xyz - right0, 1.0);\n  let v1_WS = vec4f(p0_WS.xyz + right0, 1.0);\n  let v0_NDC: vec3f = projectVertex(viewProjMat, v0_WS);\n  let v1_NDC: vec3f = projectVertex(viewProjMat, v1_WS);\n\n  // Vertex positions\n  (*v0) = ndc2viewportPx(p.viewportSize.xy, v0_NDC); // in pixels\n  (*v1) = ndc2viewportPx(p.viewportSize.xy, v1_NDC); // in pixels\n  (*depthsProj) = vec2f(v0_NDC.z, v1_NDC.z);\n}\n\n/** Get bounding box XY points. All values in pixels as f32\n * \n * https://www.sctheblog.com/blog/hair-software-rasterize/#using-edge-function-to-rasterize-quads\n */\nfn getRasterizedHairBounds(\n  r: ProjectedHairSegment,\n  viewportSize: vec2f,\n) -> vec4f {\n  // MAX: top right on screen, but remember Y is inverted!\n  var boundRectMax = ceil(max(max(r.v00, r.v01), max(r.v10, r.v11)));\n  // MIN: bottom left on screen, but remember Y is inverted!\n  var boundRectMin = floor(min(min(r.v00, r.v01), min(r.v10, r.v11)));\n  // scissor\n  boundRectMax = min(boundRectMax, viewportSize.xy);\n  boundRectMin = max(boundRectMin, vec2f(0.0, 0.0));\n  return vec4f(boundRectMin, boundRectMax);\n}\n\n\n/** https://www.sctheblog.com/blog/hair-software-rasterize/#software-rasterization */\nfn edgeFunction(v0: vec2f, v1: vec2f, p: vec2f) -> f32 {\n  return (p.x - v0.x) * (v1.y - v0.y) - (p.y - v0.y) * (v1.x - v0.x);\n}\n\n\n/** https://www.sctheblog.com/blog/hair-software-rasterize/#optimization-or-not */\nstruct EdgeC{ A: f32, B: f32, C: f32 }\n\n/** https://www.sctheblog.com/blog/hair-software-rasterize/#optimization-or-not */\nfn edgeC(v0: vec2f, v1: vec2f) -> EdgeC{\n  // from edgeFunction() formula we extract: A * p.x + B * p.y + C.\n  // This way, when we iterate over x-axis, we can just add A for\n  // next pixel, as the \"B * p.y + C\" part does not change\n  var result: EdgeC;\n  result.A = v1.y - v0.y; // for p.x\n  result.B = -v1.x + v0.x; // for p.y\n  result.C = -v0.x * v1.y + v0.y * v1.x; // rest\n  return result;\n}\n\n////////////////\n/// Some additional util functions below\n\nfn debugBarycentric(w: vec4f) -> u32 {\n  let color0: u32 = u32(saturate(w.x) * 255); // 0-255 as u32\n  let color1: u32 = u32(saturate(w.y) * 255); // 0-255 as u32\n  let color2: u32 = u32(saturate(w.z) * 255); // 0-255 as u32\n  return (0xff000000u | // alpha\n     color0 | // red\n    (color1 << 8) | // green\n    (color2 << 16) // blue\n  );\n}\n\n/**\n * https://www.sctheblog.com/blog/hair-software-rasterize/#segment-space-coordinates\n * \n * result[0] - value in 0-1 range along the width of the segment.\n *             0 is on the side edges, 1 is on the other one\n * result[1] - value in 0-1 range along the length of the segment,\n *             0 is near the segment start point,\n *             1 is near the segment end point\n */\nfn interpolateHairQuad(projSegm: ProjectedHairSegment, c: vec2f) -> vec2f {\n  // vertices for edge at the start of the segment: projSegm.v00 , projSegm.v01\n  let startEdgeMidpoint = (projSegm.v00 + projSegm.v01) / 2.0;\n  // vertices for edge at the end of the segment: projSegm.v10 , projSegm.v11\n  let endEdgeMidpoint = (projSegm.v10 + projSegm.v11) / 2.0;\n  \n  // project the pixel onto the strand's segment\n  // (the center line between 2 original points)\n  let cProjected = projectPointToLine(startEdgeMidpoint, endEdgeMidpoint, c);\n  // distance from the start of the strand's segment. Range: [0..1]\n  let d1 = length(cProjected - startEdgeMidpoint) / length(startEdgeMidpoint - endEdgeMidpoint);\n  \n  // start edge is perpendicular to tangent of the current segment\n  let widthStart = length(projSegm.v00 - projSegm.v01);\n  // 'End' edge is at the angle to segment's tangent.\n  // It's direction is determined by the NEXT segment's tangent.\n  // Project the 'end' edge onto the 'start' edge\n  // using the geometric definition of dot product.\n  let widthEnd = widthStart * dot(normalize(projSegm.v00 - projSegm.v01), normalize(projSegm.v10 - projSegm.v11));\n  let expectedWidth = mix(widthStart, widthEnd, d1);\n  // project pixel to one of the side edges\n  let e1 = projectPointToLine(projSegm.v00, projSegm.v10, c);\n  // distance between pixel and it's projection on the edge.\n  // Divided by full width of the strand around that point\n  let d0 =  length(c - e1) / expectedWidth;\n\n  return saturate(vec2f(d0, d1));\n}\n\nfn interpolateHairF32(w: vec2f, values: vec4f) -> f32 {\n  let valueStart = mix(values.x, values.y, w.x);\n  let valueEnd   = mix(values.z, values.w, w.x);\n  return mix(valueStart, valueEnd, w.y);\n}\n\n`;\n", "import { CONFIG } from '../../../constants.ts';\n\nexport const SHADER_TILE_UTILS = /* wgsl */ `\n\nconst TILE_SIZE: u32 = ${CONFIG.hairRender.tileSize}u;\nconst TILE_DEPTH_BINS_COUNT = ${CONFIG.hairRender.tileDepthBins}u;\n\nfn getTileCount(viewportSize: vec2u) -> vec2u {\n  return vec2u(\n    divideCeil(viewportSize.x, TILE_SIZE),\n    divideCeil(viewportSize.y, TILE_SIZE)\n  );\n}\n\nfn getHairTileIdx(viewportSize: vec2u, tileXY: vec2u, depthBin: u32) -> u32 {\n  let tileCount = getTileCount(viewportSize);\n  return (\n    tileXY.y * tileCount.x  * TILE_DEPTH_BINS_COUNT +\n    tileXY.x * TILE_DEPTH_BINS_COUNT +\n    depthBin\n  );\n}\n\n/** Changes tileIdx into (tileX, tileY) coordinates (NOT IN PIXELS!) */\nfn getTileXY(viewportSize: vec2u, tileIdx: u32) -> vec2u {\n  let tileCount = getTileCount(viewportSize);\n  let row = tileIdx / tileCount.x;\n  return vec2u(tileIdx - tileCount.x * row, row);\n}\n\nfn getHairTileXY_FromPx(px: vec2u) -> vec2u {\n  return vec2u(\n    px.x / TILE_SIZE,\n    px.y / TILE_SIZE\n  );\n}\n\n/** Get tile's bounding box IN PIXELS */\nfn getTileBoundsPx(viewportSize: vec2u, tileXY: vec2u) -> vec4u {\n  let boundsMin = scissorWithViewport(viewportSize, vec2u(\n    tileXY.x * TILE_SIZE,\n    tileXY.y * TILE_SIZE\n  ));\n  let boundsMax = scissorWithViewport(viewportSize, vec2u(\n    (tileXY.x + 1u) * TILE_SIZE,\n    (tileXY.y + 1u) * TILE_SIZE\n  ));\n  return vec4u(boundsMin, boundsMax);\n}\n\n`;\n", "import { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { BUFFER_HAIR_TANGENTS } from '../../scene/hair/hairTangentsBuffer.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { SW_RASTERIZE_HAIR } from './shaderImpl/swRasterizeHair.wgsl.ts';\nimport { BUFFER_HAIR_TILES_RESULT } from './shared/hairTilesResultBuffer.ts';\nimport { BUFFER_HAIR_TILE_SEGMENTS } from './shared/hairTileSegmentsBuffer.ts';\nimport { SHADER_TILE_UTILS } from './shaderImpl/tileUtils.wgsl.ts';\nimport { CONFIG } from '../../constants.ts';\n\n/*\n1) I've also tested per-strand dispatch version - https://github.com/Scthe/frostbitten-hair-webgpu/blob/d6306a69ab1cde4ef1321fc98c2040fd64ccac37/src/passes/swHair/hairTilesPass.perStrand.wgsl.ts .\n   It is slower and harder to optimize. Not sure why.\n2) Software rasterization in this shader is slower if you \"optimize\" edge function into \"A*x + B*y + C\".\n   I've left commented-out implementation if you want to try\n\n\nTODO [MEDIUM] try workgroup shared for positions and tangents arrays. Probably after you remove strand-based impl.\n*/\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: 4, // TODO [LOW] set even better values? Current seem OK.\n  // A bit inefficient if strand has less points. But it's not THAT inefficient suprisingly?\n  // A lot of combinations of XY sizes result in 2.2-2.3ms.\n  // TODO [MEDIUM] use CONFIG.pointsPerStrand, though does not matter for current asset.\n  workgroupSizeY: 32,\n  bindings: {\n    renderUniforms: 0,\n    hairData: 1,\n    hairPositions: 2,\n    hairTangents: 3,\n    tilesBuffer: 4,\n    depthTexture: 5,\n    tileSegmentsBuffer: 6,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${SW_RASTERIZE_HAIR}\n${SHADER_TILE_UTILS}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_POINTS_POSITIONS(b.hairPositions)}\n${BUFFER_HAIR_TANGENTS(b.hairTangents)}\n${BUFFER_HAIR_TILES_RESULT(b.tilesBuffer, 'read_write')}\n${BUFFER_HAIR_TILE_SEGMENTS(b.tileSegmentsBuffer, 'read_write')}\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\nconst INVALID_TILES_PER_SEGMENT_THRESHOLD = ${\n  CONFIG.hairRender.invalidTilesPerSegmentThreshold\n}u;\n\n@compute\n@workgroup_size(${c.workgroupSizeX}, ${c.workgroupSizeY}, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n) {\n  let viewportSize: vec2f = _uniforms.viewport.xy;\n  let viewportSizeU32: vec2u = vec2u(viewportSize);\n  let maxDrawnSegments: u32 = _uniforms.maxDrawnHairSegments;\n  let mvMatrix = _uniforms.modelViewMat;\n  let projMatrixInv = _uniforms.projMatrixInv;\n  let strandsCount: u32 = _hairData.strandsCount;\n  let pointsPerStrand: u32 = _hairData.pointsPerStrand;\n\n  let strandIdx = global_id.x;\n  let segmentIdx = global_id.y; // [0...31]\n  \n  // There are 32 points but only 31 segments. Dispatching 1 per point is suboptimal..\n  // Discard 32th last invocation (so idx 31)\n  if (segmentIdx >= pointsPerStrand - 1) { return; }\n  if (strandIdx >= strandsCount) { return; }\n\n  // get rasterize data\n  let projParams = ProjectHairParams(\n    pointsPerStrand,\n    viewportSize,\n    _uniforms.fiberRadius\n  );\n  let projSegm = projectHairSegment(\n    projParams,\n    strandIdx,\n    segmentIdx\n  );\n\n  let hairDepthBoundsVS = getHairDepthBoundsVS(mvMatrix);\n\n  // get segment bounds and convert to tiles\n  let bounds4f = getRasterizedHairBounds(projSegm, viewportSize);\n  let boundRectMin = bounds4f.xy;\n  let boundRectMax = bounds4f.zw;\n  let tileMinXY: vec2u = getHairTileXY_FromPx(vec2u(boundRectMin));\n  let tileMaxXY: vec2u = getHairTileXY_FromPx(vec2u(boundRectMax));\n  // reject degenerate strands from physics simulation.\n  // If parts of the strand disappear, this is probably the cause.\n  // Number tuned for Sintel's front hair lock\n  let tileSize = (tileMaxXY - tileMinXY) + vec2u(1u, 1u);\n  if (tileSize.x * tileSize.y > INVALID_TILES_PER_SEGMENT_THRESHOLD) {\n    return;\n  } \n\n  // for each affected tile\n  // We could calculate affected tiles analytically, but we have to rasterize to test depth buffer.\n  // But you can probably do some optimizations by calculating where the strand edge crosses the tile bounds.\n  // Having tileMinXY + tileMaxXY iteration means we test all tiles in a rectangle.\n  // Could use early out for diagonal segments.\n  for (var tileY: u32 = tileMinXY.y; tileY <= tileMaxXY.y; tileY += 1u) {\n  for (var tileX: u32 = tileMinXY.x; tileX <= tileMaxXY.x; tileX += 1u) {\n    processTile(\n      projSegm,\n      viewportSizeU32,\n      projMatrixInv,\n      maxDrawnSegments,\n      hairDepthBoundsVS,\n      vec2u(tileX, tileY),\n      strandIdx, segmentIdx\n    );\n  }}\n}\n\n\nfn processTile(\n  projSegm: ProjectedHairSegment,\n  viewportSize: vec2u,\n  projMatrixInv: mat4x4f,\n  maxDrawnSegments: u32,\n  hairDepthBoundsVS: vec2f,\n  tileXY: vec2u,\n  strandIdx: u32, segmentIdx: u32\n) {\n  let bounds = getTileBoundsPx(viewportSize, tileXY);\n  let boundsMin = bounds.xy;\n  let boundsMax = bounds.zw;\n\n  var depthMin =  999.0; // in proj. space, so *A BIT* overkill\n  var depthMax = -999.0; // in proj. space, so *A BIT* overkill\n  var depthBin = TILE_DEPTH_BINS_COUNT;\n\n  /*// edgeFunction() as series of additions\n  // For some reason this is SLOWER than repeated calling of edgeFunction()?! I assume too much registers spend on this..\n  let CC0 = edgeC(projSegm.v01, projSegm.v00);\n  let CC1 = edgeC(projSegm.v11, projSegm.v01);\n  let CC2 = edgeC(projSegm.v10, projSegm.v11);\n  let CC3 = edgeC(projSegm.v00, projSegm.v10);\n  var CY0 = f32(boundsMin.x) * CC0.A + f32(boundsMin.y) * CC0.B + CC0.C;\n  var CY1 = f32(boundsMin.x) * CC1.A + f32(boundsMin.y) * CC1.B + CC1.C;\n  var CY2 = f32(boundsMin.x) * CC2.A + f32(boundsMin.y) * CC2.B + CC2.C;\n  var CY3 = f32(boundsMin.x) * CC3.A + f32(boundsMin.y) * CC3.B + CC3.C;*/\n\n  // iterate over all pixels in the tile\n  for (var y: u32 = boundsMin.y; y < boundsMax.y; y += 1u) {\n  // var CX0 = CY0; var CX1 = CY1; var CX2 = CY2; var CX3 = CY3;\n  for (var x: u32 = boundsMin.x; x < boundsMax.x; x += 1u) {\n      // You should NEVER multi-sample hair with Frostbite's technique.\n      // Just make sure you understand the interaction with hardware rasterizer (through depth-buffer).\n      // https://www.sctheblog.com/blog/hair-software-rasterize/#half-of-the-pixel-offset\n      let posPx = vec2f(f32(x), f32(y)); // + vec2f(0.5); // Removed after testing. Causes tiny z-fighting like artefacts\n      let C0 = edgeFunction(projSegm.v01, projSegm.v00, posPx);\n      let C1 = edgeFunction(projSegm.v11, projSegm.v01, posPx);\n      let C2 = edgeFunction(projSegm.v10, projSegm.v11, posPx);\n      let C3 = edgeFunction(projSegm.v00, projSegm.v10, posPx);\n\n      if (C0 >= 0 && C1 >= 0 && C2 >= 0 && C3 >= 0) { // if (CX0 >= 0 && CX1 >= 0 && CX2 >= 0 && CX3 >= 0) {\n        // https://www.sctheblog.com/blog/hair-software-rasterize/#segment-space-coordinates\n        let interpW = interpolateHairQuad(projSegm, posPx);\n        // let value = 0xffff00ffu;\n        // let value = debugBarycentric(vec4f(interpW.xy, 0.1, 0.));\n        // storeResult(viewportSize, p_u32, value);\n        \n        let hairDepth: f32 = interpolateHairF32(interpW, projSegm.depthsProj);\n        \n        // sample depth buffer\n        let depthTextSamplePx: vec2i = vec2i(i32(x), i32(viewportSize.y - y)); // wgpu's naga requiers vec2i..\n        let depthBufferValue: f32 = textureLoad(_depthTexture, depthTextSamplePx, 0);\n\n        if (hairDepth > depthBufferValue) { // depth test with GL_LESS\n          continue;\n        }\n\n        // get depth bin based on view-space depth\n        let hairDepthVS: vec3f = projectVertex(projMatrixInv, vec4f(posPx, hairDepth, 1.0));\n        // view space means Z is reversed. But we want bin 0 to be close etc.\n        // So we invert the bin idx.\n        let hairDepthBin = (TILE_DEPTH_BINS_COUNT - 1u) - getDepthBin(TILE_DEPTH_BINS_COUNT, hairDepthBoundsVS, hairDepthVS.z);\n\n        // store px result\n        depthMin = min(depthMin, hairDepth);\n        depthMax = max(depthMax, hairDepth);\n        depthBin = min(depthBin, hairDepthBin); // closest bin\n      }\n\n      // move to next pixel\n      // CX0 += CC0.A; CX1 += CC1.A; CX2 += CC2.A; CX3 += CC3.A;\n  }\n  // CY0 += CC0.B; CY1 += CC1.B; CY2 += CC2.B; CY3 += CC3.B;\n  } // end xy-iter\n\n  // no tile px passes\n  if (depthMin > 1.0) {\n    return;\n  }\n  \n  // store the result\n  let nextPtr = atomicAdd(&_hairTileSegments.drawnSegmentsCount, 1u);\n  // If we run out of space to store the fragments we lose them\n  if (nextPtr < maxDrawnSegments) {\n    let prevPtr = _storeTileHead(\n      viewportSize,\n      tileXY, depthBin,\n      depthMin, depthMax,\n      nextPtr\n    );\n    _storeTileSegment(\n      nextPtr, prevPtr,\n      strandIdx, segmentIdx\n    );\n  }\n}\n\n\n/** NOTE: This is view space. View space is weird. Expect inverted z-axis etc. */\nfn getHairDepthBoundsVS(mvMat: mat4x4f) -> vec2f {\n  let bs = _hairData.boundingSphere;\n  let bsCenterVS = mvMat * vec4f(bs.xyz, 1.0);\n  return vec2f(bsCenterVS.z - bs.w, bsCenterVS.z + bs.w);\n}\n\n/** NOTE: if you want to store color for .png file, it's in ABGR format */\n/*fn storeResult(viewportSize: vec2u, posPx: vec2u, value: u32) {\n  // bitcast<u32>(value); <- if needed\n  if(\n    posPx.x < 0 || posPx.x >= viewportSize.x ||\n    posPx.y < 0 || posPx.y >= viewportSize.y\n  ) {\n    return;\n  }\n  let y = viewportSize.y - posPx.y; // invert cause WebGPU coordinates\n  let idx: u32 = y * viewportSize.x + posPx.x;\n  // WebGPU clears to 0. So atomicMin is pointless..\n  atomicMax(&_hairTilesResult[idx], value);\n}*/\n\n`;\n", "import { BYTES_U32 } from '../../constants.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport { Dimensions } from '../../utils/index.ts';\nimport {\n  assertIsGPUTextureView,\n  bindBuffer,\n  getItemsPerThread,\n} from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './hairTilesPass.wgsl.ts';\nimport { createHairTileSegmentsBuffer } from './shared/hairTileSegmentsBuffer.ts';\nimport { createHairTilesResultBuffer } from './shared/hairTilesResultBuffer.ts';\n\nexport class HairTilesPass {\n  public static NAME: string = 'HairTilesPass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  /** result framebuffer as flat buffer */\n  public hairTilesBuffer: GPUBuffer = undefined!; // see this.handleViewportResize()\n  public hairTileSegmentsBuffer: GPUBuffer = undefined!; // see this.handleViewportResize()\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HairTilesPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(HairTilesPass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  /** Clears to 0. We cannot select a number */\n  clearFramebuffer(ctx: PassCtx) {\n    ctx.cmdBuf.clearBuffer(this.hairTilesBuffer, 0, this.hairTilesBuffer.size);\n    ctx.cmdBuf.clearBuffer(this.hairTileSegmentsBuffer, 0, BYTES_U32);\n  }\n\n  onViewportResize = (device: GPUDevice, viewportSize: Dimensions) => {\n    this.bindingsCache.clear();\n\n    if (this.hairTilesBuffer) {\n      this.hairTilesBuffer.destroy();\n    }\n    if (this.hairTileSegmentsBuffer) {\n      this.hairTileSegmentsBuffer.destroy();\n    }\n\n    this.hairTilesBuffer = createHairTilesResultBuffer(device, viewportSize);\n    this.hairTileSegmentsBuffer = createHairTileSegmentsBuffer(\n      device,\n      viewportSize\n    );\n  };\n\n  cmdDrawHairToTiles(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler } = ctx;\n\n    const computePass = cmdBuf.beginComputePass({\n      label: HairTilesPass.NAME,\n      timestampWrites: profiler?.createScopeGpu(HairTilesPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(hairObject.name, () =>\n      this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    this.cmdDispatchPerSegment(computePass, hairObject);\n\n    computePass.end();\n\n    // stats\n    hairObject.reportRenderedStrandCount();\n  }\n\n  private cmdDispatchPerSegment(\n    computePass: GPUComputePassEncoder,\n    hairObject: HairObject\n  ) {\n    const workgroupsX = getItemsPerThread(\n      hairObject.getRenderedStrandCount(),\n      SHADER_PARAMS.workgroupSizeX\n    );\n    const workgroupsY = getItemsPerThread(\n      hairObject.pointsPerStrand,\n      SHADER_PARAMS.workgroupSizeY\n    );\n    // console.log(`${HairTilesPass.NAME}.dispatch(${workgroupsX}, ${workgroupsY}, 1)`); // prettier-ignore\n    computePass.dispatchWorkgroups(workgroupsX, workgroupsY, 1);\n  }\n\n  private createBindings = (\n    { device, globalUniforms, depthTexture }: PassCtx,\n    object: HairObject\n  ): GPUBindGroup => {\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(depthTexture);\n\n    return assignResourcesToBindings2(\n      HairTilesPass,\n      object.name,\n      device,\n      this.pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        bindBuffer(b.tilesBuffer, this.hairTilesBuffer),\n        bindBuffer(b.tileSegmentsBuffer, this.hairTileSegmentsBuffer),\n        object.bindHairData(b.hairData),\n        object.bindPointsPositions(b.hairPositions),\n        object.bindTangents(b.hairTangents),\n        { binding: b.depthTexture, resource: depthTexture },\n      ]\n    );\n  };\n}\n", "import { BYTES_VEC4 } from '../../../constants.ts';\nimport { STATS } from '../../../stats.ts';\nimport { Dimensions } from '../../../utils/index.ts';\nimport { formatBytes } from '../../../utils/string.ts';\nimport { StorageAccess, u32_type } from '../../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nconst setRasterizerResult = /* wgsl */ `\nfn _setRasterizerResult(viewportSize: vec2u, posPx: vec2u, color: vec4f) {\n  if(\n    posPx.x < 0 || posPx.x >= viewportSize.x ||\n    posPx.y < 0 || posPx.y >= viewportSize.y\n  ) { return; }\n\n  let idx = viewportSize.x * posPx.y + posPx.x;\n  _hairRasterizerResults.data[idx] = color;\n}\n\nfn _getNextTileIdx() -> u32 {\n  return atomicAdd(&_hairRasterizerResults.tileQueueAtomicIdx, 1u);\n}\n`;\n\nexport const BUFFER_HAIR_RASTERIZER_RESULTS = (\n  bindingIdx: number,\n  access: StorageAccess\n) => /* wgsl */ `\n\nstruct HairRasterResult {\n  // there is a limit of 8 storage buffers. We are reaching this limit right now.\n  // So pack this counter 'somewhere'. I could raise a limit, but..\n  // https://gpuweb.github.io/gpuweb/#gpusupportedlimits\n  tileQueueAtomicIdx: ${u32_type(access)},\n  data: array<vec4f>,\n}\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairRasterizerResults: HairRasterResult;\n\nfn _getRasterizerResult(viewportSize: vec2u, posPx: vec2u) -> vec4f {\n  let idx = viewportSize.x * posPx.y + posPx.x;\n  return _hairRasterizerResults.data[idx];\n}\n\n${access == 'read_write' ? setRasterizerResult : ''}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function createHairRasterizerResultsBuffer(\n  device: GPUDevice,\n  viewportSize: Dimensions\n): GPUBuffer {\n  const pixels = viewportSize.width * viewportSize.height;\n  const bytesPerPixel = BYTES_VEC4;\n  const size = pixels * bytesPerPixel;\n  STATS.update('Hair FBO', formatBytes(size));\n\n  return device.createBuffer({\n    label: `hair-rasterizer-result`,\n    size,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n}\n", "import { FULLSCREEN_TRIANGLE_POSITION } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport { BUFFER_HAIR_TILES_RESULT } from '../swHair/shared/hairTilesResultBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_HAIR_TILE_SEGMENTS } from '../swHair/shared/hairTileSegmentsBuffer.ts';\nimport { BUFFER_HAIR_RASTERIZER_RESULTS } from '../swHair/shared/hairRasterizerResultBuffer.ts';\nimport { SHADER_TILE_UTILS } from '../swHair/shaderImpl/tileUtils.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    tilesBuffer: 1,\n    tileSegmentsBuffer: 2,\n    rasterizeResultBuffer: 3,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n/// I wish I could use compute pass, but WGSL has.. problems\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${FULLSCREEN_TRIANGLE_POSITION}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${SHADER_TILE_UTILS}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_TILES_RESULT(b.tilesBuffer, 'read')}\n${BUFFER_HAIR_TILE_SEGMENTS(b.tileSegmentsBuffer, 'read')}\n${BUFFER_HAIR_RASTERIZER_RESULTS(b.rasterizeResultBuffer, 'read')}\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4f {\n  return getFullscreenTrianglePosition(VertexIndex);\n}\n\nstruct FragmentOutput {\n  // @builtin(frag_depth) fragDepth: f32,\n  @location(0) color: vec4<f32>,\n};\n\n@fragment\nfn main_fs(\n  @builtin(position) positionPxF32: vec4<f32>\n) -> FragmentOutput {\n  var result: FragmentOutput;\n\n  let viewportSize: vec2f = _uniforms.viewport.xy;\n  let viewportSizeU32 = vec2u(viewportSize.xy);\n  // invert cause it's WebGPU thing\n  let fragPositionPx = vec2u(\n    u32(positionPxF32.x),\n    u32(viewportSize.y - positionPxF32.y)\n  );\n\n  let tileXY = getHairTileXY_FromPx(fragPositionPx);\n  let displayMode = getDisplayMode();\n\n  if (displayMode == DISPLAY_MODE_TILES) {\n    result.color = renderTileSegmentCount(viewportSizeU32, tileXY);\n\n  } else {\n    var color = vec4f(0.0, 0.0, 0.0, 1.0);\n    color = _getRasterizerResult(viewportSizeU32, fragPositionPx);\n    \n    // fill tile bg with some pattern\n    if (color.a <= 0. && getDbgFinalModeShowTiles()) {\n      let dbgTileColor = getDebugTileColor(tileXY);\n      color = dbgTileColor + color * color.a;\n    }\n    result.color = color;\n\n    // write depth to depth bufer\n    //    > NOPE, done by separate hair hardware raster pass\n    // let hairResult = _getTileDepth(viewportSizeU32, tileXY);\n    // result.fragDepth = hairResult.x;\n  }\n\n  return result;\n}\n\n\nfn getDebugTileColor(tileXY: vec2u) -> vec4f {\n  var dbgTileColor = vec4f(1.0);\n  dbgTileColor.r = 0.0;\n  dbgTileColor.g = f32(tileXY.x % 2) / 2.0;\n  dbgTileColor.b = f32(tileXY.y % 2) / 2.0;\n  return dbgTileColor;\n}\n\nfn renderTileSegmentCount(\n  viewportSize: vec2u,\n  tileXY: vec2u\n) -> vec4f {\n  var color = vec4f(0.0, 0.0, 0.0, 1.0);\n\n  // output: segment count in each tile normalized by UI provided value\n  let maxSegmentsCount = getDbgTileModeMaxSegments();\n  let segments = getSegmentCountInTiles(viewportSize, maxSegmentsCount, tileXY);\n  color.r = f32(segments) / f32(maxSegmentsCount);\n  color.g = 1.0 - color.r;\n\n  // dbg: tile bounds\n  // let tileIdx: u32 = getHairTileIdx(viewportSize, tileXY, 0u);\n  // color.r = f32((tileIdx * 17) % 33) / 33.0;\n  // color.a = 1.0;\n  \n  if (segments == 0u) {\n    discard;\n  }\n  return color;\n}\n\nfn getSegmentCountInTiles(\n  viewportSize: vec2u,\n  maxSegmentsCount: u32,\n  tileXY: vec2u\n) -> u32 {\n  let maxDrawnSegments: u32 = _uniforms.maxDrawnHairSegments;\n  var segmentData = vec3u();\n  var count = 0u;\n\n  for (var binIdx = 0u; binIdx < TILE_DEPTH_BINS_COUNT; binIdx++) {\n    var segmentPtr = _getTileSegmentPtr(viewportSize, tileXY, binIdx);\n\n    while (count < maxSegmentsCount) {\n      if (_getTileSegment(maxDrawnSegments, segmentPtr, &segmentData)) {\n        count = count + 1;\n        segmentPtr = segmentData.z;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return count;\n}\n\n`;\n", "import { assertIsGPUTextureView, bindBuffer } from '../../utils/webgpu.ts';\nimport { SHADER_PARAMS, SHADER_CODE } from './hairCombinePass.wgsl.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { cmdDrawFullscreenTriangle } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  assignResourcesToBindings,\n} from '../_shared/shared.ts';\nimport { CONFIG } from '../../constants.ts';\n\nexport class HairCombinePass {\n  public static NAME: string = 'HairCombinePass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HairCombinePass),\n      code: SHADER_CODE(),\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      label: labelPipeline(HairCombinePass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: [],\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [\n          {\n            format: outTextureFormat,\n            blend: {\n              // color is based on the alpha from the shader's output.\n              // So we can decide in code. But it also has a discard() there.\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n                operation: 'add',\n              },\n              alpha: {\n                srcFactor: 'one',\n                dstFactor: 'one',\n                operation: 'add',\n              },\n            },\n          },\n        ],\n      },\n      primitive: { topology: 'triangle-list' },\n      // depthStencil: PIPELINE_DEPTH_ON, // done in hair compute shaders\n    });\n  }\n\n  onViewportResize = () => this.bindingsCache.clear();\n\n  cmdCombineRasterResults(ctx: PassCtx) {\n    const { cmdBuf, profiler, hdrRenderTexture, depthTexture } = ctx;\n    assertIsGPUTextureView(hdrRenderTexture);\n\n    const renderPass = cmdBuf.beginRenderPass({\n      label: HairCombinePass.NAME,\n      colorAttachments: [\n        // do not clear!\n        useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n      ],\n      // depthStencilAttachment: useDepthStencilAttachment(depthTexture, 'load'),  // done in hair compute shaders\n      timestampWrites: profiler?.createScopeGpu(HairCombinePass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(depthTexture.label, () =>\n      this.createBindings(ctx)\n    );\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setPipeline(this.pipeline);\n    cmdDrawFullscreenTriangle(renderPass);\n    renderPass.end();\n  }\n\n  private createBindings = (ctx: PassCtx): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      hairTilesBuffer,\n      hairTileSegmentsBuffer,\n      hairRasterizerResultsBuffer,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(HairCombinePass, device, this.pipeline, [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n      bindBuffer(b.tilesBuffer, hairTilesBuffer),\n      bindBuffer(b.tileSegmentsBuffer, hairTileSegmentsBuffer),\n      bindBuffer(b.rasterizeResultBuffer, hairRasterizerResultsBuffer),\n    ]);\n  };\n}\n", "import { BYTES_U32, CONFIG } from '../../../constants.ts';\nimport { STATS } from '../../../stats.ts';\nimport { formatBytes } from '../../../utils/string.ts';\nimport { WEBGPU_MINIMAL_BUFFER_SIZE } from '../../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///\n/// We also have to split whole memory into per-processor subregions\n/// as the free() is impossible to implement otherwise.\n/// Once processor moves to another tile, all memory alloc.\n/// from previous tile does not matter.\n///////////////////////////\n\nconst cfgHair = CONFIG.hairRender;\nconst SLICE_DATA_PER_PROCESSOR_COUNT =\n  cfgHair.avgFragmentsPerSlice *\n  cfgHair.slicesPerPixel *\n  cfgHair.tileSize *\n  cfgHair.tileSize;\n\n/**\n * Memory pool for slice data. Each processor contains own subregion\n * to make it easier to free() the memory between tiles. Each slice\n * data contains color and a pointer to next entry.\n */\nexport const BUFFER_HAIR_SLICES_DATA = (\n  bindingIdx: number,\n  access: 'read_write'\n) => /* wgsl */ `\n\nconst SLICE_DATA_PER_PROCESSOR_COUNT = ${SLICE_DATA_PER_PROCESSOR_COUNT}u;\n\nstruct SliceData {\n  /** [encodedColor.rg, encodedColor.ba, nextSlicePtr, 0u] */\n  value: vec4u,\n}\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _hairSliceData: array<SliceData>;\n\nfn _getSliceDataProcessorOffset(processorId: u32) -> u32 {\n  return processorId * SLICE_DATA_PER_PROCESSOR_COUNT;\n}\n\nfn _hasMoreSliceDataSlots(slicePtr: u32) -> bool {\n  return slicePtr < SLICE_DATA_PER_PROCESSOR_COUNT;\n}\n\nfn _setSliceData(\n  processorId: u32,\n  slicePtr: u32,\n  color: vec4f, previousPtr: u32 // both are data to be written\n) {\n  let offset = _getSliceDataProcessorOffset(processorId) + slicePtr;\n  let value = vec4u(\n    pack2x16float(color.rg),\n    pack2x16float(color.ba),\n    previousPtr,\n    0u\n  );\n  _hairSliceData[offset].value = value;\n}\n\nfn _getSliceData(\n  processorId: u32,\n  slicePtr: u32,\n  data: ptr<function, SliceData>\n) -> bool {\n  if (\n    slicePtr == INVALID_SLICE_DATA_PTR || \n    slicePtr >= SLICE_DATA_PER_PROCESSOR_COUNT\n  ) { return false; }\n  \n  let offset = _getSliceDataProcessorOffset(processorId) + slicePtr;\n  (*data).value = _hairSliceData[offset].value;\n  return true;\n}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function createHairSlicesDataBuffer(device: GPUDevice): GPUBuffer {\n  const { processorCount } = CONFIG.hairRender;\n  const entries = SLICE_DATA_PER_PROCESSOR_COUNT * processorCount;\n  const bytesPerEntry = 4 * BYTES_U32;\n  const size = Math.max(entries * bytesPerEntry, WEBGPU_MINIMAL_BUFFER_SIZE);\n  STATS.update('Slices data', formatBytes(size));\n\n  return device.createBuffer({\n    label: `hair-slices-data`,\n    size,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n}\n", "/*\n// ALT. pixels-in-tile iter for doublechecking\nfor (var y: u32 = 0u; y < TILE_SIZE; y += 1u) { \nfor (var x: u32 = 0u; x < TILE_SIZE; x += 1u) {\n  let px = vec2f(boundRectMin + vec2f(f32(x), f32(y))); // pixel coordinates wrt. viewport\n  let posPx_u32 = vec2u(px);\n  let pxInTile: vec2u = vec2u(x, y); // pixel coordinates wrt. tile\n  (continues as normal)\n}}\n*/\n\nexport const SHADER_IMPL_PROCESS_HAIR_SEGMENT = () => /* wgsl */ `\n\nfn processHairSegment(\n  p: FineRasterParams,\n  tileBoundsPx: vec4u, tileDepth: vec2f,\n  sliceDataOffset: u32,\n  strandIdx: u32, segmentIdx: u32\n) -> u32 {\n  var writtenSliceDataCount: u32 = 0u;\n  let segmentCount = p.pointsPerStrand - 1;\n\n  let projParams = ProjectHairParams(\n    p.pointsPerStrand,\n    p.viewportSize,\n    p.fiberRadius,\n  );\n  let projSegm = projectHairSegment(\n    projParams,\n    strandIdx,\n    segmentIdx\n  );\n\n  // bounds\n  // TODO [MEDIUM] optimize bounds. Scissor based on segment0_px, segment1_px.\n  let boundRectMax = vec2f(tileBoundsPx.zw);\n  let boundRectMin = vec2f(tileBoundsPx.xy);\n\n  // edgeFunction() as series of additions\n  let CC0 = edgeC(projSegm.v01, projSegm.v00);\n  let CC1 = edgeC(projSegm.v11, projSegm.v01);\n  let CC2 = edgeC(projSegm.v10, projSegm.v11);\n  let CC3 = edgeC(projSegm.v00, projSegm.v10);\n  var CY0 = boundRectMin.x * CC0.A + boundRectMin.y * CC0.B + CC0.C;\n  var CY1 = boundRectMin.x * CC1.A + boundRectMin.y * CC1.B + CC1.C;\n  var CY2 = boundRectMin.x * CC2.A + boundRectMin.y * CC2.B + CC2.C;\n  var CY3 = boundRectMin.x * CC3.A + boundRectMin.y * CC3.B + CC3.C;\n\n  // for each pixel in tile\n  for (var y: f32 = boundRectMin.y; y < boundRectMax.y; y += 1.0) {\n    var CX0 = CY0;\n    var CX1 = CY1;\n    var CX2 = CY2;\n    var CX3 = CY3;\n  for (var x: f32 = boundRectMin.x; x < boundRectMax.x; x += 1.0) {\n    // stop if there is no space inside processor's sliceData linked list.\n    let nextSliceDataPtr: u32 = sliceDataOffset + writtenSliceDataCount; \n    \n    // WARNING: this 'optimization' is slow\n    // if (!_hasMoreSliceDataSlots(nextSliceDataPtr)) { return writtenSliceDataCount; }\n\n    // get pixel coordinates\n    // Half-of-the-pixel offset not added as it causes problems (small random pixels around the strand)\n    // https://www.sctheblog.com/blog/hair-software-rasterize/#half-of-the-pixel-offset\n    let posPx = vec2f(x, y); // pixel coordinates wrt. viewport\n    let posPx_u32 = vec2u(u32(x), u32(y));\n    let pxInTile: vec2u = vec2u(posPx - boundRectMin); // pixel coordinates wrt. tile\n\n    let isOutside = CX0 < 0 || CX1 < 0 || CX2 < 0 || CX3 < 0;\n    CX0 += CC0.A;\n    CX1 += CC1.A;\n    CX2 += CC2.A;\n    CX3 += CC3.A;\n\n    if (isOutside) {\n      continue;\n    }\n\n    // https://www.sctheblog.com/blog/hair-software-rasterize/#segment-space-coordinates\n    let interpW = interpolateHairQuad(projSegm, posPx);\n    let t = interpW.y; // 0 .. 1\n    let hairDepth: f32 = interpolateHairF32(interpW, projSegm.depthsProj);\n    // TODO [IGNORE] instead of linear, have quadratic interp? It makes strands \"fatter\", so user would provide lower fiber radius. Which is good for us.\n    let alpha = 1.0 - abs(interpW.x * 2. - 1.); // interpW.x is in 0..1. Turn it so strand middle is 1.0 and then 0.0 at edges.\n\n    // sample depth buffer, depth test with GL_LESS\n    let depthTextSamplePx: vec2i = vec2i(i32(posPx_u32.x), i32(p.viewportSize.y - y)); // wgpu's naga requiers vec2i..\n    let depthBufferValue: f32 = textureLoad(_depthTexture, depthTextSamplePx, 0);\n    if (hairDepth >= depthBufferValue) {\n      continue;\n    }\n\n    // calculate final color\n    let tFullStrand = (f32(segmentIdx) + t) / f32(segmentCount);\n    // let color = vec4f(1.0 - t, t, 0.0, alpha); // red at root, green at tip\n    var color = _sampleShading(strandIdx, tFullStrand);\n    color.a = color.a * alpha;\n    let sliceIdx = getSliceIdx(tileDepth, hairDepth);\n\n    // insert into per-slice linked list\n    // WARNING: Both lines below can be slow!\n    let previousPtr: u32 = _setSlicesHeadPtr(p.processorId, pxInTile, sliceIdx, nextSliceDataPtr);\n    _setSliceData(p.processorId, nextSliceDataPtr, color, previousPtr);\n    writtenSliceDataCount += 1u;\n  }\n  CY0 += CC0.B;\n  CY1 += CC1.B;\n  CY2 += CC2.B;\n  CY3 += CC3.B;\n  }\n\n\n  // END\n  return writtenSliceDataCount;\n}\n\nfn getSliceIdx(\n  tileDepth: vec2f,\n  pixelDepth: f32,\n) -> u32 {\n  return getDepthBin(SLICES_PER_PIXEL, tileDepth, pixelDepth);\n}\n\n`;\n", "/**\n * ```\n * forEach pixel in tile:\n *    forEach slice in pixel:\n *        finalColor += sliceColor * (1.0 - finalColor.a)\n * ```\n */\nexport const SHADER_IMPL_REDUCE_HAIR_SLICES = () => /* wgsl */ `\n\nfn reduceHairSlices(\n  processorId: u32,\n  viewportSizeU32: vec2u,\n  dbgSlicesModeMaxSlices: u32,\n  tileBoundsPx: ptr<function, vec4u>\n) -> bool {\n  let isDbgSliceCnt = dbgSlicesModeMaxSlices != 0u;\n  var sliceData: SliceData;\n  var allPixelsDone = true;\n  let boundRectMax = vec2u((*tileBoundsPx).zw);\n  let boundRectMin = vec2u((*tileBoundsPx).xy);\n  // further depth bins will not have to process pixels that they have no chance to affect.\n  var noFinishedPixelsRect = vec4u(*tileBoundsPx);\n\n  for (var y: u32 = boundRectMin.y; y < boundRectMax.y; y += 1u) {\n  for (var x: u32 = boundRectMin.x; x < boundRectMax.x; x += 1u) {\n    let px = vec2u(x, y); // pixel coordinates wrt. viewport\n    let pxInTile: vec2u = vec2u(px - boundRectMin); // pixel coordinates wrt. tile\n\n    var finalColor = _getRasterizerResult(viewportSizeU32, px);\n    var sliceCount = select(0u, u32(finalColor.r * f32(dbgSlicesModeMaxSlices)), isDbgSliceCnt); // debug value\n    \n    // START: ITERATE SLICES (front to back)\n    // TODO [NOW] is it faster if we get start/end values from 'processHairSegment'? ATM it's loop on consts, so might be quite fast. And only 4 iters with current settings..\n    var s: u32 = 0u;\n    for (; s < SLICES_PER_PIXEL; s += 1u) {\n      if (isPixelDone(finalColor) && !isDbgSliceCnt) {\n        // finalColor = vec4f(1., 0., 0., 1.); // dbg: highlight early out\n        break;\n      }\n\n      var requiresSliceHeadClear = false;\n      var slicePtr = _getSlicesHeadPtr(processorId, pxInTile, s);\n      \n      // aggregate colors in this slice\n      while (_getSliceData(processorId, slicePtr, &sliceData)) {\n        requiresSliceHeadClear = true;\n        if (isPixelDone(finalColor)) { break; }\n        slicePtr = sliceData.value[2];\n        sliceCount += 1u;\n        \n        let sliceColor = vec4f(\n          unpack2x16float(sliceData.value[0]),\n          unpack2x16float(sliceData.value[1])\n        );\n        finalColor += sliceColor * (1.0 - finalColor.a);\n      }\n\n      if (requiresSliceHeadClear) {\n        _clearSliceHeadPtr(processorId, pxInTile, s);\n      }\n    } // END: ITERATE SLICES\n    \n    // finish remaining iterations if we \"break;\" early\n    for(; s < SLICES_PER_PIXEL; s += 1u) {\n      _clearSliceHeadPtr(processorId, pxInTile, s);\n    }\n\n    // dbg: color using only head ptrs\n    /*var slicePtr = _getSlicesHeadPtr(processorId, pxInTile, 0u);\n    if (slicePtr != INVALID_SLICE_DATA_PTR) {\n      finalColor.r = 1.0;\n      finalColor.a = 1.0;\n    }*/\n\n    if (!isPixelDone(finalColor)) {\n      allPixelsDone = false;\n      noFinishedPixelsRect.x = min(noFinishedPixelsRect.x, px.x);\n      noFinishedPixelsRect.y = min(noFinishedPixelsRect.y, px.y);\n      noFinishedPixelsRect.z = max(noFinishedPixelsRect.z, px.x);\n      noFinishedPixelsRect.w = max(noFinishedPixelsRect.w, px.y);\n    }\n    \n    // final write\n    if (isDbgSliceCnt) { // debug value\n      let c = saturate(f32(sliceCount) / f32(dbgSlicesModeMaxSlices));\n      finalColor = vec4f(c, 0., 0., 1.0);\n    }\n    _setRasterizerResult(viewportSizeU32, px, finalColor);\n  }}\n\n  (*tileBoundsPx) = noFinishedPixelsRect;\n  allPixelsDone = (allPixelsDone ||\n    noFinishedPixelsRect.x >= noFinishedPixelsRect.z ||\n    noFinishedPixelsRect.y >= noFinishedPixelsRect.w\n  );\n\n  return allPixelsDone;\n}\n\n/** Returns true, if any subsequent hair segments/slices do not matter. */\nfn isPixelDone (finalColor: vec4f) -> bool {\n  return finalColor.a >= ALPHA_CUTOFF;\n}\n`;\n", "import { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_HAIR_TILES_RESULT } from './shared/hairTilesResultBuffer.ts';\nimport { BUFFER_HAIR_TILE_SEGMENTS } from './shared/hairTileSegmentsBuffer.ts';\nimport { BUFFER_HAIR_RASTERIZER_RESULTS } from './shared/hairRasterizerResultBuffer.ts';\nimport { CONFIG } from '../../constants.ts';\nimport { BUFFER_HAIR_SLICES_HEADS } from './shared/hairSliceHeadsBuffer.ts';\nimport { BUFFER_HAIR_SLICES_DATA } from './shared/hairSlicesDataBuffer.ts';\nimport { SHADER_IMPL_PROCESS_HAIR_SEGMENT } from './shaderImpl/processHairSegment.wgsl.ts';\nimport { SHADER_IMPL_REDUCE_HAIR_SLICES } from './shaderImpl/reduceHairSlices.wgsl.ts';\nimport { BUFFER_HAIR_SHADING } from '../../scene/hair/hairShadingBuffer.ts';\nimport { SHADER_TILE_UTILS } from './shaderImpl/tileUtils.wgsl.ts';\nimport { SW_RASTERIZE_HAIR } from './shaderImpl/swRasterizeHair.wgsl.ts';\nimport { BUFFER_HAIR_TANGENTS } from '../../scene/hair/hairTangentsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: CONFIG.hairRender.finePassWorkgroupSizeX,\n  bindings: {\n    renderUniforms: 0,\n    hairData: 1,\n    hairPositions: 2,\n    tilesBuffer: 3,\n    tileSegmentsBuffer: 4,\n    hairSlicesHeads: 5,\n    hairSlicesData: 6,\n    rasterizerResult: 7,\n    depthTexture: 8,\n    hairShading: 9,\n    hairTangents: 10,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\nconst SLICES_PER_PIXEL: u32 = ${CONFIG.hairRender.slicesPerPixel}u;\nconst SLICES_PER_PIXEL_f32: f32 = f32(SLICES_PER_PIXEL);\n// Stop processing slices once we reach opaque color\n// TBH does not help much, it's not where the actuall cost is. Still..\nconst ALPHA_CUTOFF = 0.999;\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${SHADER_TILE_UTILS}\n${SW_RASTERIZE_HAIR}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_POINTS_POSITIONS(b.hairPositions)}\n${BUFFER_HAIR_TANGENTS(b.hairTangents)}\n${BUFFER_HAIR_TILES_RESULT(b.tilesBuffer, 'read')}\n${BUFFER_HAIR_TILE_SEGMENTS(b.tileSegmentsBuffer, 'read')}\n${BUFFER_HAIR_RASTERIZER_RESULTS(b.rasterizerResult, 'read_write')}\n${BUFFER_HAIR_SLICES_HEADS(b.hairSlicesHeads, 'read_write')}\n${BUFFER_HAIR_SLICES_DATA(b.hairSlicesData, 'read_write')}\n${BUFFER_HAIR_SHADING(b.hairShading, 'read')}\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\n\nstruct FineRasterParams {\n  viewModelMat: mat4x4f,\n  projMat: mat4x4f,\n  // START: vec4u\n  strandsCount: u32, // u32's first\n  pointsPerStrand: u32,\n  viewportSizeU32: vec2u,\n  // START: mixed\n  viewportSize: vec2f, // f32's\n  fiberRadius: f32,\n  processorId: u32,\n  dbgSlicesModeMaxSlices: u32,\n}\n\n// Extra code to make this file manageable\n${SHADER_IMPL_PROCESS_HAIR_SEGMENT()}\n${SHADER_IMPL_REDUCE_HAIR_SLICES()}\n\n\n@compute\n@workgroup_size(${c.workgroupSizeX}, 1, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n) {\n  let processorId = global_id.x;\n  let viewportSize: vec2f = _uniforms.viewport.xy;\n  let maxDrawnSegments: u32 = _uniforms.maxDrawnHairSegments;\n  let strandsCount: u32 = _hairData.strandsCount;\n  let pointsPerStrand: u32 = _hairData.pointsPerStrand;\n\n  let params = FineRasterParams(\n    _uniforms.modelViewMat,\n    _uniforms.projMatrix,\n    strandsCount,\n    pointsPerStrand,\n    vec2u(viewportSize),\n    viewportSize,\n    _uniforms.fiberRadius,\n    processorId,\n    getDbgSlicesModeMaxSlices(),\n  );\n\n  // clear memory before starting work\n  _clearSlicesHeadPtrs(processorId);\n  \n  let tileCount2d = getTileCount(params.viewportSizeU32);\n  let tileCount = tileCount2d.x * tileCount2d.y;\n  var tileIdx = _getNextTileIdx();\n\n  while (tileIdx < tileCount) {\n    let tileXY = getTileXY(params.viewportSizeU32, tileIdx);\n    var tileBoundsPx: vec4u = getTileBoundsPx(params.viewportSizeU32, tileXY);\n    \n    for (var depthBin = 0u; depthBin < TILE_DEPTH_BINS_COUNT; depthBin += 1u) {\n      let allPixelsDone = processTile(\n        params,\n        maxDrawnSegments,\n        tileXY,\n        depthBin,\n        &tileBoundsPx\n      );\n      if (allPixelsDone) { break; }\n    }\n\n    // move to next tile\n    tileIdx = _getNextTileIdx();\n  }\n}\n\nfn processTile(\n  p: FineRasterParams,\n  maxDrawnSegments: u32,\n  tileXY: vec2u,\n  depthBin: u32,\n  tileBoundsPx: ptr<function,vec4u>\n) -> bool {\n  let MAX_PROCESSED_SEGMENTS = p.strandsCount * p.pointsPerStrand; // just in case\n  \n  let tileDepth = _getTileDepth(p.viewportSizeU32, tileXY, depthBin);\n  if (tileDepth.y == 0.0) { return false; } // no depth written means empty tile\n  var segmentPtr = _getTileSegmentPtr(p.viewportSizeU32, tileXY, depthBin);\n\n  var segmentData = vec3u(); // [strandIdx, segmentIdx, nextPtr]\n  var processedSegmentCnt = 0u;\n  var sliceDataOffset = 0u;\n\n  // for each segment:\n  //    iterate over tile's pixels and write color to appropriate depth-slice\n  while (processedSegmentCnt < MAX_PROCESSED_SEGMENTS){\n    if (_getTileSegment(maxDrawnSegments, segmentPtr, &segmentData)) {\n      let writtenSliceDataCount = processHairSegment(\n        p,\n        (*tileBoundsPx), tileDepth,\n        sliceDataOffset,\n        segmentData.x, segmentData.y // strandIdx, segmentIdx\n      );\n      sliceDataOffset = sliceDataOffset + writtenSliceDataCount;\n      if (!_hasMoreSliceDataSlots(sliceDataOffset)) { break; }\n\n      // move to next segment\n      processedSegmentCnt = processedSegmentCnt + 1;\n      segmentPtr = segmentData.z;\n    } else {\n      // no more segment data for this tile, break\n      break;\n    }\n  }\n\n  if (sliceDataOffset == 0) {\n    // no pixels were changed. This can happen if depth bin is empty. Move to next depth bin in that case\n    return false;\n  }\n\n  // reduce over slices list and set the final color into result buffer\n  // this also clears the current processor state for next tile\n  // debugColorWholeTile(tileBoundsPx, vec4f(1., 0., 0., 1.));\n  let allPixelsDone = reduceHairSlices(\n    p.processorId,\n    p.viewportSizeU32,\n    p.dbgSlicesModeMaxSlices,\n    tileBoundsPx\n  );\n\n  return allPixelsDone;\n}\n\n\nfn debugColorWholeTile(tileBoundsPx: vec4u, color: vec4f) {\n  let viewportSize: vec2f = _uniforms.viewport.xy;\n  let viewportSizeU32: vec2u = vec2u(viewportSize);\n\n  let boundRectMin = tileBoundsPx.xy;\n  let boundRectMax = tileBoundsPx.zw;\n  \n  for (var y = boundRectMin.y; y < boundRectMax.y; y += 1u) {\n  for (var x = boundRectMin.x; x < boundRectMax.x; x += 1u) {\n    let pos_u32 = vec2u(x, y);\n    _setRasterizerResult(viewportSizeU32, pos_u32, color);\n  }}\n}\n\nfn debugColorPointInTile(tileBoundsPx: vec4u, pos: vec2f, color: vec4f) {\n  let viewportSize: vec2f = _uniforms.viewport.xy;\n  let viewportSizeU32: vec2u = vec2u(viewportSize);\n  let pos_u32 = vec2u(u32(pos.x), u32(pos.y));\n\n  let boundRectMin = tileBoundsPx.xy;\n  let boundRectMax = tileBoundsPx.zw;\n  \n  if (\n    pos_u32.x >= boundRectMin.x && pos_u32.y >= boundRectMin.y &&\n    pos_u32.x <  boundRectMax.x && pos_u32.y <  boundRectMax.y\n  ) {\n    _setRasterizerResult(viewportSizeU32, pos_u32, color);\n  }\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport { Dimensions } from '../../utils/index.ts';\nimport {\n  assertIsGPUTextureView,\n  bindBuffer,\n  getItemsPerThread,\n} from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './hairFinePass.wgsl.ts';\nimport { createHairRasterizerResultsBuffer } from './shared/hairRasterizerResultBuffer.ts';\nimport { createHairSlicesHeadsBuffer } from './shared/hairSliceHeadsBuffer.ts';\nimport { createHairSlicesDataBuffer } from './shared/hairSlicesDataBuffer.ts';\n\nexport class HairFinePass {\n  public static NAME: string = 'HairFinePass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  public hairSlicesHeadsBuffer: GPUBuffer | undefined;\n  public hairSlicesDataBuffer: GPUBuffer;\n  public hairRasterizerResultsBuffer: GPUBuffer = undefined!; // see this.handleViewportResize()\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HairFinePass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(HairFinePass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n\n    this.hairSlicesHeadsBuffer = createHairSlicesHeadsBuffer(device);\n    this.hairSlicesDataBuffer = createHairSlicesDataBuffer(device);\n  }\n\n  /** Clears to 0. We cannot select a number */\n  clearFramebuffer(ctx: PassCtx) {\n    if (this.hairSlicesHeadsBuffer) {\n      ctx.cmdBuf.clearBuffer(\n        this.hairSlicesHeadsBuffer,\n        0,\n        this.hairSlicesHeadsBuffer.size\n      );\n    }\n    ctx.cmdBuf.clearBuffer(\n      this.hairRasterizerResultsBuffer,\n      0,\n      this.hairRasterizerResultsBuffer.size\n    );\n  }\n\n  onViewportResize = (device: GPUDevice, viewportSize: Dimensions) => {\n    this.bindingsCache.clear();\n\n    if (this.hairRasterizerResultsBuffer) {\n      this.hairRasterizerResultsBuffer.destroy();\n    }\n\n    this.hairRasterizerResultsBuffer = createHairRasterizerResultsBuffer(\n      device,\n      viewportSize\n    );\n  };\n\n  cmdRasterizeSlicesHair(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler } = ctx;\n\n    const computePass = cmdBuf.beginComputePass({\n      label: HairFinePass.NAME,\n      timestampWrites: profiler?.createScopeGpu(HairFinePass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(hairObject.name, () =>\n      this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    // dispatch\n    const workgroupsX = getItemsPerThread(\n      CONFIG.hairRender.processorCount,\n      SHADER_PARAMS.workgroupSizeX\n    );\n    // console.log(`${HairFinePass.NAME}.dispatch(${workgroupsX}, 1, 1)`);\n    computePass.dispatchWorkgroups(workgroupsX, 1, 1);\n\n    computePass.end();\n  }\n\n  private createBindings = (ctx: PassCtx, object: HairObject): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      depthTexture,\n      hairTilesBuffer,\n      hairTileSegmentsBuffer,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(depthTexture);\n\n    const entries: GPUBindGroupEntry[] = [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n      bindBuffer(b.tilesBuffer, hairTilesBuffer),\n      bindBuffer(b.tileSegmentsBuffer, hairTileSegmentsBuffer),\n      bindBuffer(b.hairSlicesData, this.hairSlicesDataBuffer),\n      bindBuffer(b.rasterizerResult, this.hairRasterizerResultsBuffer),\n      object.bindHairData(b.hairData),\n      object.bindPointsPositions(b.hairPositions),\n      object.bindTangents(b.hairTangents),\n      object.bindShading(b.hairShading),\n      { binding: b.depthTexture, resource: depthTexture },\n    ];\n\n    // no needed if using local memory\n    if (this.hairSlicesHeadsBuffer) {\n      entries.push(bindBuffer(b.hairSlicesHeads, this.hairSlicesHeadsBuffer));\n    }\n\n    return assignResourcesToBindings2(\n      HairFinePass,\n      object.name,\n      device,\n      this.pipeline,\n      entries\n    );\n  };\n}\n", "/**\n * # Marschner\n *\n * - [Marschner03] http://www.graphics.stanford.edu/papers/hair/hair-sg03final.pdf\n * - [Karis16] https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf\n * - [Chiang16] https://benedikt-bitterli.me/pchfm/pchfm.pdf\n * - [Tafuri19] https://advances.realtimerendering.com/s2019/hair_presentation_final.pdf\n * - [Sadeghi10] http://graphics.ucsd.edu/~henrik/papers/artist_hair.pdf\n * - GPU gems chapter 23\n *\n * Additional series of posts by Voicu Alexandru\u2013Teodor:\n * - https://hairrendering.wordpress.com/2010/06/26/marschner-shader-part-i/\n * - https://hairrendering.wordpress.com/2010/06/27/marschner-shader-part-ii/\n * - https://hairrendering.wordpress.com/2010/07/05/marschner-shader-part-iii/\n *\n */\nexport const SHADER_CODE_MARSCHNER = /* wgsl */ `\n\nstruct MarschnerParams {\n  // https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=44\n  baseColor: vec3f,\n  // scales the R term\n  specular: f32,\n  // shift - based on the tilt of the cuticle scales\n  // \\alpha_R = -2*s; \\alpha_{TT} = s; \\alpha_{TRT} = 4 * s\n  weightTT: f32,\n  weightTRT: f32,\n  shift: f32,\n  // hair roughness\n  // \\beta_R = r^2; \\beta_{TT} = 0.5 * (r^2); \\beta_{TRT} = 2 * (r^2)\n  roughness: f32\n}\n\nfn hairSpecularMarschner(\n  p: MarschnerParams,\n  toLight: vec3f, // L\n  toCamera: vec3f, // V\n  tangent: vec3f,\n) -> vec3f {\n  // from [Marschner03]\n  // w_i - direction of illumination (w Illumination/Incoming)\n  // w_r - direction in which scattered light is being computed (w Result)\n  // theta_d - difference angle (theta_r \u2212 theta_i) / 2\n  // There is also 5.2.3 'Approximation for eccentricity' if you are not as lazy as me (not implemented)\n\n\n  // For derivation we are following GPU gems chapter 23.\n  // dot() is used for sin() value. Interesting, but depends on which angle we are calculating the value for?\n  let sin_theta_i = dot(tangent, toLight);\n  let sin_theta_r = dot(tangent, toCamera);\n  // TODO [MEDIUM] does sign of cos matter for us?\n\tlet cos_theta_i = sqrt(max(0., 1. - sin_theta_i * sin_theta_i)); // Pythagorean Identity\n\tlet cos_theta_r = sqrt(max(0., 1. - sin_theta_r * sin_theta_r));\n  // Cosine-difference formula: cos(\u03B1\u2212\u03B2) = cos\u03B1 \u22C5 cos\u03B2 + sin\u03B1 \u22C5 sin\u03B2 \n\tlet cos_theta_d_fullAngle = cos_theta_i * cos_theta_r + sin_theta_i * sin_theta_r;\n  let cos_theta_d = cosOfHalfAngle(cos_theta_d_fullAngle); // theta_d is half angle, see above\n  // GPU gems chapter 23, page 374\n  let lightPerp = toLight - sin_theta_i * tangent;\n\tlet cameraPerp = toCamera - sin_theta_r * tangent;\n  let cos_phi = dot(lightPerp, cameraPerp) * inverseSqrt(length(lightPerp) * length(cameraPerp) + 1e-4);\n  let cos_half_phi = cosOfHalfAngle(cos_phi);\n\n  // For each lobe (R, TT, TRT):\n  // M_p(theta_i, theta_r) - longitudinal scattering function\n  // N_p(theta_i, theta_r, phi) - azimuthal scattering function\n\n  // R: The light ray **REFLECTS** off the front of the hair fiber.\n  // Not much color (smth. like specular), as the light does not penetrate strand.\n  var alpha = -2.0 * p.shift;\n  var beta = p.roughness * p.roughness;\n  let M_r = longitudinalScattering_Gaussian(sin_theta_i, sin_theta_r, alpha, beta);\n  let N_r = azimuthalScattering_R(cos_theta_d, cos_half_phi);\n  // TT: The light ray **TRANSMITS THROUGH** the front of the fiber,\n  // passes through the interior which colors it due to absorption\n  // and then transmits through the other side.\n  // Some color. Light goes through the strand once.\n  alpha = p.shift;\n  beta = 0.5 * p.roughness * p.roughness;\n  let M_tt = longitudinalScattering_Gaussian(sin_theta_i, sin_theta_r, alpha, beta);\n  let N_tt = azimuthalScattering_TT(p.baseColor, cos_theta_d, cos_phi, cos_half_phi);\n  // TRT: The light ray transmits through the front of the fiber,\n  // 1. **PASSES THROUGH** the colored interior.\n  // 2. **REFLECTS** off the opposite side.\n  // 3. **PASSES THROUGH** the interior again and transmits out the front.\n  // A LOT of color. Light goes through the strand twice.\n  alpha = 4.0 * p.shift;\n  beta = 2.0 * p.roughness * p.roughness;\n  let M_trt = longitudinalScattering_Gaussian(sin_theta_i, sin_theta_r, alpha, beta);\n  let N_trt = azimuthalScattering_TRT(p.baseColor, cos_theta_d, cos_phi);\n\n  return (p.specular * M_r * N_r) + (p.weightTT * M_tt * N_tt) + (p.weightTRT * M_trt * N_trt);\n  // DBG:\n  // let r = (specular * M_r * N_r);\n  // return vec3f(r, 0.0, 0.0); // dbg: r\n  // return M_tt * N_tt; // dbg: tt\n  // return M_trt * N_trt; // dbg: trt\n}\n\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=20 */\nfn cosOfHalfAngle(cosAngle: f32) -> f32 {\n  return sqrt(saturate(0.5 + 0.5 * cosAngle));\n}\n\nconst SQRT_TWO_PI: f32 = ${Math.sqrt(2 * Math.PI)};\n/** Index of refraction for human hair */\nconst ETA = 1.55;\nconst HAIR_F0 = (1. - ETA) * (1. - ETA) / ((1. + ETA) * (1. + ETA));\n\n// Beta is based on the roughness of the fiber\n// Alpha is based on the tilt of the cuticle scales\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=18 */\nfn longitudinalScattering_Gaussian(\n  sin_theta_i: f32, sin_theta_r: f32,\n  alpha: f32, beta: f32\n) -> f32 {\n  let a = sin_theta_i + sin_theta_r - alpha; // sin(theta_i) + sin(theta_r) - alpha;\n  let b = -(a * a) / (2.0 * beta * beta);\n  return exp(b) / (beta * SQRT_TWO_PI);\n}\n\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=20 */\nfn azimuthalScattering_R(cos_theta_d: f32, cos_half_phi: f32) -> f32 {\n  let attenuation = FresnelSchlick1(cos_theta_d, HAIR_F0);\n  return 0.25 * cos_half_phi * attenuation;\n}\n\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=23 */\nfn azimuthalScattering_TT(\n  baseColor: vec3f,\n  cos_theta_d: f32, \n  cos_phi: f32,\n  cos_half_phi: f32,\n) -> vec3f {\n  let eta_prime = (1.19 / cos_theta_d) + (0.36 * cos_theta_d); // slide 26\n  let a = 1.0 / eta_prime; // slide 25, should be an alpha, but 'a' is less confusing\n  let h_TT = (1.0 + a * (0.6 - 0.8 * cos_phi)) * cos_half_phi; // slide 25\n\n  // slide 28: absorption term\n  let T_powNum = sqrt(1.0 - h_TT * h_TT * a * a);\n  let T_powDenum = 2.0 * cos_theta_d;\n  let T_TT = pow(baseColor, vec3f(T_powNum / T_powDenum));\n  // slide 29: distribution\n  let D_TT = exp(-3.65 * cos_phi - 3.98);\n  // slide 25\n  let f_angle = cos_theta_d * sqrt(saturate(1.0 - h_TT * h_TT));\n\tlet f = FresnelSchlick1(f_angle, HAIR_F0);\n\tlet f_TT = (1.0 - f) * (1.0 - f); // there is also F(...)^{p-1}, but we can skip\n\t\n\treturn f_TT * T_TT * D_TT; // slide 23\n}\n\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=32 */\nfn azimuthalScattering_TRT(\n  baseColor: vec3f,\n  cos_theta_d: f32, \n  cos_phi: f32,\n) -> vec3f {\n  // slide 32: absorption term\n  let T_TRT = pow(baseColor, vec3f(0.8 / cos_theta_d));\n  // slide 32: distribution\n  let D_TRT = exp(17.0 * cos_phi - 16.78);\n  // slide 32\n  // const h_TRT = ${Math.sqrt(3) / 2.0}; // slide 32\n  // const f_angleMod_TRT = Math.sqrt(1.0 - h_TRT * h_TRT); // similar as for f_angle in TT\n  let f_angle = cos_theta_d * 0.5; // substituted value from f_angleMod_TRT. It's literary 'Math.sqrt(1 - 3/4)'\n\tlet f = FresnelSchlick1(f_angle, HAIR_F0);\n  let f_TRT = (1.0 - f) * (1.0 - f) * f; // las multiply by 'f' cause F(...)^{p-1}\n\t\n  return f_TRT * T_TRT * D_TRT; // like slide 23\n}\n\n`;\n", "import { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { CONFIG } from '../../constants.ts';\nimport { BUFFER_HAIR_SHADING } from '../../scene/hair/hairShadingBuffer.ts';\nimport { SNIPPET_SHADING_PBR_UTILS } from '../_shaderSnippets/pbr.wgsl.ts';\nimport { SHADER_CODE_MARSCHNER } from './marschner.wgsl.ts';\nimport { BUFFER_HAIR_TANGENTS } from '../../scene/hair/hairTangentsBuffer.ts';\nimport { SNIPPET_NOISE } from '../_shaderSnippets/noise.wgsl.ts';\nimport { SAMPLE_SHADOW_MAP } from '../shadowMapPass/shared/sampleShadows.wgsl.ts';\nimport { TEXTURE_AO } from '../aoPass/shared/textureAo.wgsl.ts';\nimport { LINEAR_DEPTH } from '../_shaderSnippets/linearDepth.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: 1, // TODO [LOW] adjust\n  workgroupSizeY: CONFIG.hairRender.shadingPoints,\n  bindings: {\n    renderUniforms: 0,\n    hairData: 1,\n    hairPositions: 2,\n    hairTangents: 3,\n    hairShading: 4,\n    shadowMapTexture: 5,\n    shadowMapSampler: 6,\n    aoTexture: 7,\n    depthTexture: 8,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${SNIPPET_SHADING_PBR_UTILS}\n${SHADER_CODE_MARSCHNER}\n${SNIPPET_NOISE}\n${SAMPLE_SHADOW_MAP({\n  bindingTexture: b.shadowMapTexture,\n  bindingSampler: b.shadowMapSampler,\n})}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_POINTS_POSITIONS(b.hairPositions)}\n${BUFFER_HAIR_TANGENTS(b.hairTangents)}\n${BUFFER_HAIR_SHADING(b.hairShading, 'read_write')}\n${TEXTURE_AO(b.aoTexture)}\n${LINEAR_DEPTH}\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\n\n@compute\n@workgroup_size(${c.workgroupSizeX}, ${c.workgroupSizeY}, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n) {\n  let strandIdx = global_id.x;\n  let shadingPointId = global_id.y;\n  let SHADING_POINTS_f32 = f32(SHADING_POINTS);\n  let cameraPositionWS = _uniforms.cameraPosition.xyz;\n  let viewport = vec2f(_uniforms.viewport.xy);\n  let modelMatrix = _uniforms.modelMatrix;\n  let vpMatrix = _uniforms.vpMatrix;\n  let pointsPerStrand = _hairData.pointsPerStrand;\n\n  var color = vec4f(0., 0., 0., 1.);\n\n  // 0.0 at root, 1.0 at tip\n  let t = f32(shadingPointId) / SHADING_POINTS_f32;\n  // dbg: 't': // red at root, green at tip\n  // color.r = 1.0 - t;\n  // color.g = t;\n\n  var segmentIndices: vec2u;\n  let tInSegment = remapToIndices(pointsPerStrand, t, &segmentIndices);\n  // color.r = select(1., 0., tInSegment > 0.5); // dbg: half of the segment is black, half is red\n  // color.r = select(1., 0., (segmentIndices.x & 1) == 1); // dbg: alternate red-black segments\n\n  let segment0_obj: vec3f = _getHairPointPosition(pointsPerStrand, strandIdx, segmentIndices.x).xyz;\n  let segment1_obj: vec3f = _getHairPointPosition(pointsPerStrand, strandIdx, segmentIndices.y).xyz;\n  let tangent0_obj = normalize(segment1_obj - segment0_obj);\n  let tangent1_obj = _getHairTangent(pointsPerStrand, strandIdx, segmentIndices.y).xyz;\n  let positionOBJ = mix(segment0_obj, segment1_obj, tInSegment);\n  let tangentOBJ = mix(tangent0_obj, tangent1_obj, tInSegment);\n  let positionWS = modelMatrix * vec4f(positionOBJ, 1.0);\n  let tangentWS = modelMatrix * vec4f(tangentOBJ, 1.0);\n  let positionProj = projectVertex(vpMatrix, positionWS);\n  let positionPx_0_1 = vec2f( // range: [0, 1]\n    (positionProj.x * 0.5 + 0.5),\n    (positionProj.y * 0.5 + 0.5),\n  );\n  // let positionPx = viewport * positionPx_0_1; // range: [0.,  viewportPixels.xy]\n  let positionTexSamplePx = viewport * vec2f(positionPx_0_1.x, 1.0 - positionPx_0_1.y); // range: [0.,  viewportPixels.xy]\n\n\n  // base color\n  let baseColor0 = _uniforms.hairMaterial.color0;\n  let baseColor1 = _uniforms.hairMaterial.color1;\n  var baseColor = mix(baseColor0, baseColor1, t);\n  let randStrandColor = randomRGB(strandIdx, 1.0);\n  // let randStrandColor = vec3f(0., 1., 0.);\n  baseColor = mix(baseColor, randStrandColor, _uniforms.hairMaterial.colorRng);\n  let rngBrightness = fract(f32(strandIdx) / 255.0);\n  baseColor = mix(baseColor, baseColor * rngBrightness, _uniforms.hairMaterial.lumaRng);\n  // baseColor = vec3f(rngBrightness);\n\n  let toCamera: vec3f = normalize(cameraPositionWS - positionWS.xyz);\n  let params = MarschnerParams(\n    baseColor,\n    _uniforms.hairMaterial.specular, // (weight for .r)\n    _uniforms.hairMaterial.weightTT,\n    _uniforms.hairMaterial.weightTRT,\n    _uniforms.hairMaterial.shift,\n    _uniforms.hairMaterial.roughness,\n  );\n\n  // shadow\n  let maxShadowStr = _uniforms.hairMaterial.shadows;\n  let mvpShadowSourceMatrix = _uniforms.shadows.sourceMVP_Matrix;\n  var shadow = getShadow(\n    mvpShadowSourceMatrix,\n    positionWS,\n    tangentWS.xyz,\n  );\n  shadow = clamp(shadow, 1.0 - maxShadowStr, 1.0);\n  // baseColor = vec3f(shadow); // dbg\n\n  // ao\n  var ao = sampleAo(vec2f(viewport.xy), positionTexSamplePx);\n  ao = 1.0 - mix(1.0, ao, _uniforms.ao.strength); // 0-unoccluded, 1-occluded\n  // baseColor = vec3f(ao); // dbg\n\n  // attenuation\n  let attenuation = getAttenuation(\n    positionProj,\n    positionTexSamplePx,\n    _uniforms.hairMaterial.attenuation,\n  );\n  ao = saturate(ao + attenuation);\n\n  \n  // start light/material calc.\n  let ambient = _uniforms.lightAmbient.rgb * _uniforms.lightAmbient.a;\n  var radianceSum = vec3(0.0);\n\n  radianceSum += hairShading(params, _uniforms.light0, toCamera, tangentWS, positionWS, shadow, ao);\n  radianceSum += hairShading(params, _uniforms.light1, toCamera, tangentWS, positionWS, shadow, ao);\n  radianceSum += hairShading(params, _uniforms.light2, toCamera, tangentWS, positionWS, shadow, ao);\n\n  // thin-tip alpha.\n  let alpha = select(1.0, 0.0, shadingPointId >= SHADING_POINTS - 1);\n  color = vec4f(radianceSum, alpha); // TODO [IGNORE] add material.alpha [0.8 .. 1.0]?\n  _setShadingPoint(strandIdx, shadingPointId, color);\n  // _setShadingPoint(strandIdx, shadingPointId, vec4f(baseColor, 1.0)); // dbg\n}\n\nfn hairShading(\n  p: MarschnerParams,\n  light: Light,\n  toCamera: vec3f,\n  tangentWS: vec4f,\n  positionWS: vec4f,\n  shadow: f32,\n  aoTerm: f32, // 0-unoccluded, 1-occluded\n) -> vec3f {\n  let toLight: vec3f = normalize(light.position.xyz - positionWS.xyz);\n\n  let diffuse = KajiyaKayDiffuse(p.baseColor, toLight, tangentWS.xyz);\n  let multipleScatter = fakeMultipleScattering(\n    toCamera,\n    toLight,\n    tangentWS,\n    p.baseColor,\n    shadow\n  );\n  var diffuseTotal = diffuse * multipleScatter * saturate(dot(tangentWS.xyz, toLight));\n  // diffuseTotal *= shadow;\n  // return diffuseTotal;\n\n  let marschnerSpec = hairSpecularMarschner(\n    p,\n    toLight,\n    toCamera,\n    tangentWS.xyz,\n  );\n\n  // TODO [IGNORE] better tune diffuse-specular addition, see:\n  //      https://www.fxguide.com/fxfeatured/pixars-renderman-marschner-hair (last section)\n  let brdfFinal = diffuseTotal + marschnerSpec;\n  // let brdfFinal = pbr_mixDiffuseAndSpecular(material, lambert, specular, F);\n  \n  let lightAttenuation = 1.0; // hardcoded for this demo\n  let radiance = lightAttenuation * light.colorAndEnergy.rgb * light.colorAndEnergy.a; // incoming color from light\n\n  return brdfFinal * radiance * (1.0 - aoTerm);\n}\n\n\n/** https://web.engr.oregonstate.edu/~mjb/cs557/Projects/Papers/HairRendering.pdf#page=12 */\nfn KajiyaKayDiffuse(baseColor: vec3f, toLight: vec3f, tangent: vec3f) -> vec3f {\n  // diffuse lighting: the lerp shifts the shadow boundary for a softer look\n  let diffuse = mix(0.25, 1.0, dot(tangent, toLight));\n  return diffuse * baseColor;\n}\n\n/** https://blog.selfshadow.com/publications/s2016-shading-course/karis/s2016_pbs_epic_hair.pdf#page=39 */\nfn fakeMultipleScattering(\n  toCamera: vec3f,\n  toLight: vec3f,\n  tangentWS: vec4f,\n  baseColor: vec3f,\n  shadow: f32,\n) -> vec3f {\n  let fakeNormal: vec3f = normalize(toCamera - tangentWS.xyz * dot(toCamera, tangentWS.xyz));\n\n  // term 2\n  let NoL = saturate(dot(fakeNormal, toLight));\n  let diffuseScatter = (NoL + 1.0) / (4.0 * PI);\n  // term 3\n  let luma = toLuma_fromLinear(baseColor);\n  let tint: vec3f = pow(baseColor / luma, vec3f(1. - shadow));\n\n  // combine\n  return sqrt(baseColor) * diffuseScatter * tint;\n}\n\nfn getShadow(\n  mvpShadowSourceMatrix: mat4x4f,\n  positionWS: vec4f,\n  normalWS: vec3f,\n) -> f32 {\n  let shadowSourcePositionWS = _uniforms.shadows.sourcePosition.xyz;\n  let positionShadowSpace = projectToShadowSpace(\n    mvpShadowSourceMatrix, positionWS\n  );\n  return 1.0 - calculateDirectionalShadow(\n    _uniforms.shadows.usePCSS > 0u,\n    shadowSourcePositionWS,\n    positionWS.xyz,\n    normalWS,\n    positionShadowSpace,\n    _uniforms.shadows.PCF_Radius,\n    _uniforms.shadows.bias\n  );\n}\n\n/**\n * Fake attenuation mimicking https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law\n */\nfn getAttenuation(\n  positionProj: vec3f,\n  positionTexSamplePx: vec2f,\n  attenuationFactor: f32,\n) -> f32 {\n  let myDepth = linearizeDepth(positionProj.z); // [zNear, zFar]\n  let zBufferDepthProj = textureLoad(_depthTexture, vec2u(positionTexSamplePx), 0);\n  let zBufferDepth = linearizeDepth(zBufferDepthProj); // [zNear, zFar]\n  let depthDiff = abs(myDepth - zBufferDepth); // small value means near front. Bigger values further back\n  // If you want, you can call exp() if you want. Not sure this fake impl is \"standarized\". But it looks nice.\n  return depthDiff * attenuationFactor;\n\n  // dbg\n  // baseColor = vec3f(depthDiff * 10.0); // dbg\n  // var c: f32; let rescale = vec2f(0.002, 0.01); // dbg\n  // c = depthDiff * 10.0;\n  // c = mapRange(rescale.x, rescale.y, 0., 1., myDepth / (100.0 - 0.1));\n  // c = mapRange(rescale.x, rescale.y, 0., 1., zBufferDepth / (100.0 - 0.1));\n  // c = positionPx.y / viewport.y;\n  // c = mapRange(.2, .4, 0., 1., c);\n  // c = select(0., 1., c > .5);\n  // baseColor = vec3f(c); // dbg\n  // baseColor = vec3f(attenuation); // dbg\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport {\n  assertIsGPUTextureView,\n  getItemsPerThread,\n} from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './hairShadingPass.wgsl.ts';\n\nexport class HairShadingPass {\n  public static NAME: string = 'HairShadingPass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HairShadingPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(HairShadingPass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  onViewportResize = () => {\n    this.bindingsCache.clear();\n  };\n\n  cmdComputeShadingPoints(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler } = ctx;\n\n    const computePass = cmdBuf.beginComputePass({\n      label: HairShadingPass.NAME,\n      timestampWrites: profiler?.createScopeGpu(HairShadingPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(hairObject.name, () =>\n      this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    // dispatch\n    const workgroupsX = getItemsPerThread(\n      hairObject.strandsCount,\n      SHADER_PARAMS.workgroupSizeX\n    );\n    const workgroupsY = getItemsPerThread(\n      CONFIG.hairRender.shadingPoints,\n      SHADER_PARAMS.workgroupSizeY\n    );\n    // console.log(`${HairShadingPass.NAME}.dispatch(${workgroupsX}, ${workgroupsY}, 1)`); // prettier-ignore\n    computePass.dispatchWorkgroups(workgroupsX, workgroupsY, 1);\n\n    computePass.end();\n  }\n\n  private createBindings = (ctx: PassCtx, object: HairObject): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      shadowDepthTexture,\n      shadowMapSampler,\n      depthTexture,\n      aoTexture,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(depthTexture);\n\n    return assignResourcesToBindings2(\n      HairShadingPass,\n      object.name,\n      device,\n      this.pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        object.bindHairData(b.hairData),\n        object.bindPointsPositions(b.hairPositions),\n        object.bindTangents(b.hairTangents),\n        object.bindShading(b.hairShading),\n        { binding: b.shadowMapTexture, resource: shadowDepthTexture },\n        { binding: b.shadowMapSampler, resource: shadowMapSampler },\n        { binding: b.aoTexture, resource: aoTexture },\n        { binding: b.depthTexture, resource: depthTexture },\n      ]\n    );\n  };\n}\n", "import { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n\n@vertex\nfn main_vs(\n  @location(0) inWorldPos : vec3f,\n) -> @builtin(position) vec4f {\n  let mvpMatrix = _uniforms.shadows.sourceMVP_Matrix;\n  return mvpMatrix * vec4<f32>(inWorldPos.xyz, 1.0);\n}\n\n\n@fragment\nfn main_fs() -> @location(0) vec4<f32> {\n  return vec4(0.0);\n}\n`;\n", "import { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { BUFFER_HAIR_TANGENTS } from '../../scene/hair/hairTangentsBuffer.ts';\nimport { HW_RASTERIZE_HAIR } from '../hwHair/shaderImpl/hwRasterizeHair.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    hairPositions: 1,\n    hairTangents: 2,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///\n/// We are using hardware rasterizer as it's less hassle than software one\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.NORMALS_UTILS}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${HW_RASTERIZE_HAIR}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${BUFFER_HAIR_POINTS_POSITIONS(b.hairPositions)}\n${BUFFER_HAIR_TANGENTS(b.hairTangents)}\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) inVertexIndex : u32\n) -> @builtin(position) vec4f {\n  let hwRasterParams = HwHairRasterizeParams(\n    _uniforms.shadows.sourceModelViewMat,\n    _uniforms.shadows.sourceProjMatrix,\n    getShadowFiberRadius(),\n    inVertexIndex\n  );\n  let hwRasterResult = hwRasterizeHair(hwRasterParams);\n\n  return hwRasterResult.position;\n}\n\n\n@fragment\nfn main_fs() -> @location(0) vec4<f32> {\n  return vec4(0.0);\n}\n`;\n", "import { CONFIG, VERTS_IN_TRIANGLE } from '../../constants.ts';\nimport { GPUMesh, VERTEX_ATTRIBUTE_POSITION } from '../../scene/gpuMesh.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n  useDepthStencilAttachment,\n  PIPELINE_DEPTH_ON,\n  assignResourcesToBindings,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { HwHairPass } from '../hwHair/hwHairPass.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport * as SHADER_MESHES from './shadowMapPass.wgsl.ts';\nimport * as SHADER_HAIR from './shadowMapHairPass.wgsl.ts';\nimport { createShadowSampler } from './shared/sampleShadows.wgsl.ts';\n\n/** https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/webfx/passes/ShadowPass.ts */\nexport class ShadowMapPass {\n  public static NAME: string = 'ShadowMapPass';\n\n  private readonly pipelineMeshes: GPURenderPipeline;\n  private readonly pipelineHair: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n  public readonly shadowMapSampler: GPUSampler;\n  // render targets:\n  private readonly shadowDepthTexture: GPUTexture;\n  public readonly shadowDepthTextureView: GPUTextureView;\n\n  constructor(device: GPUDevice) {\n    this.shadowMapSampler = createShadowSampler(device);\n\n    // meshes\n    const shaderModuleMeshes = device.createShaderModule({\n      label: labelShader(ShadowMapPass),\n      code: SHADER_MESHES.SHADER_CODE(),\n    });\n    this.pipelineMeshes = device.createRenderPipeline({\n      label: labelPipeline(ShadowMapPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModuleMeshes,\n        entryPoint: 'main_vs',\n        buffers: [VERTEX_ATTRIBUTE_POSITION],\n      },\n      fragment: {\n        module: shaderModuleMeshes,\n        entryPoint: 'main_fs',\n        targets: [],\n      },\n      primitive: {\n        ...PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n        cullMode: 'none', // see https://docs.microsoft.com/en-us/windows/desktop/DxTechArts/common-techniques-to-improve-shadow-depth-maps#back-face-and-front-face\n      },\n      depthStencil: {\n        ...PIPELINE_DEPTH_ON,\n        format: CONFIG.shadows.depthFormat,\n      },\n    });\n\n    // hair\n    const shaderModuleHair = device.createShaderModule({\n      label: labelShader(ShadowMapPass),\n      code: SHADER_HAIR.SHADER_CODE(),\n    });\n    const pipelineDesc = HwHairPass.createPipelineDesc(shaderModuleHair);\n    this.pipelineHair = device.createRenderPipeline(pipelineDesc);\n\n    // render targets\n    const cfg = CONFIG.shadows;\n    this.shadowDepthTexture = device.createTexture({\n      label: `shadowmap-depth-texture`,\n      size: [cfg.textureSize, cfg.textureSize, 1],\n      format: cfg.depthFormat,\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    this.shadowDepthTextureView = this.shadowDepthTexture.createView();\n  }\n\n  cmdUpdateShadowMap(ctx: PassCtx) {\n    const { cmdBuf, profiler, shadowDepthTexture, scene } = ctx;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/GPUCommandEncoder/beginRenderPass\n    const renderPass = cmdBuf.beginRenderPass({\n      label: ShadowMapPass.NAME,\n      colorAttachments: [],\n      depthStencilAttachment: useDepthStencilAttachment(\n        shadowDepthTexture,\n        'clear'\n      ),\n      timestampWrites: profiler?.createScopeGpu(ShadowMapPass.NAME),\n    });\n\n    // render meshes\n    renderPass.setPipeline(this.pipelineMeshes);\n    let bindings = this.bindingsCache.getBindings('meshes', () =>\n      this.createBindingsMeshes(ctx)\n    );\n    renderPass.setBindGroup(0, bindings);\n    for (const object of scene.objects) {\n      this.renderMesh(renderPass, object);\n    }\n\n    // render hair\n    const hairObject = scene.hairObject;\n    renderPass.setPipeline(this.pipelineHair);\n    bindings = this.bindingsCache.getBindings(`hair-${hairObject.name}`, () =>\n      this.createBindingsHair(ctx, hairObject)\n    );\n    renderPass.setBindGroup(0, bindings);\n    HwHairPass.cmdRenderHair(renderPass, hairObject);\n\n    // fin\n    renderPass.end();\n  }\n\n  private renderMesh(renderPass: GPURenderPassEncoder, object: GPUMesh) {\n    if (object.isColliderPreview) {\n      return;\n    }\n    renderPass.setVertexBuffer(0, object.positionsBuffer);\n    renderPass.setIndexBuffer(object.indexBuffer, 'uint32');\n\n    const vertexCount = object.triangleCount * VERTS_IN_TRIANGLE;\n    renderPass.drawIndexed(\n      vertexCount,\n      1, // instance count\n      0, // first index\n      0, // base vertex\n      0 // first instance\n    );\n  }\n\n  private createBindingsMeshes = ({\n    device,\n    globalUniforms,\n  }: PassCtx): GPUBindGroup => {\n    const b = SHADER_MESHES.SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(\n      ShadowMapPass,\n      device,\n      this.pipelineMeshes,\n      [globalUniforms.createBindingDesc(b.renderUniforms)]\n    );\n  };\n\n  private createBindingsHair = (\n    { device, globalUniforms }: PassCtx,\n    object: HairObject\n  ): GPUBindGroup => {\n    const b = SHADER_HAIR.SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings2(\n      HwHairPass,\n      object.name,\n      device,\n      this.pipelineHair,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        object.bindPointsPositions(b.hairPositions),\n        object.bindTangents(b.hairTangents),\n      ]\n    );\n  };\n}\n", "import { CONFIG } from '../../constants.ts';\nimport { dgr2rad } from '../../utils/index.ts';\n\nconst CAMERA = CONFIG.camera;\n\nconst VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA =\n  2.0 * Math.tan(dgr2rad(CAMERA.projection.fovDgr) * 0.5); // 0.5358983848622454\n// const clipInfoZ = 720 / VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA; // 1343.5382907247958\n// console.log({ VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA, clipInfoZ });\n\n/*\nhttps://github.com/asylum2010/Asylum_Tutorials/blob/master/ShaderTutors/54_GTAO/\nhttps://github.com/gkjohnson/threejs-sandbox/blob/master/gtaoPass/src/GTAOShader.js\n*/\nexport const GTAO_SNIPPET = /* wgsl */ `\n\nconst Z_FAR: f32 = ${CAMERA.projection.far};\nconst Z_NEAR: f32 = ${CAMERA.projection.near};\n// used to calculate distance from camera to far plane in pixel-ish space\n// const VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA: f32 =  ${VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA};\n\nfn reprojectPositionToVS(\n  projMatrixInv: mat4x4f,\n  viewport: vec2f,\n  positionPx: vec2f\n) -> vec3f {\n  // depth\n  let depth: f32 = textureLoad(_depthTexture, vec2u(positionPx), 0);\n\n  // get the projected position from pixel coords\n  let posXY_0_1 = positionPx / viewport; // XY position in range [0 .. 1]\n  let posXY_neg1_1 = posXY_0_1 * 2.0 - 1.0; // XY position in range [-1 .. 1]\n  let posProj = vec4f(posXY_neg1_1, depth, 1.0);\n  \n  // reproject to view space\n  var result = projectVertex(projMatrixInv, posProj);\n  result.z = linearizeDepth(depth); // range: [zNear, Z_FAR]\n  return result;\n}\n\nfn gtao(\n  projMatrixInv: mat4x4f,\n  viewMatrix: mat4x4f,\n  /** FULLRES viewport size. If AO is half res, this parameter ignores this. */\n  viewport: vec2f,\n  /** Position in pixels for normal and depth textures (FULLRES). If AO is half res, this parameter ignores this. */\n  positionPx: vec2f,\n  normalWS: vec3f,\n) -> f32 {\n  let params = _uniforms.ao;\n\n  let positionVS: vec3f = reprojectPositionToVS(projMatrixInv, viewport, positionPx);\n  var normalVS: vec3f = (viewMatrix * vec4f(normalWS, 1.)).xyz;\n  // calculation uses left handed system\n  normalVS.z = -normalVS.z;\n  \n  let toCamera: vec3f\t= normalize(-positionVS.xyz);\n  \n  // test for background\n  if (positionVS.z >= (0.999 * Z_FAR)) { return 0.0; } // not perfect, but close enough?\n  // return 1.0; // dbg: bg test\n\n  // scale radius with distance. I left orignal code (commented), but we can do it simplier and good enough\n  // clipInfoZ := distance from camera where 1px == 1 view space unit.\n  // opengl multiplies by 0.5 cause [-1, 1] depth. WebGPU has [0, 1].\n  // let clipInfoZ = viewport.y / VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA; // 1343.5\n  // var radius = params.radius * (clipInfoZ / positionVS.z);\n  // radius = max(f32(params.numSteps), radius);\n  let radius = max(f32(params.numSteps), params.radius * (positionVS.z / Z_FAR));\n  // return radius / (f32(params.numSteps));\n  \n  let stepSize = radius / f32(params.numSteps);\n  var ao = 0.0;\n  \n  // Rotation jitter approach from\n  // https://github.com/MaxwellGengYF/Unity-Ground-Truth-Ambient-Occlusion/blob/9cc30e0f31eb950a994c71866d79b2798d1c508e/Shaders/GTAO_Common.cginc#L152-L155\n  let rotJitterOffset = PI * fract(52.9829189 * fract(dot(positionPx, vec2(0.06711056, 0.00583715))));\n  let jitterMod = (positionPx.x + positionPx.y) * 0.25;\n  let radiusJitterOffset = fract(jitterMod) * stepSize * 0.25;\n  \n  \n  for (var i = 0u; i < params.numDirections; i++) {\n    var phi = f32(i) * (PI / f32(params.numDirections)) + params.directionOffset * PI;\n    phi += rotJitterOffset;\n    \n    var currStep = 1.0 + 0.25 * stepSize; // * STEP_OFFSET;\n    currStep += radiusJitterOffset;\n    \n    let dir = vec3(cos(phi), sin(phi), 0.0); // sample direction in pixel space\n    var horizons = vec2(-1.0);\n    \n    // calculate horizon angles\n    for (var j = 0u; j < params.numSteps; j++) {\n      let offset = round_2f(dir.xy * currStep);\n\n      // h1\n      var s = reprojectPositionToVS(projMatrixInv, viewport, positionPx + offset); // sample point\n      var ws = s.xyz - positionVS.xyz; // from fragment to sample point\n      var dist2 = length(ws); // distance between fragment and sample\n      var cosh = dot(ws, toCamera) * inverseSqrt(dist2); // just read the HBAO paper..\n      var falloff = gtaoFalloff(dist2, params.falloffStart2, params.falloffEnd2);\n      horizons.x = max(horizons.x, cosh - falloff);\n\n      // h2\n      s = reprojectPositionToVS(projMatrixInv, viewport, positionPx - offset);\n      ws = s.xyz - positionVS.xyz;\n      dist2 = length(ws);\n      cosh = dot(ws, toCamera) * inverseSqrt(dist2);\n      falloff = gtaoFalloff(dist2, params.falloffStart2, params.falloffEnd2);\n      horizons.y = max(horizons.y, cosh - falloff);\n\n      // increment\n      currStep += stepSize;\n    }\n\n    horizons = acos(horizons);\n    \n    // calculate gamma angle\n    let bitangent: vec3f = normalize(cross(dir, toCamera));\n    let tangent: vec3f = cross(toCamera, bitangent);\n    let nx: vec3f = normalVS - bitangent * dot(normalVS, bitangent);\n    \n    let nnx = length(nx);\n    let nnxInv = 1.0 / (nnx + 1e-6); // to avoid division with zero\n    let cosxi = dot(nx, tangent) * nnxInv; // xi = gamma + HALF_PI\n    let gamma = acos(cosxi) - HALF_PI;\n    let cosgamma = dot(nx, toCamera) * nnxInv;\n    let singamma2 = -2.0 * cosxi; // cos(x + HALF_PI) = -sin(x)\n    \n    // clamp to normal hemisphere\n    horizons.x = gamma + max(-horizons.x - gamma, -HALF_PI);\n    horizons.y = gamma + min( horizons.y - gamma,  HALF_PI);\n\n    // Riemann integral is additive\n    ao += nnx * 0.25 * (\n      (horizons.x * singamma2 + cosgamma - cos(2.0 * horizons.x - gamma)) +\n      (horizons.y * singamma2 + cosgamma - cos(2.0 * horizons.y - gamma))\n    );\n  }\n\n  return ao / f32(params.numDirections);\n}\n\n// Who tf wrote this docs: https://www.w3.org/TR/WGSL/#round-builtin ?\nfn round_f(v: f32) -> f32 { return select(ceil(v), floor(v), v < 0.5); }\nfn round_2f(v: vec2f) -> vec2f {\n  return vec2f(round_f(v.x), round_f(v.y));\n}\n\nfn gtaoFalloff(dist: f32, falloffStart2: f32, falloffEnd2: f32) -> f32 {\n  return 2.0 * saturate(\n    (dist - falloffStart2) / (falloffEnd2 - falloffStart2)\n  );\n}\n\n`;\n", "import { FULLSCREEN_TRIANGLE_POSITION } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { LINEAR_DEPTH } from '../_shaderSnippets/linearDepth.wgsl.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { CONFIG } from '../../constants.ts';\nimport { GTAO_SNIPPET } from './gtao.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    depthTexture: 1,\n    normalsTexture: 2,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${FULLSCREEN_TRIANGLE_POSITION}\n${LINEAR_DEPTH}\n${GENERIC_UTILS}\n${SHADER_SNIPPETS.NORMALS_UTILS}\n${GTAO_SNIPPET}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n@group(0) @binding(${b.depthTexture})\nvar _depthTexture: texture_depth_2d;\n\n@group(0) @binding(${b.normalsTexture})\nvar _normalsTexture: texture_2d<f32>;\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4f {\n  return getFullscreenTrianglePosition(VertexIndex);\n}\n\nconst AO_TEXTURE_SCALE = ${CONFIG.ao.textureSizeMul};\n\n@fragment\nfn main_fs(\n  @builtin(position) fragPositionPxF32_halfRes: vec4<f32>\n) -> @location(0) f32 {\n  let projMatrixInv = _uniforms.projMatrixInv;\n  let viewMatrix = _uniforms.viewMatrix;\n  let viewport = vec2f(_uniforms.viewport.xy);\n\n  // pixel position\n  let fragPositionPxF32_fullRes = fragPositionPxF32_halfRes.xy / AO_TEXTURE_SCALE; // in [0, viewportPx.xy]\n  let fragPositionPx_fullRes: vec2u = vec2u(fragPositionPxF32_fullRes); // in [0, viewportPx.xy]\n \n  // normals\n  let normalsOct: vec2f = textureLoad(_normalsTexture, fragPositionPx_fullRes, 0).xy;\n  let normal = decodeOctahedronNormal(normalsOct);\n\n  // depth\n  let depth: f32 = textureLoad(_depthTexture, fragPositionPx_fullRes, 0);\n  \n  // get the projected position from pixel coords\n  let posXY_0_1 = fragPositionPxF32_fullRes / viewport; // XY position in range [0 .. 1]\n  let posXY_neg1_1 = posXY_0_1 * 2.0 - 1.0; // XY position in range [-1 .. 1]\n  let positionProj = vec4f(posXY_neg1_1, depth, 1.0);\n\n  return gtao(\n    projMatrixInv,\n    viewMatrix,\n    viewport,\n    fragPositionPxF32_fullRes,\n    normal\n  );\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { assertIsGPUTextureView } from '../../utils/webgpu.ts';\nimport { cmdDrawFullscreenTriangle } from '../_shaderSnippets/fullscreenTriangle.wgsl.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  assignResourcesToBindings,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\n\nimport { SHADER_PARAMS, SHADER_CODE } from './aoPass.wgsl.ts';\n\nexport class AoPass {\n  public static NAME: string = 'AoPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(AoPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createRenderPipeline({\n      label: labelPipeline(AoPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n        buffers: [],\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [{ format: outTextureFormat }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  onViewportResize = () => this.bindingsCache.clear();\n\n  cmdCalcAo(ctx: PassCtx) {\n    const { cmdBuf, profiler, aoTexture } = ctx;\n    assertIsGPUTextureView(aoTexture);\n\n    const renderPass = cmdBuf.beginRenderPass({\n      label: AoPass.NAME,\n      colorAttachments: [\n        // TBH no need for clear as we override every pixel\n        useColorAttachment(aoTexture, CONFIG.clearAo, 'clear'),\n      ],\n      timestampWrites: profiler?.createScopeGpu(AoPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings('-', () =>\n      this.createBindings(ctx)\n    );\n    renderPass.setBindGroup(0, bindings);\n    renderPass.setPipeline(this.pipeline);\n    cmdDrawFullscreenTriangle(renderPass);\n\n    // end\n    renderPass.end();\n  }\n\n  private createBindings = (ctx: PassCtx): GPUBindGroup => {\n    const {\n      device,\n      globalUniforms,\n      hdrRenderTexture,\n      normalsTexture,\n      depthTexture,\n    } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    assertIsGPUTextureView(hdrRenderTexture);\n\n    return assignResourcesToBindings(AoPass, device, this.pipeline, [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n      { binding: b.depthTexture, resource: depthTexture },\n      { binding: b.normalsTexture, resource: normalsTexture },\n    ]);\n  };\n}\n", "import { mat4, vec4 } from 'wgpu-matrix';\nimport { BYTES_MAT4, BYTES_VEC4, CONFIG } from '../../constants.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { TypedArrayView } from '../../utils/typedArrayView.ts';\nimport { WEBGPU_MINIMAL_BUFFER_SIZE } from '../../utils/webgpu.ts';\nimport { SDFCollider } from '../../scene/sdfCollider/sdfCollider.ts';\nimport { GridData } from './grids/gridData.ts';\nimport { sphericalToCartesian } from '../../utils/index.ts';\n\nconst TMP_MODEL_MAT4_INV = mat4.create(); // prealloc\nconst TMP_VEC4 = vec4.create(); // prealloc\n\nexport class SimulationUniformsBuffer {\n  public static SHADER_SNIPPET = (bindingIdx: number) => /* wgsl */ `\n\n    ${SDFCollider.SDF_DATA_SNIPPET}\n    ${GridData.GRID_DATA_SNIPPET}\n\n    struct SimulationUniforms {\n      modelMatrix: mat4x4<f32>,\n      modelMatrixInv: mat4x4<f32>,\n      collisionSphere: vec4f, // in OBJECT space!!!\n      wind: vec4f, // [direction.xyz, strength]\n      sdf: SDFCollider,\n      gridData: GridData,\n      // START: misc: vec4f\n      deltaTime: f32,\n      gravity: f32,\n      constraintIterations: u32,\n      frameIdx: u32,\n      // START: misc2: vec4f\n      windStrengthLull: f32,\n      windColisionTraceOffset: f32,\n      stiffnessLengthConstr: f32,\n      stiffnessCollisions: f32,\n      // START: misc3: vec4f\n      stiffnessSDF: f32,\n      volumePreservation: f32,\n      friction: f32,\n      stiffnessGlobalConstr: f32,\n      // START: misc4: vec4f\n      globalConstrExtent: f32,\n      globalConstrFade: f32,\n      stiffnessLocalConstr: f32,\n      windPhaseOffset: f32,\n      // START: misc5: vec4f\n      windStrengthFrequency: f32,\n      windStrengthJitter: f32,\n      padding0: f32,\n      padding1: f32,\n    };\n    @group(0) @binding(${bindingIdx})\n    var<uniform> _uniforms: SimulationUniforms;\n  `;\n\n  private static BUFFER_SIZE =\n    BYTES_MAT4 + // modelMatrix\n    BYTES_MAT4 + // modelMatrixInv\n    BYTES_VEC4 + // collisionSphere\n    BYTES_VEC4 + // wind\n    SDFCollider.BUFFER_SIZE + // sdf\n    GridData.BUFFER_SIZE + // grids\n    5 * BYTES_VEC4; // misc\n\n  private readonly gpuBuffer: GPUBuffer;\n  private readonly data = new ArrayBuffer(SimulationUniformsBuffer.BUFFER_SIZE);\n  private readonly dataView: TypedArrayView;\n\n  constructor(device: GPUDevice) {\n    this.gpuBuffer = device.createBuffer({\n      label: 'simulation-uniforms-buffer',\n      size: Math.max(\n        SimulationUniformsBuffer.BUFFER_SIZE,\n        WEBGPU_MINIMAL_BUFFER_SIZE\n      ),\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    this.dataView = new TypedArrayView(this.data);\n  }\n\n  createBindingDesc = (bindingIdx: number): GPUBindGroupEntry => ({\n    binding: bindingIdx,\n    resource: { buffer: this.gpuBuffer },\n  });\n\n  update(ctx: PassCtx) {\n    const { device } = ctx;\n    const { modelMatrix } = ctx.scene;\n    const c = CONFIG.hairSimulation;\n\n    this.dataView.resetCursor();\n    // model matrix\n    this.dataView.writeMat4(modelMatrix);\n    const modelMatInv = mat4.invert(modelMatrix, TMP_MODEL_MAT4_INV);\n    this.dataView.writeMat4(modelMatInv);\n\n    // collisionSphere\n    const colSph = CONFIG.hairSimulation.collisionSphere;\n    const colSphPosWS = vec4.set(colSph[0], colSph[1], colSph[2], 1.0, TMP_VEC4); // prettier-ignore\n    const colSphPosOS = vec4.transformMat4(colSphPosWS, modelMatInv, TMP_VEC4); // prettier-ignore\n    this.dataView.writeF32(colSphPosOS[0]);\n    this.dataView.writeF32(colSphPosOS[1]);\n    this.dataView.writeF32(colSphPosOS[2]);\n    this.dataView.writeF32(colSph[3]); // radius\n\n    // wind direction (.xyz), strength (.w)\n    const windDirWS = sphericalToCartesian(\n      c.wind.dirPhi,\n      c.wind.dirTheta,\n      'dgr',\n      TMP_VEC4\n    );\n    const windDirOS = vec4.transformMat4(windDirWS, modelMatInv, TMP_VEC4); // prettier-ignore\n    this.dataView.writeF32(windDirOS[0]);\n    this.dataView.writeF32(windDirOS[1]);\n    this.dataView.writeF32(windDirOS[2]);\n    this.dataView.writeF32(c.wind.strength);\n\n    // sdf + grids\n    ctx.scene.sdfCollider.writeToDataView(this.dataView);\n    ctx.scene.physicsGrid.writeToDataView(this.dataView);\n\n    // misc\n    this.dataView.writeF32(this.getDeltaTime()); // deltaTime: f32\n    this.dataView.writeF32(c.gravity); // gravity: f32,\n    this.dataView.writeU32(c.constraints.constraintIterations); // constraintIterations: u32,\n    this.dataView.writeU32(ctx.frameIdx); // frameIdx: u32,\n    // misc 2\n    this.dataView.writeF32(c.wind.strengthLull); // windStrengthLull: f32,\n    this.dataView.writeF32(c.wind.colisionTraceOffset); // windColisionTraceOffset: f32,\n    this.dataView.writeF32(c.constraints.stiffnessLengthConstr); // stiffnessLengthConstr: f32,\n    this.dataView.writeF32(c.constraints.stiffnessCollisions); // stiffnessCollisions: f32,\n    // misc 3\n    this.dataView.writeF32(c.constraints.stiffnessSDF); // stiffnessSDF: f32,\n    this.dataView.writeF32(c.volumePreservation); // volumePreservation: f32\n    this.dataView.writeF32(c.friction); // friction: f32\n    this.dataView.writeF32(c.constraints.stiffnessGlobalConstr); // stiffnessGlobalConstr: f32,\n    // misc 4\n    this.dataView.writeF32(c.constraints.globalExtent); // globalConstrExtent: f32,\n    this.dataView.writeF32(c.constraints.globalFade); // globalConstrFade: f32,\n    this.dataView.writeF32(c.constraints.stiffnessLocalConstr); // stiffnessLocalConstr: f32,\n    this.dataView.writeF32(c.wind.phaseOffset); // windPhaseOffset: f32,\n    // misc 5\n    this.dataView.writeF32(c.wind.strengthFrequency); // windStrengthFrequency: f32,\n    this.dataView.writeF32(c.wind.strengthJitter); // windStrengthJitter: f32,\n    this.dataView.writeF32(0.0); // padding0: f32,\n    this.dataView.writeF32(0.0); // padding1: f32,\n\n    // final write\n    this.dataView.assertWrittenBytes(SimulationUniformsBuffer.BUFFER_SIZE);\n    this.dataView.upload(device, this.gpuBuffer, 0);\n  }\n\n  /**\n   * Hair physics is not essential. It never drives a gameplay behaviour.\n   * It's fine to hardcode delta time. It guarantees stability, which is more important.\n   * We are also VSYNCed in the browser.\n   */\n  private getDeltaTime() {\n    return CONFIG.hairSimulation.deltaTime;\n  }\n}\n", "import { vec3 } from 'wgpu-matrix';\nimport { createGPU_StorageBuffer } from '../../utils/webgpu.ts';\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\n\nexport const BUFFER_HAIR_SEGMENT_LENGTHS = (bindingIdx: number) => /* wgsl */ `\n\n@group(0) @binding(${bindingIdx})\nvar<storage, read> _hairSegmentLengths: array<f32>;\n\nfn _getHairSegmentLength(\n  pointsPerStrand: u32,\n  strandIdx: u32,\n  segmentIdx: u32\n) -> f32 {\n  return _hairSegmentLengths[strandIdx * pointsPerStrand + segmentIdx];\n}\n`;\n\n///////////////////////////\n/// GPU BUFFER\n///////////////////////////\n\nexport function createHairSegmentLengthsBuffer(\n  device: GPUDevice,\n  name: string,\n  pointsPerStrand: number,\n  positions: Float32Array\n): GPUBuffer {\n  const getPosition = (idx: number) => [\n    positions[idx * 4 + 0],\n    positions[idx * 4 + 1],\n    positions[idx * 4 + 2],\n  ];\n  // console.log('positions', typedArr2str(positions, 4));\n\n  const totalPoints = positions.length / 4;\n  const lengthsF32 = new Float32Array(totalPoints);\n\n  for (let i = 0; i < totalPoints; i++) {\n    if (i % pointsPerStrand == pointsPerStrand - 1) {\n      // the value with index corresponding to strand tip.\n      // Should never be accessed in the first place, so does not matter.\n      // Just in case we repeat value just before the tip\n      lengthsF32[i] = vec3.distance(getPosition(i - 1), getPosition(i));\n    } else {\n      lengthsF32[i] = vec3.distance(getPosition(i), getPosition(i + 1));\n    }\n  }\n\n  // console.log('SEGMENT_LENGTHS', typedArr2str(lengthsF32, 4));\n  return createGPU_StorageBuffer(device, `${name}-segmentLengths`, lengthsF32);\n}\n", "// NOTE: we don't have to use atomics here, as each point has own thread.\n// This also means we can just use normal floats!\nexport const BUFFER_GRID_DENSITY_GRADIENT_AND_WIND = (\n  bindingIdx: number,\n  access: 'read_write' | 'read'\n) => /* wgsl */ `\n\nstruct DensityGradAndWind {\n  densityGrad: vec3f,\n  windStrength: f32, // we know direction from uniforms\n}\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _gridDensityGradAndWindVelocity: array<DensityGradAndWind>;\n\n${access === 'read_write' ? setterFn() : ''}\n\n\n\nfn _getGridDensityGradAndWind(\n  gridBoundsMin: vec3f,\n  gridBoundsMax: vec3f,\n  p: vec3f\n) -> DensityGradAndWind {\n  // get coords\n  let co = _getGridCell(gridBoundsMin, gridBoundsMax, p);\n  var result = DensityGradAndWind(vec3f(0.0), 0.0);\n\n  // gather results from all 8 cell-points around\n  // dbg: cellMax = cellMin; - only the min cell\n  for (var z = co.cellMin.z; z <= co.cellMax.z; z += 1u) {\n  for (var y = co.cellMin.y; y <= co.cellMax.y; y += 1u) {\n  for (var x = co.cellMin.x; x <= co.cellMax.x; x += 1u) {\n    let cellCorner = vec3u(x, y, z);\n    let cornerWeights = _getGridCellWeights(cellCorner, co.pInGrid);\n    let value = _getGridDensityGradAndWindAtPoint(cellCorner);\n\n    // load\n    result.densityGrad  += cornerWeights * value.densityGrad;\n    result.windStrength += _getGridCellWeight(cornerWeights) * value.windStrength;\n  }}}\n\n  return result;\n}\n\n\nfn _getGridDensityGradAndWindAtPoint(p: vec3u) -> DensityGradAndWind {\n  let idx = _getGridIdx(p);\n  return _gridDensityGradAndWindVelocity[idx];\n}\n\n`;\n\nfunction setterFn() {\n  return /* wgsl */ `\n\n  fn _setGridDensityGradAndWind(\n    p: vec3u,\n    densityGrad: vec3f,\n    windStrength: f32\n  ) {\n    let idx = _getGridIdx(p);\n    _gridDensityGradAndWindVelocity[idx] = DensityGradAndWind(\n      densityGrad,\n      windStrength,\n    );\n  }\n\n  `;\n}\n", "import { i32_type } from '../../../utils/webgpu.ts';\n\nexport const BUFFER_GRID_DENSITY_VELOCITY = (\n  bindingIdx: number,\n  access: 'read_write' | 'read'\n) => /* wgsl */ `\n\nstruct DensityVelocityI32 {\n  velocityX: ${i32_type(access)},\n  velocityY: ${i32_type(access)},\n  velocityZ: ${i32_type(access)},\n  density: ${i32_type(access)},\n}\n\n@group(0) @binding(${bindingIdx})\nvar<storage, ${access}> _gridDensityVelocity: array<DensityVelocityI32>;\n\n${access === 'read' ? gridRead() : gridWrite()}\n\n`;\n\nfunction gridRead() {\n  return /* wgsl */ `\n\n  struct DensityVelocity {\n    velocity: vec3f,\n    density: f32,\n  }\n\n  fn _getGridDensityVelocity(\n    gridBoundsMin: vec3f,\n    gridBoundsMax: vec3f,\n    p: vec3f\n  ) -> DensityVelocity {\n    // get coords\n    let co = _getGridCell(gridBoundsMin, gridBoundsMax, p);\n    var result = DensityVelocity(vec3f(0.0), 0.0);\n  \n    // gather results from all 8 cell-points around\n    // dbg: cellMax = cellMin; - only the min cell\n    for (var z = co.cellMin.z; z <= co.cellMax.z; z += 1u) {\n    for (var y = co.cellMin.y; y <= co.cellMax.y; y += 1u) {\n    for (var x = co.cellMin.x; x <= co.cellMax.x; x += 1u) {\n      let cellCorner = vec3u(x, y, z);\n      let cornerWeights = _getGridCellWeights(cellCorner, co.pInGrid);\n      let value = _getGridDensityVelocityAtPoint(cellCorner);\n  \n      // load\n      result.velocity += cornerWeights * value.velocity;\n      result.density  += _getGridCellWeight(cornerWeights) * value.density;\n      // result.density += cornerWeights.x * select(0., 1., x == 1u); // dbg:  NOTE: this samples 4 points (see y,z-axis) so the gradient is a bit strong\n    }}}\n  \n    // dbg:\n    /*// let idx = _getGridIdx(cellMax);\n    // let idx = _getGridIdx(cellMin);\n    // let idx = 0; // remember, this is cell idx, not u32's offset!\n    // let idx = clamp(cellMax.x, 0u, GRID_DIMS - 1u);\n    // let value: vec4i = _gridDensityVelocity[idx];\n    // result.density = select(0.0, 1.0, value.w != 0);\n    // result.density = select(0.0, 1.0, idx == 3u);\n    // result.density = select(0.0, 1.0, result.density >= 4);\n    // result.density = select(0.0, 1.0, cellMin.x == 2u);\n    // result.density = select(0.0, 1.0, cellMax.x == 3u);\n    var t: vec3f = saturate((p - gridBoundsMin) / (gridBoundsMax - gridBoundsMin));\n    result.density = select(0.0, 1.0, t.z > 0.5); // dbg: mock*/\n    return result;\n  }\n\n  \n  fn _getGridDensityVelocityAtPoint(p: vec3u) -> DensityVelocity {\n    var result = DensityVelocity(vec3f(0.0), 0.0);\n    let idx = _getGridIdx(p);\n    let value = _gridDensityVelocity[idx];\n\n    result.velocity.x = gridDecodeValue(value.velocityX);\n    result.velocity.y = gridDecodeValue(value.velocityY);\n    result.velocity.z = gridDecodeValue(value.velocityZ);\n    result.density = gridDecodeValue(value.density);\n    return result;\n  }\n\n  fn _getGridDensityAtPoint(p: vec3u) -> f32 {\n    let idx = _getGridIdx(p);\n    return gridDecodeValue(_gridDensityVelocity[idx].density);\n  }\n  `;\n}\n\nfunction gridWrite() {\n  return /* wgsl */ `\n\n  fn _addGridDensityVelocity(\n    gridBoundsMin: vec3f,\n    gridBoundsMax: vec3f,\n    p: vec3f,\n    velocity: vec3f\n  ) {\n    // get coords\n    let co = _getGridCell(gridBoundsMin, gridBoundsMax, p);\n  \n    // store into all 8 cell-points around\n    for (var z = co.cellMin.z; z <= co.cellMax.z; z += 1u) {\n    for (var y = co.cellMin.y; y <= co.cellMax.y; y += 1u) {\n    for (var x = co.cellMin.x; x <= co.cellMax.x; x += 1u) {\n      let cellCorner = vec3u(x, y, z);\n      let idx = _getGridIdx(cellCorner);\n      let cornerWeights = _getGridCellWeights(cellCorner, co.pInGrid);\n  \n      // store\n      // velocity\n      let cellVelocity: vec3f = velocity * cornerWeights;\n      var value: i32 = gridEncodeValue(cellVelocity.x);\n      atomicAdd(&_gridDensityVelocity[idx].velocityX, value);\n      value = gridEncodeValue(cellVelocity.y);\n      atomicAdd(&_gridDensityVelocity[idx].velocityY, value);\n      value = gridEncodeValue(cellVelocity.z);\n      atomicAdd(&_gridDensityVelocity[idx].velocityZ, value);\n      // density\n      let density = _getGridCellWeight(cornerWeights);\n      value = gridEncodeValue(density);\n      atomicAdd(&_gridDensityVelocity[idx].density, value);\n    }}}\n  }\n\n  `;\n}\n", "export const HAIR_SIM_IMPL_COLLISIONS = /* wgsl */ `\n\n// assumes sphere is in object space!\nfn applyCollisionsSphere (\n  stiffness: f32,\n  sphere: vec4f,\n  pos: ptr<function, vec4f>,\n) {\n  let p = (*pos).xyz;\n  let v = p - sphere.xyz; // from sphere to point\n\n  // calculate distance from sphere shell to the point\n  // if POSITIVE: point does not collide\n  // if NEGATIVE: point inside the sphere, resolve collision\n  let dist = length(v) - sphere.w;\n  let distToShell = max(0.0, -dist);\n\n  // apply resolution\n  (*pos) += vec4f(normalize(v) * distToShell * stiffness , 0.0);\n}\n\n// We could get these from uniforms, but why bother?\nconst SDF_CELL_SIZE = 0.0033918858971446753;\nconst SDF_SAMPLE_GRAD_OFFSET = SDF_CELL_SIZE * 0.1;\n\nfn applyCollisionsSdf (\n  stiffness: f32,\n  sdfBoundsMin: vec3f,\n  sdfBoundsMax: vec3f,\n  sdfOffset: f32,\n  pos: ptr<function, vec4f>,\n) {\n  let p = (*pos).xyz;\n\n  // negative distance - collision. Positive distance - OK.\n  let sdfDistance = sampleSDFCollider(sdfBoundsMin, sdfBoundsMax, p.xyz);\n  let sdfDistanceWithOffset = sdfDistance + sdfOffset;\n  if (sdfDistanceWithOffset >= 0) { return; }\n\n  // calculate gradient\n  // https://github.com/GPUOpen-Effects/TressFX/blob/ba0bdacdfb964e38522fda812bf23169bc5fa603/src/Shaders/TressFXSDFCollision.hlsl#L559\n  // let correctionDir = vec3f(0., 0., 1.); // dbg: hardcoded forward\n  var correctionDir = vec3f(0., 0., 0.);\n  correctionDir.x = sampleSDFCollider(\n    sdfBoundsMin, sdfBoundsMax,\n    p.xyz + SDF_SAMPLE_GRAD_OFFSET * vec3f(1., 0., 0.)\n  );\n  correctionDir.y = sampleSDFCollider(\n    sdfBoundsMin, sdfBoundsMax,\n    p.xyz + SDF_SAMPLE_GRAD_OFFSET * vec3f(0., 1., 0.)\n  );\n  correctionDir.z = sampleSDFCollider(\n    sdfBoundsMin, sdfBoundsMax,\n    p.xyz + SDF_SAMPLE_GRAD_OFFSET * vec3f(0., 0., 1.)\n  );\n  correctionDir = correctionDir - vec3f(sdfDistance, sdfDistance, sdfDistance);\n  \n  // apply resolution\n  let correction: vec3f = -sdfDistanceWithOffset * normalize(correctionDir);\n  (*pos) += vec4f(correction * stiffness , 0.0);\n}\n\n`;\n", "export const HAIR_SIM_IMPL_CONSTRANTS = /* wgsl */ `\n\n// See [Bender15] \"Position-Based Simulation Methods in Computer Graphics\"\n// Section \"5.1. Stretching\"\nfn applyConstraint_Length (\n  stiffness: f32,\n  expectedLength: f32,\n  pos0: ptr<function, vec4f>,\n  pos1: ptr<function, vec4f>,\n) {\n  let w0 = isMovable(*pos0);\n  let w1 = isMovable(*pos1);\n\n  let tangent = (*pos1).xyz - (*pos0).xyz; // from pos0 toward pos1, unnormalized\n  let actualLength = length(tangent);\n  // if segment is SHORTER: (expectedLength / actualLength) > 1.\n  // So we have to elongate it. $correction is negative, proportional to missing length.\n  // if segment is LONGER: (expectedLength / actualLength) < 1.\n  // So we have to shorten it. $correction is positive, proportional to extra length.\n  let correction: f32 = 1.0 - expectedLength / actualLength;\n  let deltaFactor: f32 = correction * stiffness / (w0 + w1 + FLOAT_EPSILON);\n  let delta: vec3f = deltaFactor * tangent;\n\n  // (*pos0) = getNextPosition((*pos0), (*pos0).xyz + delta);\n  // (*pos1) = getNextPosition((*pos1), (*pos1).xyz - delta);\n  (*pos0) += vec4f(w0 * delta, 0.0);\n\t(*pos1) -= vec4f(w1 * delta, 0.0);\n}\n\n\nfn globalConstraintAttenuation(\n  globalExtent: f32, globalFade: f32,\n  pointsPerStrand: u32,\n  pointIdx: u32\n) -> f32 {\n  let x = f32(pointIdx) / f32(pointsPerStrand - 1u);\n  return 1.0 - saturate((x - globalExtent) / globalFade);\n}\n\nfn applyConstraint_GlobalShape(\n  wkGrpOffset: u32,\n  stiffness: f32,\n  posInitial: vec3f,\n  pointIdx: u32\n) {\n  var pos = _positionsWkGrp[wkGrpOffset + pointIdx];\n  let deltaVec: vec3f = posInitial.xyz - pos.xyz; // pos -> posInitial\n  _positionsWkGrp[wkGrpOffset + pointIdx] += vec4f(deltaVec * pos.w * stiffness, 0.0);\n}\n\n\n\n// A Triangle Bending Constraint Model for Position-Based Dynamics\nfn applyConstraint_LocalShape(\n  wkGrpOffset: u32,\n  pointsPerStrand: u32, strandIdx: u32,\n  stiffness: f32,\n  pointIdx: u32\n) -> vec3f {\n  // TODO [IGNORE] precompute\n  let posInitial0 = _getHairPointPositionInitial(pointsPerStrand, strandIdx, pointIdx);\n  let posInitial1 = _getHairPointPositionInitial(pointsPerStrand, strandIdx, pointIdx + 1u);\n  let posInitial2 = _getHairPointPositionInitial(pointsPerStrand, strandIdx, pointIdx + 2u);\n  let cInitial: vec3f = (posInitial0.xyz + posInitial1.xyz + posInitial2.xyz) / 3.;\n  let h0 = length(cInitial - posInitial1.xyz);\n  \n  let wkOffset = wkGrpOffset + pointIdx;\n  let pos0 = _positionsWkGrp[wkOffset];\n  let pos1 = _positionsWkGrp[wkOffset + 1u];\n  let pos2 = _positionsWkGrp[wkOffset + 2u];\n  let c: vec3f = (pos0.xyz + pos1.xyz + pos2.xyz) / 3.;\n  let hVec = pos1.xyz - c; // from median toward middle point\n  let h = length(hVec);\n\n  let wTotal = posInitial0.w + 2. * posInitial1.w + posInitial2.w;\n  let w0 = posInitial0.w / wTotal *  2.;\n  let w1 = posInitial1.w / wTotal * -4.;\n  let w2 = posInitial2.w / wTotal *  2.;\n\n  let delta = hVec * (1.0 - h0 / h);\n  _positionsWkGrp[wkOffset + 0u] += vec4f(stiffness * w0 * delta, 0.0);\n  _positionsWkGrp[wkOffset + 1u] += vec4f(stiffness * w1 * delta, 0.0);\n  _positionsWkGrp[wkOffset + 2u] += vec4f(stiffness * w2 * delta, 0.0);\n\n  let lastTangent = _positionsWkGrp[wkOffset + 2u] - _positionsWkGrp[wkOffset + 1u];\n  return lastTangent.xyz;\n}\n\n\nfn applyConstraint_matchInitialTangent(\n  wkGrpOffset: u32,\n  pointsPerStrand: u32, strandIdx: u32,\n  stiffness: f32,\n  pointIdx: u32\n) {\n  // a bit wastefull, but ./shrug\n  let posInitial0 = _getHairPointPositionInitial(pointsPerStrand, strandIdx, pointIdx - 1u);\n  let posInitial1 = _getHairPointPositionInitial(pointsPerStrand, strandIdx, pointIdx);\n  let tangentInitial = posInitial1.xyz - posInitial0.xyz;\n  \n  applyConstraint_matchTangent(\n    stiffness, wkGrpOffset, pointIdx, tangentInitial\n  );\n}\n\nfn applyConstraint_matchTangent(\n  stiffness: f32,\n  wkGrpOffset: u32,\n  pointIdx: u32,\n  tangent: vec3f\n) {\n  let wkOffset = wkGrpOffset + pointIdx;\n  let pos0 = _positionsWkGrp[wkOffset - 1u];\n  let pos1 = _positionsWkGrp[wkOffset];\n\n  let positionProj = pos0.xyz + tangent;\n  let delta = positionProj - pos1.xyz; // now -> projected\n  let w = pos1.w;\n  _positionsWkGrp[wkOffset] += vec4f(stiffness * w * delta, 0.0);\n}\n\n`;\n", "export const HAIR_SIM_IMPL_INTEGRATION = /* wgsl */ `\n\n// Positions have .w as isMovable flag. 1.0 if isMovable, 0.0 if is not (strand root).\n// Returned as float to avoid branching. Just multiply delta instead.\nfn isMovable(p: vec4f) -> f32 { return p.w; }\n\n/** https://en.wikipedia.org/wiki/Verlet_integration */\nfn verletIntegration (\n  dt: f32,\n  posPrev: vec4f,\n  posNow: vec4f,\n  gridDisp: vec3f,\n  friction: f32,\n  acceleration: vec3f,\n) -> vec4f {\n  // original verlet:\n  // let posNext: vec3f = (2. * posNow.xyz - posPrev.xyz) + acceleration * dt * dt;\n\n  // https://youtu.be/ool2E8SQPGU?si=yKgmYF6Wjbu6HXsF&t=815\n  let pointDisp = posNow.xyz - posPrev.xyz;\n  let finalPointDisp = mix(pointDisp, gridDisp, friction);\n  \n  let posNext: vec3f = posNow.xyz + finalPointDisp + acceleration * dt * dt;\n  return vec4f(\n    mix(posPrev.xyz, posNext, isMovable(posNow)),\n    posNow.w\n  );\n}\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport {\n  BUFFER_HAIR_POINTS_POSITIONS_R,\n  BUFFER_HAIR_POINTS_POSITIONS_RW,\n} from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { BUFFER_HAIR_SEGMENT_LENGTHS } from '../../scene/hair/hairSegmentLengthsBuffer.ts';\nimport { SDFCollider } from '../../scene/sdfCollider/sdfCollider.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_GRID_DENSITY_GRADIENT_AND_WIND } from './grids/densityGradAndWindGrid.wgsl.ts';\nimport { BUFFER_GRID_DENSITY_VELOCITY } from './grids/densityVelocityGrid.wgsl.ts';\nimport { GRID_UTILS } from './grids/grids.wgsl.ts';\nimport { HAIR_SIM_IMPL_COLLISIONS } from './shaderImpl/collisions.wgsl.ts';\nimport { HAIR_SIM_IMPL_CONSTRANTS } from './shaderImpl/constraints.wgsl.ts';\nimport { HAIR_SIM_IMPL_INTEGRATION } from './shaderImpl/integration.wgsl.ts';\nimport { SimulationUniformsBuffer } from './simulationUniformsBuffer.ts';\n\nconst STRANDS_PER_WORKGROUP = 8;\nconst POINTS_PER_WORKGROUP = () =>\n  STRANDS_PER_WORKGROUP * CONFIG.pointsPerStrand;\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: STRANDS_PER_WORKGROUP,\n  bindings: {\n    simulationUniforms: 0,\n    hairData: 1,\n    positionsPrev: 2,\n    positionsNow: 3,\n    segmentLengths: 4,\n    sdfTexture: 5,\n    sdfSampler: 6,\n    densityVelocityBuffer: 7,\n    densityGradWindBuffer: 8,\n    positionsInitial: 9,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${GENERIC_UTILS}\n${GRID_UTILS}\n${HAIR_SIM_IMPL_CONSTRANTS}\n${HAIR_SIM_IMPL_INTEGRATION}\n${HAIR_SIM_IMPL_COLLISIONS}\n\n${SimulationUniformsBuffer.SHADER_SNIPPET(b.simulationUniforms)}\n${SDFCollider.TEXTURE_SDF(b.sdfTexture, b.sdfSampler)}\n${BUFFER_GRID_DENSITY_VELOCITY(b.densityVelocityBuffer, 'read')}\n${BUFFER_GRID_DENSITY_GRADIENT_AND_WIND(b.densityGradWindBuffer, 'read')}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_POINTS_POSITIONS_RW(b.positionsPrev, {\n  bufferName: '_hairPointPositionsPrev',\n  getterName: '_getHairPointPositionPrev',\n  setterName: '_setHairPointPositionPrev',\n})}\n${BUFFER_HAIR_POINTS_POSITIONS_R(b.positionsNow, {\n  bufferName: '_hairPointPositionsNow',\n  getterName: '_getHairPointPositionNow',\n})}\n${BUFFER_HAIR_POINTS_POSITIONS_R(b.positionsInitial, {\n  bufferName: '_hairPointPositionsInitial',\n  getterName: '_getHairPointPositionInitial',\n})}\n${BUFFER_HAIR_SEGMENT_LENGTHS(b.segmentLengths)}\n\n\n/** Temporary position storage for duration of the shader */\nvar<workgroup> _positionsWkGrp: array<vec4f, ${POINTS_PER_WORKGROUP()}u>;\n\n\n// Everything is in object space (unless noted otherwise).\n// The comments assume 32 points per strand to make it easier\n@compute\n@workgroup_size(${c.workgroupSizeX}, 1, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n  // id of the thread inside the workgroup\n  @builtin(local_invocation_index) local_invocation_index: u32,\n) {\n  let strandsCount: u32 = _hairData.strandsCount;\n  let pointsPerStrand: u32 = _hairData.pointsPerStrand; // 32\n  let segmentCount: u32 = pointsPerStrand - 1u; // 31\n  let wkGrpOffset = pointsPerStrand * local_invocation_index;\n\n  let dt = _uniforms.deltaTime;\n  let constraintIterations = _uniforms.constraintIterations;\n  let stiffnessLengthConstr = _uniforms.stiffnessLengthConstr;\n  let stiffnessGlobalConstr = _uniforms.stiffnessGlobalConstr;\n  let stiffnessCollisions = _uniforms.stiffnessCollisions;\n  let globalConstrExtent = _uniforms.globalConstrExtent;\n  let globalConstrFade = _uniforms.globalConstrFade;\n  let stiffnessLocalConstr = _uniforms.stiffnessLocalConstr;\n  let stiffnessSDF = _uniforms.stiffnessSDF;\n  let collisionSphere = _uniforms.collisionSphere;\n  let gravity = _uniforms.gravity;\n  let gravityForce = vec3f(0., -gravity, 0.);\n  let wind = _uniforms.wind;\n  let windStrengthLull = _uniforms.windStrengthLull;\n  let windPhaseOffset = _uniforms.windPhaseOffset;\n  let windStrengthFrequency = _uniforms.windStrengthFrequency;\n  let windStrengthJitter = _uniforms.windStrengthJitter;\n  let volumePreservation = _uniforms.volumePreservation;\n  let friction = _uniforms.friction;\n  let frameIdx = _uniforms.frameIdx;\n  let gridBoundsMin = _uniforms.gridData.boundsMin.xyz;\n  let gridBoundsMax = _uniforms.gridData.boundsMax.xyz;\n  let sdfBoundsMin = _uniforms.sdf.boundsMin.xyz;\n  let sdfBoundsMax = _uniforms.sdf.boundsMax.xyz;\n  let sdfOffset = getSDF_Offset();\n\n  let strandIdx = global_id.x;\n  // if (strandIdx >= strandsCount) { return; } // \"uniform control flow\" error\n  let isInvalidDispatch = strandIdx >= strandsCount; // some memory accesses will return garbage. It's OK as long as we don't try to override real data?\n\n\n\n  // verlet integration. Also adds forces from grids.\n  // Skips root point cause it never moves.\n  _positionsWkGrp[wkGrpOffset + 0] = _getHairPointPositionNow(pointsPerStrand, strandIdx, 0u); // root\n  for (var i = 1u; i < pointsPerStrand && !isInvalidDispatch; i += 1u) {\n      let posPrev = _getHairPointPositionPrev(pointsPerStrand, strandIdx, i);\n      let posNow = _getHairPointPositionNow(pointsPerStrand, strandIdx, i);\n      var force = gravityForce;\n      let densityGradAndWind = _getGridDensityGradAndWind(gridBoundsMin, gridBoundsMax, posNow.xyz);\n      let densityVelocity = _getGridDensityVelocity(gridBoundsMin, gridBoundsMax, posNow.xyz);\n\n      // wind\n      let timer = f32(frameIdx) * 0.73 + windPhaseOffset * f32(strandIdx);\n      let windJitter = fract(timer * windStrengthFrequency);\n      let jitterDelta = mix(-0.5 * windStrengthJitter, 0.5 * windStrengthJitter, windJitter); // e.g. [-0.5 .. 0.5] when windStrengthJitter is 1.0\n      let jitterStr = 1.0 + jitterDelta; // e.g. [0.5 .. 1.5] when windStrengthJitter is 1.0\n      let windCellStr = saturate(mix(windStrengthLull, 1.0, densityGradAndWind.windStrength));\n      force += wind.xyz * abs(wind.w * jitterStr * windCellStr);\n      \n      // density gradient\n      // This is just an averaged direction to neighbouring cell - based on density difference.\n      // No need to normalize by density, as it's a difference. But it's a value from grid,\n      // so we have to use FLIP.\n      force += densityGradAndWind.densityGrad * volumePreservation;\n      \n      // Velocity. Divide by density to get *average* value.\n      // https://youtu.be/ool2E8SQPGU?si=yKgmYF6Wjbu6HXsF&t=815\n      let gridDisp = select(\n        vec3f(0.0),\n        densityVelocity.velocity / densityVelocity.density,\n        densityVelocity.density > 0 // happens on simulation reset\n      );\n\n      _positionsWkGrp[wkGrpOffset + i] = verletIntegration(\n        dt,\n        posPrev, posNow,\n        gridDisp, friction,\n        force\n      );\n      // _positionsWkGrp[wkGrpOffset + i] = posNow; // dbg: skip integration\n  }\n\n  workgroupBarrier();\n\n\n  // solve constraints through iterations\n  for (var i = 0u; i < constraintIterations && !isInvalidDispatch; i += 1u) {\n    // NOTE: we could better manipulate stiffness between iters.\n    // E.g.  First few iters affect more and last ones just nudge\n    //       toward slightly better solutions.\n    // E.g2. First few iters affect less to put strands in stable,\n    //       solvable positions before bigger changes in later iters.\n\n    // strech/length constraint\n    let stiffnessLen_i = stiffnessLengthConstr; // / f32(constraintIterations);\n    var posSegmentStart = _positionsWkGrp[wkGrpOffset + 0u];\n    for (var j = 0u; j < segmentCount; j += 1u) { // from 0 to 30 (inclusive)\n      var posSegmentEnd = _positionsWkGrp[wkGrpOffset + j + 1u];\n      // let expectedLength0 = length(posSegmentEnd.xyz - posSegmentStart.xyz);\n      let expectedLength1: f32 = _getHairSegmentLength(pointsPerStrand, strandIdx, j);\n      applyConstraint_Length(\n        stiffnessLen_i, expectedLength1,\n        &posSegmentStart, &posSegmentEnd\n      );\n      _positionsWkGrp[wkGrpOffset + j + 0u] = posSegmentStart;\n      _positionsWkGrp[wkGrpOffset + j + 1u] = posSegmentEnd;\n      // move to next segment\n      posSegmentStart = posSegmentEnd;\n    }\n\n    // global shape constraint\n    let stiffnessGlobalShape_i = stiffnessGlobalConstr / f32(constraintIterations);\n    for (var j = 1u; j < pointsPerStrand; j += 1u) { // from 0 to 30 (inclusive)\n      let attenuation = globalConstraintAttenuation(\n        globalConstrExtent, globalConstrFade,\n        pointsPerStrand, j\n      );\n      let posInitial = _getHairPointPositionInitial(pointsPerStrand, strandIdx, j);\n      applyConstraint_GlobalShape(\n        wkGrpOffset,\n        stiffnessGlobalShape_i * attenuation,\n        posInitial.xyz,\n        j\n      );\n    }\n\n    // local shape constraint\n    let stiffnessLocalShape_i = stiffnessLocalConstr / f32(constraintIterations);\n    var jj = 0u;\n    var lastTangent: vec3f;\n    for (; jj < pointsPerStrand - 3; jj += 1u) { // from 0 to 30 (inclusive)\n      lastTangent = applyConstraint_LocalShape(\n        wkGrpOffset,\n        pointsPerStrand, strandIdx,\n        stiffnessLocalShape_i,\n        jj\n      );\n    }\n    for (; jj < pointsPerStrand; jj += 1u) { // last remaining points\n      applyConstraint_matchInitialTangent(\n        wkGrpOffset,\n        pointsPerStrand, strandIdx,\n        stiffnessLocalShape_i,\n        jj\n      );\n      /*applyConstraint_matchTangent(\n        stiffnessLocalShape_i,\n        wkGrpOffset, jj,\n        lastTangent\n      );*/\n    }\n\n    // TODO [IGNORE] add global length (FTL) constraint\n    \n    // collisions (skip root)\n    let stiffnessColl_i = stiffnessCollisions / f32(constraintIterations);\n    let stiffnessSDF_i = stiffnessSDF / f32(constraintIterations);\n    for (var j = 1u; j < pointsPerStrand; j += 1u) { // from 0 to 30 (inclusive)\n      var pos = _positionsWkGrp[wkGrpOffset + j];\n      // sphere\n      applyCollisionsSphere(\n        stiffnessColl_i,\n        collisionSphere,\n        &pos\n      );\n\n      // SDF. Skip for points close to root as they are going to be naturally close to mesh.\n      // Hardcoding can be a problem for lower pointsPerStrand count.\n      if (j > 2u) {\n        applyCollisionsSdf(\n          stiffnessSDF_i,\n          sdfBoundsMin,\n          sdfBoundsMax,\n          sdfOffset,\n          &pos\n        );\n      }\n\n      _positionsWkGrp[wkGrpOffset + j] = pos;\n    }\n  }\n\n  workgroupBarrier();\n\n\n  // write back\n  for (var i = 0u; i < pointsPerStrand && !isInvalidDispatch; i += 1u) {\n    // tick-tock update. Leave positionNow, as it will be come positionPrev next frame\n    let posNext: vec4f = _positionsWkGrp[wkGrpOffset + i];\n    _setHairPointPositionPrev(pointsPerStrand, strandIdx, i, posNext);\n  }\n}\n\n`;\n", "import { HairObject } from '../../scene/hair/hairObject.ts';\nimport { getItemsPerThread } from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './hairSimIntegrationPass.wgsl.ts';\n\nexport class HairSimIntegrationPass {\n  public static NAME: string = 'HairSimIntegrationPass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(HairSimIntegrationPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(HairSimIntegrationPass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  cmdSimulateHairPositions(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler } = ctx;\n\n    const computePass = cmdBuf.beginComputePass({\n      label: HairSimIntegrationPass.NAME,\n      timestampWrites: profiler?.createScopeGpu(HairSimIntegrationPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      () => this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    // dispatch\n    const workgroupsX = getItemsPerThread(\n      hairObject.strandsCount,\n      SHADER_PARAMS.workgroupSizeX\n    );\n    // console.log(`${HairSimIntegrationPass.NAME}.dispatch(${workgroupsX}, 1, 1)`);\n    computePass.dispatchWorkgroups(workgroupsX, 1, 1);\n\n    computePass.end();\n\n    // every pass after that will use updated values\n    hairObject.swapPositionBuffersAfterSimIntegration();\n  }\n\n  private createBindings = (\n    ctx: PassCtx,\n    hairObject: HairObject\n  ): GPUBindGroup => {\n    const { device, simulationUniforms, scene, physicsForcesGrid } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    const sdf = scene.sdfCollider;\n\n    return assignResourcesToBindings2(\n      HairSimIntegrationPass,\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      device,\n      this.pipeline,\n      [\n        simulationUniforms.createBindingDesc(b.simulationUniforms),\n        hairObject.bindHairData(b.hairData),\n        hairObject.bindInitialSegmentLengths(b.segmentLengths),\n        hairObject.bindPointsPositions_PREV(b.positionsPrev),\n        hairObject.bindPointsPositions(b.positionsNow),\n        hairObject.bindPointsPositions_INITIAL(b.positionsInitial),\n        sdf.bindTexture(b.sdfTexture),\n        sdf.bindSampler(b.sdfSampler),\n        physicsForcesGrid.bindDensityVelocityBuffer(b.densityVelocityBuffer),\n        physicsForcesGrid.bindDensityGradAndWindBuffer(b.densityGradWindBuffer),\n      ]\n    );\n  };\n}\n", "import { CONFIG, VERTS_IN_TRIANGLE } from '../../constants.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport {\n  PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n  useColorAttachment,\n} from './shared.ts';\n\nexport function createDebugVolumePipeline(\n  device: GPUDevice,\n  shaderModule: GPUShaderModule,\n  outTextureFormat: GPUTextureFormat,\n  label: string\n) {\n  return device.createRenderPipeline({\n    label,\n    layout: 'auto',\n    vertex: {\n      module: shaderModule,\n      entryPoint: 'main_vs',\n      buffers: [],\n    },\n    fragment: {\n      module: shaderModule,\n      entryPoint: 'main_fs',\n      targets: [\n        {\n          format: outTextureFormat,\n          blend: {\n            // color is based on the alpha from the shader's output.\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha',\n              operation: 'add',\n            },\n            alpha: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'add',\n            },\n          },\n        },\n      ],\n    },\n    primitive: {\n      ...PIPELINE_PRIMITIVE_TRIANGLE_LIST,\n      cullMode: 'none',\n    },\n  });\n}\n\nexport function cmdDrawDbgVolumeQuad(\n  ctx: PassCtx,\n  pass: { NAME: string },\n  pipeline: GPURenderPipeline,\n  bindings: GPUBindGroup\n) {\n  const { cmdBuf, profiler, hdrRenderTexture } = ctx;\n\n  const renderPass = cmdBuf.beginRenderPass({\n    label: pass.NAME,\n    colorAttachments: [\n      useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n    ],\n    timestampWrites: profiler?.createScopeGpu(pass.NAME),\n  });\n\n  // set render pass data\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindings);\n\n  // draw\n  const vertexCount = 2 * VERTS_IN_TRIANGLE;\n  renderPass.draw(\n    vertexCount,\n    1, // instance count\n    0, // first index\n    0 // first instance\n  );\n\n  // fin\n  renderPass.end();\n}\n", "import { IS_WGPU } from '../../constants.ts';\nimport { createArray } from '../../utils/arrays.ts';\n\n/** If you create a const array e.g. `const COLORS = array<vec3f, COLOR_COUNT>(...);`,\n * Naga only allows consts indices. E.g. `COLORS[0]`, but no `COLORS[i]`. Fix this\n * by creating a giant `switch()`. Hope you did not execute this code in a render loop!\n */\nexport const nagaFixIndexIntoConstArray = (\n  arrayVarName: string,\n  arrayLen: number,\n  idxExpr: string,\n  exprFn: (x: string) => string\n) => {\n  const createCaseStmt = (_: unknown, i: number) => {\n    const arrayVal = `${arrayVarName}[${i}u]`;\n    const defaultSt = i == 0 ? ', default' : '';\n    return /* wgsl */ `case ${i}u ${defaultSt}: { ${exprFn(arrayVal)} }`;\n  };\n\n  return /* wgsl */ `\n  switch (${idxExpr}) {\n      ${createArray(arrayLen).map(createCaseStmt).join('\\n')}\n  }`;\n};\n\n/**\n * Example:\n *\n * `assignValueFromConstArray(\n *   'color: vec3f', 'COLORS', 14, 'idx % COLOR_COUNT'\n *  )`\n */\nexport const assignValueFromConstArray = (\n  newVarDecl: string,\n  arrayVarName: string,\n  arrayLen: number,\n  idxExpr: string\n) => {\n  const [varName, varType] = newVarDecl.split(':').map((x) => x?.trim());\n  if (varName == undefined || varType == undefined) {\n    throw new Error(`assignValueFromConstArray expected newVarDecl param to include variable name and type e.g. 'normal: vec3f'. Got '${newVarDecl}', where name='${varName}', type=${varType}`); // prettier-ignore\n  }\n\n  if (!IS_WGPU) {\n    return `let ${newVarDecl} = ${arrayVarName}[${idxExpr}];`;\n  }\n\n  const switchStmt = nagaFixIndexIntoConstArray(\n    arrayVarName,\n    arrayLen,\n    idxExpr,\n    (x) => `${varName} = ${x};`\n  );\n  return `var ${newVarDecl};\n  ${switchStmt}`;\n};\n", "import { SDFCollider } from '../../scene/sdfCollider/sdfCollider.ts';\nimport { assignValueFromConstArray } from '../_shaderSnippets/nagaFixes.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    sdfTexture: 1,\n    sdfSampler: 2,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n${SDFCollider.TEXTURE_SDF(b.sdfTexture, b.sdfSampler)}\n\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) positionOS: vec4f,\n  @location(1) uv: vec2f,\n};\n\nconst POSITIONS = array<vec2f, 6>(\n  vec2(0, 0),\n  vec2(0, 1),\n  vec2(1, 0),\n  vec2(0, 1),\n  vec2(1, 1),\n  vec2(1, 0)\n);\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) inVertexIndex : u32 // 0..6\n) -> VertexOutput {\n  let boundsMin = _uniforms.sdf.boundsMin.xyz;\n  let boundsMax = _uniforms.sdf.boundsMax.xyz;\n  let depthSlice = getSdfDebugDepthSlice();\n\n  ${assignValueFromConstArray('uv: vec2f', 'POSITIONS', 6, 'inVertexIndex')}\n  var positionOS = mix(boundsMin, boundsMax, vec3f(uv, depthSlice));\n\n  var result: VertexOutput;\n  let mvpMatrix = _uniforms.mvpMatrix;\n\n  result.position = mvpMatrix * vec4f(positionOS, 1.0);\n  result.positionOS = vec4f(positionOS, 1.0);\n  result.uv = uv;\n  return result;\n}\n\n\n@fragment\nfn main_fs(\n  fragIn: VertexOutput\n) -> @location(0) vec4f {\n  let boundsMin = _uniforms.sdf.boundsMin.xyz;\n  let boundsMax = _uniforms.sdf.boundsMax.xyz;\n  let depthSlice = getSdfDebugDepthSlice();\n  let opacity = select(1.0, 0.75, isSdfDebugSemiTransparent());\n\n  var color = vec3f(0., 0., 0.);\n  \n  // let samplePos = vec3f(fragIn.uv, depthSlice);\n  // let value = textureSampleLevel(_sdfTexture, _sdfSampler, samplePos, 0.0).x;\n  \n  let positionOS = fragIn.positionOS.xyz;\n  let value = sampleSDFCollider(boundsMin, boundsMax, positionOS);\n  if (value > 0.) { // outside\n    color.r = value;\n    color.r = 1.;\n  } else {\n    color.b = value;\n    color.b = 1.;\n  }\n  \n  // slight transparency for a bit easier debug\n  return vec4f(color.xyz, opacity);\n}\n\n\n`;\n", "import { SDFCollider } from '../../scene/sdfCollider/sdfCollider.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings,\n} from '../_shared/shared.ts';\nimport {\n  createDebugVolumePipeline,\n  cmdDrawDbgVolumeQuad,\n} from '../_shared/volumeDebug.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './drawSdfColliderPass.wgsl.ts';\n\nexport class DrawSdfColliderPass {\n  public static NAME: string = 'DrawSdfColliderPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(DrawSdfColliderPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = createDebugVolumePipeline(\n      device,\n      shaderModule,\n      outTextureFormat,\n      labelPipeline(DrawSdfColliderPass)\n    );\n  }\n\n  cmdDrawSdf(ctx: PassCtx) {\n    const sdf = ctx.scene.sdfCollider;\n    const bindings = this.bindingsCache.getBindings(sdf.name, () =>\n      this.createBindings(ctx, sdf)\n    );\n\n    cmdDrawDbgVolumeQuad(ctx, DrawSdfColliderPass, this.pipeline, bindings);\n  }\n\n  private createBindings = (ctx: PassCtx, sdf: SDFCollider): GPUBindGroup => {\n    const { device, globalUniforms } = ctx;\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(\n      DrawSdfColliderPass,\n      device,\n      this.pipeline,\n      [\n        globalUniforms.createBindingDesc(b.renderUniforms),\n        sdf.bindTexture(b.sdfTexture),\n        sdf.bindSampler(b.sdfSampler),\n      ]\n    );\n  };\n}\n", "import { GridDebugValue } from '../../constants.ts';\nimport { assignValueFromConstArray } from '../_shaderSnippets/nagaFixes.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\nimport { BUFFER_GRID_DENSITY_GRADIENT_AND_WIND } from '../simulation/grids/densityGradAndWindGrid.wgsl.ts';\nimport { BUFFER_GRID_DENSITY_VELOCITY } from '../simulation/grids/densityVelocityGrid.wgsl.ts';\nimport { GRID_UTILS } from '../simulation/grids/grids.wgsl.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n    densityVelocityBuffer: 1,\n    densityGradWindBuffer: 2,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${GENERIC_UTILS}\n${GRID_UTILS}\n\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n${BUFFER_GRID_DENSITY_VELOCITY(b.densityVelocityBuffer, 'read')}\n${BUFFER_GRID_DENSITY_GRADIENT_AND_WIND(b.densityGradWindBuffer, 'read')}\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) positionOS: vec4f,\n  @location(1) uv: vec2f,\n};\n\nconst POSITIONS = array<vec2f, 6>(\n  vec2(0, 0),\n  vec2(0, 1),\n  vec2(1, 0),\n  vec2(0, 1),\n  vec2(1, 1),\n  vec2(1, 0)\n);\n\n\n@vertex\nfn main_vs(\n  @builtin(vertex_index) inVertexIndex : u32 // 0..6\n) -> VertexOutput {\n  let boundsMin = _uniforms.gridData.boundsMin.xyz;\n  let boundsMax = _uniforms.gridData.boundsMax.xyz;\n  let depthSlice = getGridDebugDepthSlice();\n\n  // TODO [LOW] same as SDF. Move to shared lib\n  ${assignValueFromConstArray('uv: vec2f', 'POSITIONS', 6, 'inVertexIndex')}\n  var positionOS = mix(boundsMin, boundsMax, vec3f(uv, depthSlice));\n\n  var result: VertexOutput;\n  let mvpMatrix = _uniforms.mvpMatrix;\n\n  result.position = mvpMatrix * vec4f(positionOS, 1.0);\n  result.positionOS = vec4f(positionOS, 1.0);\n  result.uv = uv;\n  return result;\n}\n\n\n@fragment\nfn main_fs(\n  fragIn: VertexOutput\n) -> @location(0) vec4f {\n  let boundsMin = _uniforms.gridData.boundsMin.xyz;\n  let boundsMax = _uniforms.gridData.boundsMax.xyz;\n  var opacity = 0.6;\n\n  var displayMode = _uniforms.gridData.debugDisplayValue;\n  let absTheVector: bool = displayMode >= 16u;\n  displayMode = select(displayMode, displayMode - 16u, absTheVector);\n  \n  let positionOS = fragIn.positionOS.xyz;\n\n  var color = vec3f(0., 0., 0.);\n  let densityVelocity = _getGridDensityVelocity(\n    boundsMin,\n    boundsMax,\n    positionOS\n  );\n  let gridPoint = getClosestGridPoint(\n    boundsMin,\n    boundsMax,\n    positionOS\n  );\n  let densityGradAndWind = _getGridDensityGradAndWindAtPoint(gridPoint);\n\n\n  if (displayMode == ${GridDebugValue.VELOCITY}u) {\n    getVectorColor(&color, densityVelocity.velocity, absTheVector);\n  \n  } else if (displayMode == ${GridDebugValue.DENSITY_GRADIENT}u) {\n    let grad = densityGradAndWind.densityGrad;\n    getVectorColor(&color, grad, absTheVector);\n  \n  } else if (displayMode == ${GridDebugValue.WIND}u) {\n    let windStr = densityGradAndWind.windStrength;\n    if (windStr < 0.01) { color.r = 1.0; }\n    else if (windStr < 0.99) { color.b = 1.0; }\n    else { color.g = 1.0; }\n\n  } else {\n    // color.r = select(0.0, 1.0, value.density != 0);\n    color.r = densityVelocity.density;\n  }\n\n  // slight transparency for a bit easier debug\n  return vec4f(color.xyz, opacity);\n}\n\nfn getVectorColor(color: ptr<function, vec3f>, v: vec3f, absTheVector: bool) {\n  if (length(v) < 0.001){ return; }\n\n  var result = normalize(v);\n  if (absTheVector) {\n    result = abs(result);\n  }\n\n  (*color) = result;\n}\n\n`;\n", "import { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  assignResourcesToBindings,\n  labelPipeline,\n} from '../_shared/shared.ts';\nimport {\n  createDebugVolumePipeline,\n  cmdDrawDbgVolumeQuad,\n} from '../_shared/volumeDebug.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './drawGridDbgPass.wgsl.ts';\n\nexport class DrawGridDbgPass {\n  public static NAME: string = 'DrawGridDbgPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(DrawGridDbgPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = createDebugVolumePipeline(\n      device,\n      shaderModule,\n      outTextureFormat,\n      labelPipeline(DrawGridDbgPass)\n    );\n  }\n\n  cmdDrawGridDbg(ctx: PassCtx) {\n    const bindings = this.bindingsCache.getBindings('-', () =>\n      this.createBindings(ctx)\n    );\n\n    cmdDrawDbgVolumeQuad(ctx, DrawGridDbgPass, this.pipeline, bindings);\n  }\n\n  private createBindings = (ctx: PassCtx): GPUBindGroup => {\n    const { device, globalUniforms, physicsForcesGrid } = ctx;\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(DrawGridDbgPass, device, this.pipeline, [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n      physicsForcesGrid.bindDensityVelocityBuffer(b.densityVelocityBuffer),\n      physicsForcesGrid.bindDensityGradAndWindBuffer(b.densityGradWindBuffer),\n    ]);\n  };\n}\n", "import { BUFFER_HAIR_DATA } from '../../scene/hair/hairDataBuffer.ts';\nimport { BUFFER_HAIR_POINTS_POSITIONS_R } from '../../scene/hair/hairPointsPositionsBuffer.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_GRID_DENSITY_VELOCITY } from './grids/densityVelocityGrid.wgsl.ts';\nimport { GRID_UTILS } from './grids/grids.wgsl.ts';\nimport { SimulationUniformsBuffer } from './simulationUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: 32, // TODO [LOW] set better values\n  bindings: {\n    simulationUniforms: 0,\n    hairData: 1,\n    positionsPrev: 2,\n    positionsNow: 3,\n    gridBuffer: 4,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${GENERIC_UTILS}\n${GRID_UTILS}\n\n${SimulationUniformsBuffer.SHADER_SNIPPET(b.simulationUniforms)}\n${BUFFER_GRID_DENSITY_VELOCITY(b.gridBuffer, 'read_write')}\n${BUFFER_HAIR_DATA(b.hairData)}\n${BUFFER_HAIR_POINTS_POSITIONS_R(b.positionsPrev, {\n  bufferName: '_hairPointPositionsPrev',\n  getterName: '_getHairPointPositionPrev',\n})}\n${BUFFER_HAIR_POINTS_POSITIONS_R(b.positionsNow, {\n  bufferName: '_hairPointPositionsNow',\n  getterName: '_getHairPointPositionNow',\n})}\n\n\n// Everything is in object space (unless noted otherwise).\n// The comments assume 32 points per strand to make it easier\n@compute\n@workgroup_size(${c.workgroupSizeX}, 1, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n) {\n  let strandsCount: u32 = _hairData.strandsCount;\n  let pointsPerStrand: u32 = _hairData.pointsPerStrand; // 32\n  // let segmentCount: u32 = pointsPerStrand - 1u; // 31\n  let boundsMin = _uniforms.gridData.boundsMin.xyz;\n  let boundsMax = _uniforms.gridData.boundsMax.xyz;\n\n  let strandIdx = global_id.x;\n  if (strandIdx >= strandsCount) { return; }\n  // let isInvalidDispatch = strandIdx >= strandsCount; // some memory accesses will return garbage. It's OK as long as we don't try to override real data?\n\n  for (var i = 0u; i < pointsPerStrand; i += 1u) {\n    let posPrev = _getHairPointPositionPrev(pointsPerStrand, strandIdx, i).xyz;\n    let posNow  = _getHairPointPositionNow (pointsPerStrand, strandIdx, i).xyz;\n    let velocity = posNow - posPrev; // we can div. by velocity during integration\n\n    // density is just a 'I am here' counter. Weighted by triliner interpolation\n    _addGridDensityVelocity(\n      boundsMin, boundsMax,\n      posNow,\n      velocity\n    );\n  }\n}\n\n`;\n", "import { HairObject } from '../../scene/hair/hairObject.ts';\nimport { getItemsPerThread } from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './gridPostSimPass.wgsl.ts';\n\nexport class GridPostSimPass {\n  public static NAME: string = 'GridPostSimPass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(GridPostSimPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(GridPostSimPass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  cmdUpdateGridsAfterSim(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler, physicsForcesGrid } = ctx;\n\n    physicsForcesGrid.clearDensityVelocityBuffer(cmdBuf);\n\n    const computePass = cmdBuf.beginComputePass({\n      label: GridPostSimPass.NAME,\n      timestampWrites: profiler?.createScopeGpu(GridPostSimPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      () => this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    // dispatch\n    const workgroupsX = getItemsPerThread(\n      hairObject.strandsCount,\n      SHADER_PARAMS.workgroupSizeX\n    );\n    // console.log(`${GridPostSimPass.NAME}.dispatch(${workgroupsX}, 1, 1)`);\n    computePass.dispatchWorkgroups(workgroupsX, 1, 1);\n\n    computePass.end();\n  }\n\n  private createBindings = (\n    ctx: PassCtx,\n    hairObject: HairObject\n  ): GPUBindGroup => {\n    const { device, simulationUniforms, physicsForcesGrid } = ctx;\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings2(\n      GridPostSimPass,\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      device,\n      this.pipeline,\n      [\n        simulationUniforms.createBindingDesc(b.simulationUniforms),\n        hairObject.bindHairData(b.hairData),\n        hairObject.bindPointsPositions_PREV(b.positionsPrev),\n        hairObject.bindPointsPositions(b.positionsNow),\n        physicsForcesGrid.bindDensityVelocityBuffer(b.gridBuffer),\n      ]\n    );\n  };\n}\n", "import { SDFCollider } from '../../scene/sdfCollider/sdfCollider.ts';\nimport { GENERIC_UTILS } from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { BUFFER_GRID_DENSITY_GRADIENT_AND_WIND } from './grids/densityGradAndWindGrid.wgsl.ts';\nimport { BUFFER_GRID_DENSITY_VELOCITY } from './grids/densityVelocityGrid.wgsl.ts';\nimport { GRID_UTILS } from './grids/grids.wgsl.ts';\nimport { SimulationUniformsBuffer } from './simulationUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  workgroupSizeX: 32, // TODO [LOW] set better values\n  bindings: {\n    simulationUniforms: 0,\n    densityVelocityBuffer: 1,\n    densityGradWindBuffer: 2,\n    sdfTexture: 3,\n    sdfSampler: 4,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst c = SHADER_PARAMS;\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${GENERIC_UTILS}\n${GRID_UTILS}\n\n${SimulationUniformsBuffer.SHADER_SNIPPET(b.simulationUniforms)}\n${BUFFER_GRID_DENSITY_VELOCITY(b.densityVelocityBuffer, 'read')}\n${BUFFER_GRID_DENSITY_GRADIENT_AND_WIND(b.densityGradWindBuffer, 'read_write')}\n${SDFCollider.TEXTURE_SDF(b.sdfTexture, b.sdfSampler)}\n\n\n// Everything is in object space (unless noted otherwise).\n// The comments assume 32 points per strand to make it easier\n@compute\n@workgroup_size(${c.workgroupSizeX}, 1, 1)\nfn main(\n  @builtin(global_invocation_id) global_id: vec3<u32>,\n) {\n  let boundsMin = _uniforms.gridData.boundsMin.xyz;\n  let boundsMax = _uniforms.gridData.boundsMax.xyz;\n  let totalGridPoints = GRID_DIMS * GRID_DIMS * GRID_DIMS;\n  \n  // TBH. we could also skip if density near the point is 0\n  if (global_id.x >= totalGridPoints) { return; }\n\n  // get grid point e.g. (0,1,4)\n  let gridPoint = deconstructId(global_id.x);\n  // if (gridPoint.z < (GRID_DIMS / 2u)) { // dbg\n    // _gridDensityGradAndWindVelocity[global_id.x].windStrength = gridEncodeValue(1.);\n  // }\n  \n  // get world position\n  let position = getGridPointPositionWS(boundsMin, boundsMax, gridPoint);\n  // if (position.y < 1.5352792739868164) { // dbg\n    // _gridDensityGradAndWindVelocity[global_id.x].windStrength = gridEncodeValue(1.);\n  // }\n\n  // wind\n  let windStrength = getWindStrength(position);\n  \n  // density gradient\n  let densityGrad = getDensityGradient(boundsMin, boundsMax, gridPoint);\n\n  // write\n  _setGridDensityGradAndWind(\n    gridPoint,\n    densityGrad,\n    windStrength\n  );\n}\n\n\nfn deconstructId(id: u32) -> vec3u {\n  let z = id / (GRID_DIMS * GRID_DIMS);\n  let idXY = id - (z * GRID_DIMS * GRID_DIMS);\n  let y = idXY / GRID_DIMS;\n  let x = idXY % GRID_DIMS;\n  return vec3u(x, y, z);\n}\n\nconst WIND_LULL = 0.0;\nconst WIND_HALF = 0.5;\nconst WIND_FULL = 1.0;\n\nfn getWindStrength(p: vec3f) -> f32 {\n  let sdfBoundsMin = _uniforms.sdf.boundsMin.xyz;\n  let sdfBoundsMax = _uniforms.sdf.boundsMax.xyz;\n  let windDirection = _uniforms.wind.xyz;\n  let windColisionTraceOffset = _uniforms.windColisionTraceOffset;\n\n  // ignore sdfOffset, as it would create big lull zone around the object\n  let sdfDistance = sampleSDFCollider(sdfBoundsMin, sdfBoundsMax, p);\n  if (sdfDistance < 0.) { return WIND_LULL; } // point inside mesh, no wind\n\n  // check if there is a collider between the point and the wind origin.\n  // TBH. You could make a fancy fluid sim here.\n  let towardWindDir = -normalize(windDirection);\n  // trace into the wind hoping to hit a mesh. Enlarge step by correction\n  let rayTraceTowardWindPos = p + towardWindDir * sdfDistance * windColisionTraceOffset;\n  let sdfDistance2 = sampleSDFCollider(sdfBoundsMin, sdfBoundsMax, rayTraceTowardWindPos);\n  if (sdfDistance2 < 0.) { return WIND_HALF; }\n\n  return WIND_FULL;\n}\n\n// https://youtu.be/XmzBREkK8kY?si=fzOcQi_47D9roJKY&t=644\nfn getDensityGradient(\n  gridBoundsMin: vec3f,\n  gridBoundsMax: vec3f,\n  gridPoint: vec3u\n) -> vec3f {\n  let density0 = _getGridDensityAtPoint(gridPoint);\n  let idx0 = _getGridIdx(gridPoint);\n  var result = vec3f(0.);\n\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i( 1,  0,  0));\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i(-1,  0,  0));\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i( 0,  1,  0));\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i( 0, -1,  0));\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i( 0,  0,  1));\n  result += getDensityGradientFromDirection(density0, idx0, gridPoint, vec3i( 0,  0, -1));\n\n  return result;\n}\n\nfn getDensityGradientFromDirection(\n  density0: f32,\n  idx0: u32,\n  p: vec3u,\n  offset: vec3i,\n) -> vec3f {\n  let pOther_i = vec3i(p) + offset; // 'i' means signed. Coords can be <0\n  if (pOther_i.x < 0 || pOther_i.y < 0 || pOther_i.z < 0) {\n    return vec3f(0.);\n    // return vec3f(1., 0., 0.); // dbg\n  }\n\n  let pOther = vec3u(pOther_i);\n  var idxOther = _getGridIdx(pOther);\n  // check near bounds. _getGridIdx() has a clamp()\n  if (idx0 == idxOther) {\n    return vec3f(0.);\n    // return vec3f(0., 1., 0.); // dbg\n  }\n\n  let densityOther = _getGridDensityAtPoint(pOther);\n\n  // densityDiff NEGATIVE: original point 'p' has LESS particles near than the 'pOther'. \n  //                       Do NOTHING, other cell will calculate it's best resolution.\n  // densityDiff POSITIVE: original point 'p' has MORE particles near than the 'pOther'.\n  //                       Move particles toward 'pOther'.\n  let densityDiff = density0 - densityOther;\n  return max(densityDiff, 0.) * vec3f(offset); // I though we should negate here, but it works if we don't?\n  // return vec3f(0., 0., 1.); // dbg\n}\n\n`;\n", "import { CONFIG } from '../../constants.ts';\nimport { HairObject } from '../../scene/hair/hairObject.ts';\nimport { getItemsPerThread } from '../../utils/webgpu.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  assignResourcesToBindings2,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './gridPreSimPass.wgsl.ts';\n\nexport class GridPreSimPass {\n  public static NAME: string = 'GridPreSimPass';\n\n  private readonly pipeline: GPUComputePipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(GridPreSimPass),\n      code: SHADER_CODE(),\n    });\n    this.pipeline = device.createComputePipeline({\n      label: labelPipeline(GridPreSimPass),\n      layout: 'auto',\n      compute: {\n        module: shaderModule,\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  cmdUpdateGridsBeforeSim(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, profiler, physicsForcesGrid } = ctx;\n\n    physicsForcesGrid.clearDensityGradAndWindBuffer(cmdBuf);\n\n    const computePass = cmdBuf.beginComputePass({\n      label: GridPreSimPass.NAME,\n      timestampWrites: profiler?.createScopeGpu(GridPreSimPass.NAME),\n    });\n\n    const bindings = this.bindingsCache.getBindings(\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      () => this.createBindings(ctx, hairObject)\n    );\n    computePass.setPipeline(this.pipeline);\n    computePass.setBindGroup(0, bindings);\n\n    // dispatch\n    const gridDims = CONFIG.hairSimulation.physicsForcesGrid.dims;\n    const threadsTotal = gridDims * gridDims * gridDims;\n    const workgroupsX = getItemsPerThread(\n      threadsTotal,\n      SHADER_PARAMS.workgroupSizeX\n    );\n    // console.log(`${GridPreSimPass.NAME}.dispatch(${workgroupsX}, 1, 1)`);\n    computePass.dispatchWorkgroups(workgroupsX, 1, 1);\n\n    computePass.end();\n  }\n\n  private createBindings = (\n    ctx: PassCtx,\n    hairObject: HairObject\n  ): GPUBindGroup => {\n    const { device, simulationUniforms, physicsForcesGrid, scene } = ctx;\n    const b = SHADER_PARAMS.bindings;\n    const sdf = scene.sdfCollider;\n\n    return assignResourcesToBindings2(\n      GridPreSimPass,\n      `${hairObject.name}-${hairObject.currentPositionsBufferIdx}`,\n      device,\n      this.pipeline,\n      [\n        simulationUniforms.createBindingDesc(b.simulationUniforms),\n        physicsForcesGrid.bindDensityVelocityBuffer(b.densityVelocityBuffer),\n        physicsForcesGrid.bindDensityGradAndWindBuffer(b.densityGradWindBuffer),\n        sdf.bindTexture(b.sdfTexture),\n        sdf.bindSampler(b.sdfSampler),\n      ]\n    );\n  };\n}\n", "import { CONFIG } from '../../constants.ts';\nimport * as SHADER_SNIPPETS from '../_shaderSnippets/shaderSnippets.wgls.ts';\nimport { RenderUniformsBuffer } from '../renderUniformsBuffer.ts';\n\nexport const SHADER_PARAMS = {\n  bindings: {\n    renderUniforms: 0,\n  },\n};\n\n///////////////////////////\n/// SHADER CODE\n///////////////////////////\nconst b = SHADER_PARAMS.bindings;\n\nexport const SHADER_CODE = () => /* wgsl */ `\n\n${SHADER_SNIPPETS.GET_MVP_MAT}\n${SHADER_SNIPPETS.GENERIC_UTILS}\n${RenderUniformsBuffer.SHADER_SNIPPET(b.renderUniforms)}\n\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) @interpolate(flat) axisIdx: u32,\n};\n\nconst AXIS_X = 0u;\nconst AXIS_Y = 1u;\nconst AXIS_Z = 2u;\n\nconst LINE_LENGTH = ${CONFIG.colliderGizmo.lineLength};\nconst LINE_WIDTH = ${CONFIG.colliderGizmo.lineWidth};\n\n@vertex\nfn main_vs(\n  @builtin(instance_index) inInstanceIdx: u32,\n  @builtin(vertex_index) inVertexIndex : u32\n) -> VertexOutput {\n  let colSphereWS = _uniforms.collisionSpherePosition;\n  let viewMatrix = _uniforms.viewMatrix;\n  let projMatrix = _uniforms.projMatrix;\n\n  let axisVec = getAxisVector(inInstanceIdx);\n\n  let lineStartWS = vec4f(colSphereWS.xyz + axisVec * LINE_WIDTH, 1.0);\n  let lineEndWS   = vec4f(lineStartWS.xyz + axisVec * LINE_LENGTH, 1.0);\n  let lineStartVS = viewMatrix * lineStartWS;\n  let lineEndVS = viewMatrix * lineEndWS;\n  let tangentVS = lineEndVS.xyz - lineStartVS.xyz;\n  let up: vec3f = safeNormalize3(cross(tangentVS.xyz, vec3f(0., 0., 1.)));\n\n  let linePointVS = select(lineEndVS, lineStartVS, (inVertexIndex & 0x01u) == 0u);\n  let deltaSign: f32 = select(1.0, -1.0, inVertexIndex == 2u || inVertexIndex == 3u || inVertexIndex == 4u);\n  let positionVs = linePointVS.xyz + deltaSign * up * LINE_WIDTH;\n\n  var result: VertexOutput;\n  result.position = projMatrix * vec4f(positionVs, 1.0);\n  result.axisIdx = inInstanceIdx;\n  return result;\n}\n\n\n@fragment\nfn main_fs(\n  fragIn: VertexOutput\n) -> @location(0) vec4f {\n  // return vec4f(1.0, 0.0, 0.0, 1.0);\n  let axisVec = getAxisVector(fragIn.axisIdx);\n  \n  let isActive = fragIn.axisIdx == _uniforms.gizmoActiveState;\n  let stateMod: f32 = select(0.5, 1.0, isActive);\n  \n  return vec4f(axisVec.rgb * stateMod, 1.0);\n}\n\n\nfn getAxisVector(axisIdx: u32) -> vec3f {\n  if (axisIdx == AXIS_Y) { return vec3f(0.0, 1.0, 0.0); }\n  if (axisIdx == AXIS_Z) { return vec3f(0.0, 0.0, 1.0); }\n  return vec3f(1.0, 0.0, 0.0);\n}\n`;\n", "import { CONFIG, GizmoAxis, GizmoAxisIdx } from '../../constants.ts';\nimport { BindingsCache } from '../_shared/bindingsCache.ts';\nimport {\n  labelShader,\n  labelPipeline,\n  useColorAttachment,\n  assignResourcesToBindings,\n} from '../_shared/shared.ts';\nimport { PassCtx } from '../passCtx.ts';\nimport { SHADER_CODE, SHADER_PARAMS } from './drawGizmoPass.wgsl.ts';\n\nexport class DrawGizmoPass {\n  public static NAME: string = 'DrawGizmoPass';\n\n  private readonly pipeline: GPURenderPipeline;\n  private readonly bindingsCache = new BindingsCache();\n\n  constructor(device: GPUDevice, outTextureFormat: GPUTextureFormat) {\n    const shaderModule = device.createShaderModule({\n      label: labelShader(DrawGizmoPass),\n      code: SHADER_CODE(),\n    });\n\n    this.pipeline = device.createRenderPipeline({\n      label: labelPipeline(DrawGizmoPass),\n      layout: 'auto',\n      vertex: {\n        module: shaderModule,\n        entryPoint: 'main_vs',\n      },\n      fragment: {\n        module: shaderModule,\n        entryPoint: 'main_fs',\n        targets: [{ format: outTextureFormat }],\n      },\n      primitive: {\n        cullMode: 'none',\n        topology: 'triangle-list',\n      },\n    });\n  }\n\n  onViewportResize = () => {\n    this.bindingsCache.clear();\n  };\n\n  cmdDrawGizmo(ctx: PassCtx) {\n    const { cmdBuf, profiler, hdrRenderTexture } = ctx;\n\n    const renderPass = cmdBuf.beginRenderPass({\n      label: DrawGizmoPass.NAME,\n      colorAttachments: [\n        useColorAttachment(hdrRenderTexture, CONFIG.clearColor, 'load'),\n      ],\n      timestampWrites: profiler?.createScopeGpu(DrawGizmoPass.NAME),\n    });\n\n    // set render pass data\n    const bindings = this.bindingsCache.getBindings('-', () =>\n      this.createBindings(ctx)\n    );\n    renderPass.setPipeline(this.pipeline);\n    renderPass.setBindGroup(0, bindings);\n\n    const cfg = CONFIG.colliderGizmo;\n    if (cfg.isDragging) {\n      // deno-lint-ignore no-explicit-any\n      this.cmdDrawSingleAxis(renderPass, cfg.activeAxis as any);\n    } else {\n      this.cmdDrawAllAxis(renderPass);\n    }\n\n    // fin\n    renderPass.end();\n  }\n\n  private cmdDrawAllAxis(renderPass: GPURenderPassEncoder) {\n    renderPass.draw(\n      6, // vertex count\n      3, // instance count\n      0, // first index\n      0 // first instance\n    );\n  }\n\n  private cmdDrawSingleAxis(\n    renderPass: GPURenderPassEncoder,\n    axisIdx: GizmoAxisIdx\n  ) {\n    if (axisIdx === GizmoAxis.NONE) {\n      return;\n    }\n    renderPass.draw(\n      6, // vertex count\n      1, // instance count\n      0, // first index\n      axisIdx // first instance\n    );\n  }\n\n  private createBindings = (ctx: PassCtx): GPUBindGroup => {\n    const { device, globalUniforms } = ctx;\n    const b = SHADER_PARAMS.bindings;\n\n    return assignResourcesToBindings(DrawGizmoPass, device, this.pipeline, [\n      globalUniforms.createBindingDesc(b.renderUniforms),\n    ]);\n  };\n}\n", "import { Mat4, mat4 } from 'wgpu-matrix';\nimport { RenderUniformsBuffer } from './passes/renderUniformsBuffer.ts';\nimport { Dimensions, debounce } from './utils/index.ts';\nimport Input from './sys_web/input.ts';\nimport {\n  AO_TEX_FORMAT,\n  CONFIG,\n  DEPTH_FORMAT,\n  DISPLAY_MODE,\n  HDR_RENDER_TEX_FORMAT,\n  NORMALS_TEX_FORMAT,\n} from './constants.ts';\nimport { Camera } from './camera.ts';\nimport { GpuProfiler } from './gpuProfiler.ts';\nimport { Scene } from './scene/scene.ts';\nimport { assertIsGPUTextureView } from './utils/webgpu.ts';\nimport {\n  createCameraProjectionMat,\n  getViewProjectionMatrix,\n} from './utils/matrices.ts';\nimport { PassCtx } from './passes/passCtx.ts';\nimport { PresentPass } from './passes/presentPass/presentPass.ts';\nimport { DrawMeshesPass } from './passes/drawMeshes/drawMeshesPass.ts';\nimport { DrawBackgroundGradientPass } from './passes/drawBackgroundGradient/drawBackgroundGradientPass.ts';\nimport { HwHairPass } from './passes/hwHair/hwHairPass.ts';\nimport { HairTilesPass } from './passes/swHair/hairTilesPass.ts';\nimport { HairCombinePass } from './passes/hairCombine/hairCombinePass.ts';\nimport { HairFinePass } from './passes/swHair/hairFinePass.ts';\nimport { HairShadingPass } from './passes/hairShadingPass/hairShadingPass.ts';\nimport { ShadowMapPass } from './passes/shadowMapPass/shadowMapPass.ts';\nimport { AoPass } from './passes/aoPass/aoPass.ts';\nimport { HairObject } from './scene/hair/hairObject.ts';\nimport { SimulationUniformsBuffer } from './passes/simulation/simulationUniformsBuffer.ts';\nimport { HairSimIntegrationPass } from './passes/simulation/hairSimIntegrationPass.ts';\nimport { DrawSdfColliderPass } from './passes/drawSdfCollider/drawSdfColliderPass.ts';\nimport { DrawGridDbgPass } from './passes/drawGridDbg/drawGridDbgPass.ts';\nimport { GridPostSimPass } from './passes/simulation/gridPostSimPass.ts';\nimport { GridPreSimPass } from './passes/simulation/gridPreSimPass.ts';\nimport { DrawGizmoPass } from './passes/drawGizmo/drawGizmoPass.ts';\n\nexport class Renderer {\n  public readonly cameraCtrl: Camera;\n  public projectionMat: Mat4;\n  private readonly _viewProjectionMatrix = mat4.identity(); // cached to prevent allocs.\n  private readonly viewportSize: Dimensions = { width: 0, height: 0 };\n  private frameIdx = 0;\n\n  // render target textures\n  private depthTexture: GPUTexture = undefined!; // see this.handleViewportResize()\n  private depthTextureView: GPUTextureView = undefined!; // see this.handleViewportResize()\n  private hdrRenderTexture: GPUTexture = undefined!; // see this.handleViewportResize()\n  private hdrRenderTextureView: GPUTextureView = undefined!; // see this.handleViewportResize()\n  private normalsTexture: GPUTexture = undefined!; // see this.handleViewportResize()\n  private normalsTextureView: GPUTextureView = undefined!; // see this.handleViewportResize()\n  private aoTexture: GPUTexture = undefined!; // see this.handleViewportResize()\n  private aoTextureView: GPUTextureView = undefined!; // see this.handleViewportResize()\n\n  // rendering\n  private readonly renderUniformBuffer: RenderUniformsBuffer;\n  // passes\n  private readonly drawBackgroundGradientPass: DrawBackgroundGradientPass;\n  private readonly shadowMapPass: ShadowMapPass;\n  private readonly aoPass: AoPass;\n  private readonly drawMeshesPass: DrawMeshesPass;\n  private readonly drawGizmoPass: DrawGizmoPass;\n  private readonly hwHairPass: HwHairPass;\n  private readonly hairTilesPass: HairTilesPass;\n  private readonly hairShadingPass: HairShadingPass;\n  private readonly hairFinePass: HairFinePass;\n  private readonly hairCombinePass: HairCombinePass;\n  private readonly presentPass: PresentPass;\n\n  // simulation\n  private readonly simulationUniformsBuffer: SimulationUniformsBuffer;\n  // passes\n  private readonly hairSimIntegrationPass: HairSimIntegrationPass;\n  private readonly gridPreSimPass: GridPreSimPass;\n  private readonly gridPostSimPass: GridPostSimPass;\n  private readonly drawSdfColliderPass: DrawSdfColliderPass;\n  private readonly drawGridDbgPass: DrawGridDbgPass;\n\n  constructor(\n    private readonly device: GPUDevice,\n    viewportSize: Dimensions,\n    preferredCanvasFormat: GPUTextureFormat,\n    private readonly profiler?: GpuProfiler\n  ) {\n    this.cameraCtrl = new Camera();\n    this.projectionMat = createCameraProjectionMat(\n      CONFIG.camera.projection,\n      viewportSize\n    );\n    this.renderUniformBuffer = new RenderUniformsBuffer(device);\n\n    // passes\n    this.drawBackgroundGradientPass = new DrawBackgroundGradientPass(\n      device,\n      HDR_RENDER_TEX_FORMAT\n    );\n    this.shadowMapPass = new ShadowMapPass(device);\n    this.aoPass = new AoPass(device, AO_TEX_FORMAT);\n    this.drawMeshesPass = new DrawMeshesPass(\n      device,\n      HDR_RENDER_TEX_FORMAT,\n      NORMALS_TEX_FORMAT\n    );\n    this.drawGizmoPass = new DrawGizmoPass(device, HDR_RENDER_TEX_FORMAT);\n    this.hwHairPass = new HwHairPass(\n      device,\n      HDR_RENDER_TEX_FORMAT,\n      NORMALS_TEX_FORMAT\n    );\n    this.hairTilesPass = new HairTilesPass(device);\n    this.hairShadingPass = new HairShadingPass(device);\n    this.hairFinePass = new HairFinePass(device);\n    this.hairCombinePass = new HairCombinePass(device, HDR_RENDER_TEX_FORMAT);\n    this.presentPass = new PresentPass(device, preferredCanvasFormat);\n\n    // simulation\n    this.simulationUniformsBuffer = new SimulationUniformsBuffer(device);\n    this.hairSimIntegrationPass = new HairSimIntegrationPass(device);\n    this.gridPreSimPass = new GridPreSimPass(device);\n    this.gridPostSimPass = new GridPostSimPass(device);\n    this.drawSdfColliderPass = new DrawSdfColliderPass(\n      device,\n      HDR_RENDER_TEX_FORMAT\n    );\n    this.drawGridDbgPass = new DrawGridDbgPass(device, HDR_RENDER_TEX_FORMAT);\n\n    this.handleViewportResize(viewportSize);\n  }\n\n  updateCamera(deltaTime: number, input: Input) {\n    this.cameraCtrl.update(deltaTime, input);\n  }\n\n  /** Update stuff before first frame. Usually things that depend on depth/normals */\n  beforeFirstFrame(scene: Scene) {\n    const cmdBuf = this.device.createCommandEncoder({\n      label: 'renderer--before-first-frame',\n    });\n\n    const hairSimCfg = CONFIG.hairSimulation;\n    const ctx: PassCtx = this.createPassCtx(cmdBuf, scene);\n\n    // update GPU uniforms\n    this.renderUniformBuffer.update(ctx);\n    this.simulationUniformsBuffer.update(ctx);\n\n    // send the initial strand positions into the grid for density grad\n    if (hairSimCfg.physicsForcesGrid.enableUpdates) {\n      this.gridPostSimPass.cmdUpdateGridsAfterSim(ctx, scene.hairObject);\n    }\n\n    // init stuff for first frame\n    this.drawMeshesPass.cmdDrawMeshes(ctx);\n\n    const { hairObject } = ctx.scene;\n    this.updateResourcesForNextFrame(ctx, hairObject);\n\n    this.device.queue.submit([cmdBuf.finish()]);\n  }\n\n  cmdRender(\n    cmdBuf: GPUCommandEncoder,\n    scene: Scene,\n    screenTexture: GPUTextureView\n  ) {\n    assertIsGPUTextureView(screenTexture);\n    const hairSimCfg = CONFIG.hairSimulation;\n    const ctx: PassCtx = this.createPassCtx(cmdBuf, scene);\n    const { displayMode } = CONFIG;\n\n    // update GPU uniforms\n    this.renderUniformBuffer.update(ctx);\n    this.simulationUniformsBuffer.update(ctx);\n\n    // simulation\n    this.simulateHair(ctx, scene.hairObject);\n\n    // draws\n    this.drawBackgroundGradientPass.cmdDraw(ctx);\n    this.cmdDrawScene(ctx);\n    if (\n      displayMode === DISPLAY_MODE.HW_RENDER ||\n      displayMode === DISPLAY_MODE.FINAL\n    ) {\n      this.drawGizmoPass.cmdDrawGizmo(ctx);\n    }\n\n    // dbg\n    if (hairSimCfg.sdf.showDebugView) {\n      this.drawSdfColliderPass.cmdDrawSdf(ctx);\n    } else if (hairSimCfg.physicsForcesGrid.showDebugView) {\n      this.drawGridDbgPass.cmdDrawGridDbg(ctx);\n    }\n\n    // present: draw to final render texture\n    this.presentPass.cmdDraw(ctx, screenTexture, 'load');\n\n    // done\n    this.frameIdx += 1;\n  }\n\n  private simulateHair(ctx: PassCtx, hairObject: HairObject) {\n    const { cmdBuf, physicsForcesGrid } = ctx;\n    const hairSimCfg = CONFIG.hairSimulation;\n\n    if (hairSimCfg.nextFrameResetSimulation) {\n      hairObject.resetSimulation(cmdBuf);\n      physicsForcesGrid.clearDensityGradAndWindBuffer(cmdBuf);\n      physicsForcesGrid.clearDensityVelocityBuffer(cmdBuf);\n\n      hairSimCfg.nextFrameResetSimulation = false;\n      return;\n    }\n\n    if (!hairSimCfg.enabled) {\n      physicsForcesGrid.clearDensityGradAndWindBuffer(cmdBuf);\n      physicsForcesGrid.clearDensityVelocityBuffer(cmdBuf);\n      return;\n    }\n\n    if (hairSimCfg.physicsForcesGrid.enableUpdates) {\n      this.gridPreSimPass.cmdUpdateGridsBeforeSim(ctx, hairObject);\n    }\n\n    this.hairSimIntegrationPass.cmdSimulateHairPositions(ctx, hairObject);\n\n    if (hairSimCfg.physicsForcesGrid.enableUpdates) {\n      this.gridPostSimPass.cmdUpdateGridsAfterSim(ctx, hairObject);\n    }\n  }\n\n  private cmdDrawScene(ctx: PassCtx) {\n    const { hairObject } = ctx.scene;\n\n    this.shadowMapPass.cmdUpdateShadowMap(ctx);\n\n    this.drawMeshesPass.cmdDrawMeshes(ctx);\n\n    const { displayMode } = CONFIG;\n    if (\n      displayMode === DISPLAY_MODE.HW_RENDER ||\n      // debug modes that can use early-out without sw raster\n      displayMode === DISPLAY_MODE.DEPTH ||\n      displayMode === DISPLAY_MODE.AO ||\n      displayMode === DISPLAY_MODE.NORMALS\n    ) {\n      this.hwHairPass.cmdDrawHair(ctx);\n      this.aoPass.cmdCalcAo(ctx); // might or might not be used if displayMode is right\n      this.hairShadingPass.cmdComputeShadingPoints(ctx, hairObject); // requires depth\n      return;\n    }\n\n    this.hairTilesPass.clearFramebuffer(ctx);\n    this.hairFinePass.clearFramebuffer(ctx);\n\n    this.hairTilesPass.cmdDrawHairToTiles(ctx, hairObject);\n    if (displayMode !== DISPLAY_MODE.TILES) {\n      this.hairFinePass.cmdRasterizeSlicesHair(ctx, hairObject);\n    }\n    this.hairCombinePass.cmdCombineRasterResults(ctx);\n\n    this.updateResourcesForNextFrame(ctx, hairObject);\n  }\n\n  private updateResourcesForNextFrame(ctx: PassCtx, hairObject: HairObject) {\n    // we use hardware rasterizer as software one is pain to write the values.\n    // If we had 64bit atomics then sure. But without it, the alternatives are a bit complex.\n    // While depth can just be an atomicMin<u32> during tile pass, the normal/tangent..\n    // In nanite-webpgu I've used 16 bit for depth and 2*u8 oct. encoded normals.\n    // But this is hair, tiny depth imperfections will be visible. Alternatives are.. complex.\n    // And I'm lazy.\n    this.hwHairPass.cmdDrawHair(ctx); // writes hair to depth+normal buffer\n    this.aoPass.cmdCalcAo(ctx); // requires depth+normals\n    this.hairShadingPass.cmdComputeShadingPoints(ctx, hairObject); // requires depth\n  }\n\n  public get viewMatrix() {\n    return this.cameraCtrl.viewMatrix;\n  }\n\n  private createPassCtx(cmdBuf: GPUCommandEncoder, scene: Scene): PassCtx {\n    const vpMatrix = getViewProjectionMatrix(\n      this.viewMatrix,\n      this.projectionMat,\n      this._viewProjectionMatrix\n    );\n    return {\n      frameIdx: this.frameIdx,\n      device: this.device,\n      cmdBuf,\n      viewport: this.viewportSize,\n      scene,\n      hdrRenderTexture: this.hdrRenderTextureView,\n      normalsTexture: this.normalsTextureView,\n      aoTexture: this.aoTextureView,\n      profiler: this.profiler,\n      viewMatrix: this.viewMatrix,\n      vpMatrix,\n      projMatrix: this.projectionMat,\n      cameraPositionWorldSpace: this.cameraCtrl.positionWorldSpace,\n      depthTexture: this.depthTextureView,\n      shadowDepthTexture: this.shadowMapPass.shadowDepthTextureView,\n      shadowMapSampler: this.shadowMapPass.shadowMapSampler,\n      globalUniforms: this.renderUniformBuffer,\n      simulationUniforms: this.simulationUniformsBuffer,\n      physicsForcesGrid: scene.physicsGrid,\n      // hair:\n      hairTilesBuffer: this.hairTilesPass.hairTilesBuffer,\n      hairTileSegmentsBuffer: this.hairTilesPass.hairTileSegmentsBuffer,\n      hairRasterizerResultsBuffer:\n        this.hairFinePass.hairRasterizerResultsBuffer,\n    };\n  }\n\n  private handleViewportResize = (viewportSize: Dimensions) => {\n    console.log(`Viewport resize`, viewportSize);\n\n    this.viewportSize.width = viewportSize.width;\n    this.viewportSize.height = viewportSize.height;\n\n    this.projectionMat = createCameraProjectionMat(\n      CONFIG.camera.projection,\n      viewportSize\n    );\n\n    this.recreateTextures(viewportSize);\n\n    // reset bindings that used texture\n    this.presentPass.onViewportResize();\n    this.drawBackgroundGradientPass.onViewportResize();\n    this.hairTilesPass.onViewportResize(this.device, viewportSize);\n    this.hairFinePass.onViewportResize(this.device, viewportSize);\n    this.hairCombinePass.onViewportResize();\n    this.aoPass.onViewportResize();\n    this.hairShadingPass.onViewportResize();\n    this.drawMeshesPass.onViewportResize();\n  };\n\n  private recreateTextures(viewportSize: Dimensions) {\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n    if (this.hdrRenderTexture) {\n      this.hdrRenderTexture.destroy();\n    }\n    if (this.normalsTexture) {\n      this.normalsTexture.destroy();\n    }\n    if (this.aoTexture) {\n      this.aoTexture.destroy();\n    }\n\n    const vpStr = `${viewportSize.width}x${viewportSize.height}`;\n    const renderTargetUsages: GPUTextureUsageFlags =\n      GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n\n    this.hdrRenderTexture = this.device.createTexture({\n      label: `hdr-texture-${vpStr}`,\n      size: [viewportSize.width, viewportSize.height],\n      format: HDR_RENDER_TEX_FORMAT,\n      usage: renderTargetUsages,\n    });\n    this.hdrRenderTextureView = this.hdrRenderTexture.createView();\n\n    this.normalsTexture = this.device.createTexture({\n      label: `normals-texture-${vpStr}`,\n      size: [viewportSize.width, viewportSize.height],\n      format: NORMALS_TEX_FORMAT,\n      usage: renderTargetUsages,\n    });\n    this.normalsTextureView = this.normalsTexture.createView();\n\n    this.depthTexture = this.device.createTexture({\n      label: `depth-texture-${vpStr}`,\n      size: [viewportSize.width, viewportSize.height],\n      format: DEPTH_FORMAT,\n      usage: renderTargetUsages,\n    });\n    this.depthTextureView = this.depthTexture.createView();\n\n    const aoSizeMul = CONFIG.ao.textureSizeMul;\n    const aoSize: Dimensions = {\n      width: Math.ceil(viewportSize.width * aoSizeMul),\n      height: Math.ceil(viewportSize.height * aoSizeMul),\n    };\n    this.aoTexture = this.device.createTexture({\n      label: `ao-texture-${vpStr}`,\n      size: [aoSize.width, aoSize.height],\n      format: AO_TEX_FORMAT,\n      usage: renderTargetUsages,\n    });\n    this.aoTextureView = this.aoTexture.createView();\n  }\n\n  onCanvasResize = debounce(this.handleViewportResize, 500);\n}\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nexport default function(color, forceCSSHex) {\n  const colorFormat = color.__state.conversionName.toString();\n\n  const r = Math.round(color.r);\n  const g = Math.round(color.g);\n  const b = Math.round(color.b);\n  const a = color.a;\n  const h = Math.round(color.h);\n  const s = color.s.toFixed(1);\n  const v = color.v.toFixed(1);\n\n  if (forceCSSHex || (colorFormat === 'THREE_CHAR_HEX') || (colorFormat === 'SIX_CHAR_HEX')) {\n    let str = color.hex.toString(16);\n    while (str.length < 6) {\n      str = '0' + str;\n    }\n    return '#' + str;\n  } else if (colorFormat === 'CSS_RGB') {\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\n  } else if (colorFormat === 'CSS_RGBA') {\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n  } else if (colorFormat === 'HEX') {\n    return '0x' + color.hex.toString(16);\n  } else if (colorFormat === 'RGB_ARRAY') {\n    return '[' + r + ',' + g + ',' + b + ']';\n  } else if (colorFormat === 'RGBA_ARRAY') {\n    return '[' + r + ',' + g + ',' + b + ',' + a + ']';\n  } else if (colorFormat === 'RGB_OBJ') {\n    return '{r:' + r + ',g:' + g + ',b:' + b + '}';\n  } else if (colorFormat === 'RGBA_OBJ') {\n    return '{r:' + r + ',g:' + g + ',b:' + b + ',a:' + a + '}';\n  } else if (colorFormat === 'HSV_OBJ') {\n    return '{h:' + h + ',s:' + s + ',v:' + v + '}';\n  } else if (colorFormat === 'HSVA_OBJ') {\n    return '{h:' + h + ',s:' + s + ',v:' + v + ',a:' + a + '}';\n  }\n\n  return 'unknown format';\n}\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nconst ARR_EACH = Array.prototype.forEach;\nconst ARR_SLICE = Array.prototype.slice;\n\n/**\n * Band-aid methods for things that should be a lot easier in JavaScript.\n * Implementation and structure inspired by underscore.js\n * http://documentcloud.github.com/underscore/\n */\n\nconst Common = {\n  BREAK: {},\n\n  extend: function(target) {\n    this.each(ARR_SLICE.call(arguments, 1), function(obj) {\n      const keys = this.isObject(obj) ? Object.keys(obj) : [];\n      keys.forEach(function(key) {\n        if (!this.isUndefined(obj[key])) {\n          target[key] = obj[key];\n        }\n      }.bind(this));\n    }, this);\n\n    return target;\n  },\n\n  defaults: function(target) {\n    this.each(ARR_SLICE.call(arguments, 1), function(obj) {\n      const keys = this.isObject(obj) ? Object.keys(obj) : [];\n      keys.forEach(function(key) {\n        if (this.isUndefined(target[key])) {\n          target[key] = obj[key];\n        }\n      }.bind(this));\n    }, this);\n\n    return target;\n  },\n\n  compose: function() {\n    const toCall = ARR_SLICE.call(arguments);\n    return function() {\n      let args = ARR_SLICE.call(arguments);\n      for (let i = toCall.length - 1; i >= 0; i--) {\n        args = [toCall[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  },\n\n  each: function(obj, itr, scope) {\n    if (!obj) {\n      return;\n    }\n\n    if (ARR_EACH && obj.forEach && obj.forEach === ARR_EACH) {\n      obj.forEach(itr, scope);\n    } else if (obj.length === obj.length + 0) { // Is number but not NaN\n      let key;\n      let l;\n      for (key = 0, l = obj.length; key < l; key++) {\n        if (key in obj && itr.call(scope, obj[key], key) === this.BREAK) {\n          return;\n        }\n      }\n    } else {\n      for (const key in obj) {\n        if (itr.call(scope, obj[key], key) === this.BREAK) {\n          return;\n        }\n      }\n    }\n  },\n\n  defer: function(fnc) {\n    setTimeout(fnc, 0);\n  },\n\n  // if the function is called repeatedly, wait until threshold passes until we execute the function\n  debounce: function(func, threshold, callImmediately) {\n    let timeout;\n\n    return function() {\n      const obj = this;\n      const args = arguments;\n      function delayed() {\n        timeout = null;\n        if (!callImmediately) func.apply(obj, args);\n      }\n\n      const callNow = callImmediately || !timeout;\n\n      clearTimeout(timeout);\n      timeout = setTimeout(delayed, threshold);\n\n      if (callNow) {\n        func.apply(obj, args);\n      }\n    };\n  },\n\n  toArray: function(obj) {\n    if (obj.toArray) return obj.toArray();\n    return ARR_SLICE.call(obj);\n  },\n\n  isUndefined: function(obj) {\n    return obj === undefined;\n  },\n\n  isNull: function(obj) {\n    return obj === null;\n  },\n\n  isNaN: function(obj) {\n    return isNaN(obj);\n  },\n\n  isArray: Array.isArray || function(obj) {\n    return obj.constructor === Array;\n  },\n\n  isObject: function(obj) {\n    return obj === Object(obj);\n  },\n\n  isNumber: function(obj) {\n    return obj === obj + 0;\n  },\n\n  isString: function(obj) {\n    return obj === obj + '';\n  },\n\n  isBoolean: function(obj) {\n    return obj === false || obj === true;\n  },\n\n  isFunction: function(obj) {\n    return obj instanceof Function;\n  }\n\n};\n\nexport default Common;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport toString from './toString';\nimport common from '../utils/common';\n\nconst INTERPRETATIONS = [\n  // Strings\n  {\n    litmus: common.isString,\n    conversions: {\n      THREE_CHAR_HEX: {\n        read: function(original) {\n          const test = original.match(/^#([A-F0-9])([A-F0-9])([A-F0-9])$/i);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'HEX',\n            hex: parseInt(\n              '0x' +\n              test[1].toString() + test[1].toString() +\n              test[2].toString() + test[2].toString() +\n              test[3].toString() + test[3].toString(), 0\n            )\n          };\n        },\n\n        write: toString\n      },\n\n      SIX_CHAR_HEX: {\n        read: function(original) {\n          const test = original.match(/^#([A-F0-9]{6})$/i);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'HEX',\n            hex: parseInt('0x' + test[1].toString(), 0)\n          };\n        },\n\n        write: toString\n      },\n\n      CSS_RGB: {\n        read: function(original) {\n          const test = original.match(/^rgb\\(\\s*(\\S+)\\s*,\\s*(\\S+)\\s*,\\s*(\\S+)\\s*\\)/);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: parseFloat(test[1]),\n            g: parseFloat(test[2]),\n            b: parseFloat(test[3])\n          };\n        },\n\n        write: toString\n      },\n\n      CSS_RGBA: {\n        read: function(original) {\n          const test = original.match(/^rgba\\(\\s*(\\S+)\\s*,\\s*(\\S+)\\s*,\\s*(\\S+)\\s*,\\s*(\\S+)\\s*\\)/);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: parseFloat(test[1]),\n            g: parseFloat(test[2]),\n            b: parseFloat(test[3]),\n            a: parseFloat(test[4])\n          };\n        },\n\n        write: toString\n      }\n    }\n  },\n\n  // Numbers\n  {\n    litmus: common.isNumber,\n\n    conversions: {\n\n      HEX: {\n        read: function(original) {\n          return {\n            space: 'HEX',\n            hex: original,\n            conversionName: 'HEX'\n          };\n        },\n\n        write: function(color) {\n          return color.hex;\n        }\n      }\n\n    }\n\n  },\n\n  // Arrays\n  {\n    litmus: common.isArray,\n    conversions: {\n      RGB_ARRAY: {\n        read: function(original) {\n          if (original.length !== 3) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: original[0],\n            g: original[1],\n            b: original[2]\n          };\n        },\n\n        write: function(color) {\n          return [color.r, color.g, color.b];\n        }\n      },\n\n      RGBA_ARRAY: {\n        read: function(original) {\n          if (original.length !== 4) return false;\n          return {\n            space: 'RGB',\n            r: original[0],\n            g: original[1],\n            b: original[2],\n            a: original[3]\n          };\n        },\n\n        write: function(color) {\n          return [color.r, color.g, color.b, color.a];\n        }\n      }\n    }\n  },\n\n  // Objects\n  {\n    litmus: common.isObject,\n    conversions: {\n\n      RGBA_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.r) &&\n            common.isNumber(original.g) &&\n            common.isNumber(original.b) &&\n            common.isNumber(original.a)) {\n            return {\n              space: 'RGB',\n              r: original.r,\n              g: original.g,\n              b: original.b,\n              a: original.a\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            a: color.a\n          };\n        }\n      },\n\n      RGB_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.r) &&\n            common.isNumber(original.g) &&\n            common.isNumber(original.b)) {\n            return {\n              space: 'RGB',\n              r: original.r,\n              g: original.g,\n              b: original.b\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            r: color.r,\n            g: color.g,\n            b: color.b\n          };\n        }\n      },\n\n      HSVA_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.h) &&\n            common.isNumber(original.s) &&\n            common.isNumber(original.v) &&\n            common.isNumber(original.a)) {\n            return {\n              space: 'HSV',\n              h: original.h,\n              s: original.s,\n              v: original.v,\n              a: original.a\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            h: color.h,\n            s: color.s,\n            v: color.v,\n            a: color.a\n          };\n        }\n      },\n\n      HSV_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.h) &&\n            common.isNumber(original.s) &&\n            common.isNumber(original.v)) {\n            return {\n              space: 'HSV',\n              h: original.h,\n              s: original.s,\n              v: original.v\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            h: color.h,\n            s: color.s,\n            v: color.v\n          };\n        }\n      }\n    }\n  }\n];\n\nlet result;\nlet toReturn;\n\nconst interpret = function() {\n  toReturn = false;\n\n  const original = arguments.length > 1 ? common.toArray(arguments) : arguments[0];\n  common.each(INTERPRETATIONS, function(family) {\n    if (family.litmus(original)) {\n      common.each(family.conversions, function(conversion, conversionName) {\n        result = conversion.read(original);\n\n        if (toReturn === false && result !== false) {\n          toReturn = result;\n          result.conversionName = conversionName;\n          result.conversion = conversion;\n          return common.BREAK;\n        }\n      });\n\n      return common.BREAK;\n    }\n  });\n\n  return toReturn;\n};\n\nexport default interpret;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nlet tmpComponent;\n\nconst ColorMath = {\n  hsv_to_rgb: function(h, s, v) {\n    const hi = Math.floor(h / 60) % 6;\n\n    const f = h / 60 - Math.floor(h / 60);\n    const p = v * (1.0 - s);\n    const q = v * (1.0 - (f * s));\n    const t = v * (1.0 - ((1.0 - f) * s));\n\n    const c = [\n      [v, t, p],\n      [q, v, p],\n      [p, v, t],\n      [p, q, v],\n      [t, p, v],\n      [v, p, q]\n    ][hi];\n\n    return {\n      r: c[0] * 255,\n      g: c[1] * 255,\n      b: c[2] * 255\n    };\n  },\n\n  rgb_to_hsv: function(r, g, b) {\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const delta = max - min;\n    let h;\n    let s;\n\n    if (max !== 0) {\n      s = delta / max;\n    } else {\n      return {\n        h: NaN,\n        s: 0,\n        v: 0\n      };\n    }\n\n    if (r === max) {\n      h = (g - b) / delta;\n    } else if (g === max) {\n      h = 2 + (b - r) / delta;\n    } else {\n      h = 4 + (r - g) / delta;\n    }\n    h /= 6;\n    if (h < 0) {\n      h += 1;\n    }\n\n    return {\n      h: h * 360,\n      s: s,\n      v: max / 255\n    };\n  },\n\n  rgb_to_hex: function(r, g, b) {\n    let hex = this.hex_with_component(0, 2, r);\n    hex = this.hex_with_component(hex, 1, g);\n    hex = this.hex_with_component(hex, 0, b);\n    return hex;\n  },\n\n  component_from_hex: function(hex, componentIndex) {\n    return (hex >> (componentIndex * 8)) & 0xFF;\n  },\n\n  hex_with_component: function(hex, componentIndex, value) {\n    return value << (tmpComponent = componentIndex * 8) | (hex & ~(0xFF << tmpComponent));\n  }\n};\n\nexport default ColorMath;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport interpret from './interpret';\nimport math from './math';\nimport colorToString from './toString';\nimport common from '../utils/common';\n\nclass Color {\n  constructor() {\n    this.__state = interpret.apply(this, arguments);\n\n    if (this.__state === false) {\n      throw new Error('Failed to interpret color arguments');\n    }\n\n    this.__state.a = this.__state.a || 1;\n  }\n\n  toString() {\n    return colorToString(this);\n  }\n\n  toHexString() {\n    return colorToString(this, true);\n  }\n\n  toOriginal() {\n    return this.__state.conversion.write(this);\n  }\n}\n\nfunction defineRGBComponent(target, component, componentHexIndex) {\n  Object.defineProperty(target, component, {\n    get: function() {\n      if (this.__state.space === 'RGB') {\n        return this.__state[component];\n      }\n\n      Color.recalculateRGB(this, component, componentHexIndex);\n\n      return this.__state[component];\n    },\n\n    set: function(v) {\n      if (this.__state.space !== 'RGB') {\n        Color.recalculateRGB(this, component, componentHexIndex);\n        this.__state.space = 'RGB';\n      }\n\n      this.__state[component] = v;\n    }\n  });\n}\n\nfunction defineHSVComponent(target, component) {\n  Object.defineProperty(target, component, {\n    get: function() {\n      if (this.__state.space === 'HSV') {\n        return this.__state[component];\n      }\n\n      Color.recalculateHSV(this);\n\n      return this.__state[component];\n    },\n\n    set: function(v) {\n      if (this.__state.space !== 'HSV') {\n        Color.recalculateHSV(this);\n        this.__state.space = 'HSV';\n      }\n\n      this.__state[component] = v;\n    }\n  });\n}\n\n\nColor.recalculateRGB = function(color, component, componentHexIndex) {\n  if (color.__state.space === 'HEX') {\n    color.__state[component] = math.component_from_hex(color.__state.hex, componentHexIndex);\n  } else if (color.__state.space === 'HSV') {\n    common.extend(color.__state, math.hsv_to_rgb(color.__state.h, color.__state.s, color.__state.v));\n  } else {\n    throw new Error('Corrupted color state');\n  }\n};\n\nColor.recalculateHSV = function(color) {\n  const result = math.rgb_to_hsv(color.r, color.g, color.b);\n\n  common.extend(color.__state,\n    {\n      s: result.s,\n      v: result.v\n    });\n\n  if (!common.isNaN(result.h)) {\n    color.__state.h = result.h;\n  } else if (common.isUndefined(color.__state.h)) {\n    color.__state.h = 0;\n  }\n};\n\nColor.COMPONENTS = ['r', 'g', 'b', 'h', 's', 'v', 'hex', 'a'];\n\ndefineRGBComponent(Color.prototype, 'r', 2);\ndefineRGBComponent(Color.prototype, 'g', 1);\ndefineRGBComponent(Color.prototype, 'b', 0);\n\ndefineHSVComponent(Color.prototype, 'h');\ndefineHSVComponent(Color.prototype, 's');\ndefineHSVComponent(Color.prototype, 'v');\n\nObject.defineProperty(Color.prototype, 'a', {\n  get: function() {\n    return this.__state.a;\n  },\n\n  set: function(v) {\n    this.__state.a = v;\n  }\n});\n\nObject.defineProperty(Color.prototype, 'hex', {\n  get: function() {\n    if (this.__state.space !== 'HEX') {\n      this.__state.hex = math.rgb_to_hex(this.r, this.g, this.b);\n      this.__state.space = 'HEX';\n    }\n\n    return this.__state.hex;\n  },\n\n  set: function(v) {\n    this.__state.space = 'HEX';\n    this.__state.hex = v;\n  }\n});\n\nexport default Color;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\n/**\n * @class An \"abstract\" class that represents a given property of an object.\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass Controller {\n  constructor(object, property) {\n    this.initialValue = object[property];\n\n    /**\n     * Those who extend this class will put their DOM elements in here.\n     * @type {DOMElement}\n     */\n    this.domElement = document.createElement('div');\n\n    /**\n     * The object to manipulate\n     * @type {Object}\n     */\n    this.object = object;\n\n    /**\n     * The name of the property to manipulate\n     * @type {String}\n     */\n    this.property = property;\n\n    /**\n     * The function to be called on change.\n     * @type {Function}\n     * @ignore\n     */\n    this.__onChange = undefined;\n\n    /**\n     * The function to be called on finishing change.\n     * @type {Function}\n     * @ignore\n     */\n    this.__onFinishChange = undefined;\n  }\n\n  /**\n   * Specify that a function fire every time someone changes the value with\n   * this Controller.\n   *\n   * @param {Function} fnc This function will be called whenever the value\n   * is modified via this Controller.\n   * @returns {Controller} this\n   */\n  onChange(fnc) {\n    this.__onChange = fnc;\n    return this;\n  }\n\n  /**\n   * Specify that a function fire every time someone \"finishes\" changing\n   * the value wih this Controller. Useful for values that change\n   * incrementally like numbers or strings.\n   *\n   * @param {Function} fnc This function will be called whenever\n   * someone \"finishes\" changing the value via this Controller.\n   * @returns {Controller} this\n   */\n  onFinishChange(fnc) {\n    this.__onFinishChange = fnc;\n    return this;\n  }\n\n  /**\n   * Change the value of <code>object[property]</code>\n   *\n   * @param {Object} newValue The new value of <code>object[property]</code>\n   */\n  setValue(newValue) {\n    this.object[this.property] = newValue;\n    if (this.__onChange) {\n      this.__onChange.call(this, newValue);\n    }\n\n    this.updateDisplay();\n    return this;\n  }\n\n  /**\n   * Gets the value of <code>object[property]</code>\n   *\n   * @returns {Object} The current value of <code>object[property]</code>\n   */\n  getValue() {\n    return this.object[this.property];\n  }\n\n  /**\n   * Refreshes the visual display of a Controller in order to keep sync\n   * with the object's current value.\n   * @returns {Controller} this\n   */\n  updateDisplay() {\n    return this;\n  }\n\n  /**\n   * @returns {boolean} true if the value has deviated from initialValue\n   */\n  isModified() {\n    return this.initialValue !== this.getValue();\n  }\n}\n\nexport default Controller;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport common from '../utils/common';\n\nconst EVENT_MAP = {\n  HTMLEvents: ['change'],\n  MouseEvents: ['click', 'mousemove', 'mousedown', 'mouseup', 'mouseover'],\n  KeyboardEvents: ['keydown']\n};\n\nconst EVENT_MAP_INV = {};\ncommon.each(EVENT_MAP, function(v, k) {\n  common.each(v, function(e) {\n    EVENT_MAP_INV[e] = k;\n  });\n});\n\nconst CSS_VALUE_PIXELS = /(\\d+(\\.\\d+)?)px/;\n\nfunction cssValueToPixels(val) {\n  if (val === '0' || common.isUndefined(val)) {\n    return 0;\n  }\n\n  const match = val.match(CSS_VALUE_PIXELS);\n\n  if (!common.isNull(match)) {\n    return parseFloat(match[1]);\n  }\n\n  // TODO ...ems? %?\n\n  return 0;\n}\n\n/**\n * @namespace\n * @member dat.dom\n */\nconst dom = {\n\n  /**\n   *\n   * @param elem\n   * @param selectable\n   */\n  makeSelectable: function(elem, selectable) {\n    if (elem === undefined || elem.style === undefined) return;\n\n    elem.onselectstart = selectable ? function() {\n      return false;\n    } : function() {\n    };\n\n    elem.style.MozUserSelect = selectable ? 'auto' : 'none';\n    elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';\n    elem.unselectable = selectable ? 'on' : 'off';\n  },\n\n  /**\n   *\n   * @param elem\n   * @param horizontal\n   * @param vert\n   */\n  makeFullscreen: function(elem, hor, vert) {\n    let vertical = vert;\n    let horizontal = hor;\n\n    if (common.isUndefined(horizontal)) {\n      horizontal = true;\n    }\n\n    if (common.isUndefined(vertical)) {\n      vertical = true;\n    }\n\n    elem.style.position = 'absolute';\n\n    if (horizontal) {\n      elem.style.left = 0;\n      elem.style.right = 0;\n    }\n    if (vertical) {\n      elem.style.top = 0;\n      elem.style.bottom = 0;\n    }\n  },\n\n  /**\n   *\n   * @param elem\n   * @param eventType\n   * @param params\n   */\n  fakeEvent: function(elem, eventType, pars, aux) {\n    const params = pars || {};\n    const className = EVENT_MAP_INV[eventType];\n    if (!className) {\n      throw new Error('Event type ' + eventType + ' not supported.');\n    }\n    const evt = document.createEvent(className);\n    switch (className) {\n      case 'MouseEvents':\n      {\n        const clientX = params.x || params.clientX || 0;\n        const clientY = params.y || params.clientY || 0;\n        evt.initMouseEvent(eventType, params.bubbles || false,\n          params.cancelable || true, window, params.clickCount || 1,\n          0, // screen X\n          0, // screen Y\n          clientX, // client X\n          clientY, // client Y\n          false, false, false, false, 0, null);\n        break;\n      }\n      case 'KeyboardEvents':\n      {\n        const init = evt.initKeyboardEvent || evt.initKeyEvent; // webkit || moz\n        common.defaults(params, {\n          cancelable: true,\n          ctrlKey: false,\n          altKey: false,\n          shiftKey: false,\n          metaKey: false,\n          keyCode: undefined,\n          charCode: undefined\n        });\n        init(eventType, params.bubbles || false,\n          params.cancelable, window,\n          params.ctrlKey, params.altKey,\n          params.shiftKey, params.metaKey,\n          params.keyCode, params.charCode);\n        break;\n      }\n      default:\n      {\n        evt.initEvent(eventType, params.bubbles || false, params.cancelable || true);\n        break;\n      }\n    }\n    common.defaults(evt, aux);\n    elem.dispatchEvent(evt);\n  },\n\n  /**\n   *\n   * @param elem\n   * @param event\n   * @param func\n   * @param bool\n   */\n  bind: function(elem, event, func, newBool) {\n    const bool = newBool || false;\n    if (elem.addEventListener) {\n      elem.addEventListener(event, func, bool);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param event\n   * @param func\n   * @param bool\n   */\n  unbind: function(elem, event, func, newBool) {\n    const bool = newBool || false;\n    if (elem.removeEventListener) {\n      elem.removeEventListener(event, func, bool);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param className\n   */\n  addClass: function(elem, className) {\n    if (elem.className === undefined) {\n      elem.className = className;\n    } else if (elem.className !== className) {\n      const classes = elem.className.split(/ +/);\n      if (classes.indexOf(className) === -1) {\n        classes.push(className);\n        elem.className = classes.join(' ').replace(/^\\s+/, '').replace(/\\s+$/, '');\n      }\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param className\n   */\n  removeClass: function(elem, className) {\n    if (className) {\n      if (elem.className === className) {\n        elem.removeAttribute('class');\n      } else {\n        const classes = elem.className.split(/ +/);\n        const index = classes.indexOf(className);\n        if (index !== -1) {\n          classes.splice(index, 1);\n          elem.className = classes.join(' ');\n        }\n      }\n    } else {\n      elem.className = undefined;\n    }\n    return dom;\n  },\n\n  hasClass: function(elem, className) {\n    return new RegExp('(?:^|\\\\s+)' + className + '(?:\\\\s+|$)').test(elem.className) || false;\n  },\n\n  /**\n   *\n   * @param elem\n   */\n  getWidth: function(elem) {\n    const style = getComputedStyle(elem);\n\n    return cssValueToPixels(style['border-left-width']) +\n      cssValueToPixels(style['border-right-width']) +\n      cssValueToPixels(style['padding-left']) +\n      cssValueToPixels(style['padding-right']) +\n      cssValueToPixels(style.width);\n  },\n\n  /**\n   *\n   * @param elem\n   */\n  getHeight: function(elem) {\n    const style = getComputedStyle(elem);\n\n    return cssValueToPixels(style['border-top-width']) +\n      cssValueToPixels(style['border-bottom-width']) +\n      cssValueToPixels(style['padding-top']) +\n      cssValueToPixels(style['padding-bottom']) +\n      cssValueToPixels(style.height);\n  },\n\n  /**\n   *\n   * @param el\n   */\n  getOffset: function(el) {\n    let elem = el;\n    const offset = { left: 0, top: 0 };\n    if (elem.offsetParent) {\n      do {\n        offset.left += elem.offsetLeft;\n        offset.top += elem.offsetTop;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n    return offset;\n  },\n\n  // http://stackoverflow.com/posts/2684561/revisions\n  /**\n   *\n   * @param elem\n   */\n  isActive: function(elem) {\n    return elem === document.activeElement && (elem.type || elem.href);\n  }\n\n};\n\nexport default dom;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a checkbox input to alter the boolean property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass BooleanController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    const _this = this;\n    this.__prev = this.getValue();\n\n    this.__checkbox = document.createElement('input');\n    this.__checkbox.setAttribute('type', 'checkbox');\n\n    function onChange() {\n      _this.setValue(!_this.__prev);\n    }\n\n    dom.bind(this.__checkbox, 'change', onChange, false);\n\n    this.domElement.appendChild(this.__checkbox);\n\n    // Match original value\n    this.updateDisplay();\n  }\n\n  setValue(v) {\n    const toReturn = super.setValue(v);\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n    this.__prev = this.getValue();\n    return toReturn;\n  }\n\n  updateDisplay() {\n    if (this.getValue() === true) {\n      this.__checkbox.setAttribute('checked', 'checked');\n      this.__checkbox.checked = true;\n      this.__prev = true;\n    } else {\n      this.__checkbox.checked = false;\n      this.__prev = false;\n    }\n\n    return super.updateDisplay();\n  }\n}\n\nexport default BooleanController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\n/**\n * @class Provides a select input to alter the property of an object, using a\n * list of accepted values.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object|string[]} options A map of labels to acceptable values, or\n * a list of acceptable string values.\n */\nclass OptionController extends Controller {\n  constructor(object, property, opts) {\n    super(object, property);\n\n    let options = opts;\n\n    const _this = this;\n\n    /**\n     * The drop down menu\n     * @ignore\n     */\n    this.__select = document.createElement('select');\n\n    if (common.isArray(options)) {\n      const map = {};\n      common.each(options, function(element) {\n        map[element] = element;\n      });\n      options = map;\n    }\n\n    common.each(options, function(value, key) {\n      const opt = document.createElement('option');\n      opt.innerHTML = key;\n      opt.setAttribute('value', value);\n      _this.__select.appendChild(opt);\n    });\n\n    // Acknowledge original value\n    this.updateDisplay();\n\n    dom.bind(this.__select, 'change', function() {\n      const desiredValue = this.options[this.selectedIndex].value;\n      _this.setValue(desiredValue);\n    });\n\n    this.domElement.appendChild(this.__select);\n  }\n\n  setValue(v) {\n    const toReturn = super.setValue(v);\n\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n    return toReturn;\n  }\n\n  updateDisplay() {\n    if (dom.isActive(this.__select)) return this; // prevent number from updating if user is trying to manually update\n    this.__select.value = this.getValue();\n    return super.updateDisplay();\n  }\n}\n\nexport default OptionController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a text input to alter the string property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass StringController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    const _this = this;\n\n    function onChange() {\n      _this.setValue(_this.__input.value);\n    }\n\n    function onBlur() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    this.__input = document.createElement('input');\n    this.__input.setAttribute('type', 'text');\n\n    dom.bind(this.__input, 'keyup', onChange);\n    dom.bind(this.__input, 'change', onChange);\n    dom.bind(this.__input, 'blur', onBlur);\n    dom.bind(this.__input, 'keydown', function(e) {\n      if (e.keyCode === 13) {\n        this.blur();\n      }\n    });\n\n    this.updateDisplay();\n\n    this.domElement.appendChild(this.__input);\n  }\n\n  updateDisplay() {\n    // Stops the caret from moving on account of:\n    // keyup -> setValue -> updateDisplay\n    if (!dom.isActive(this.__input)) {\n      this.__input.value = this.getValue();\n    }\n    return super.updateDisplay();\n  }\n}\n\nexport default StringController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport common from '../utils/common';\n\nfunction numDecimals(x) {\n  const _x = x.toString();\n  if (_x.indexOf('.') > -1) {\n    return _x.length - _x.indexOf('.') - 1;\n  }\n\n  return 0;\n}\n\n/**\n * @class Represents a given property of an object that is a number.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object} [params] Optional parameters\n * @param {Number} [params.min] Minimum allowed value\n * @param {Number} [params.max] Maximum allowed value\n * @param {Number} [params.step] Increment by which to change value\n */\nclass NumberController extends Controller {\n  constructor(object, property, params) {\n    super(object, property);\n\n    const _params = params || {};\n\n    this.__min = _params.min;\n    this.__max = _params.max;\n    this.__step = _params.step;\n\n    if (common.isUndefined(this.__step)) {\n      if (this.initialValue === 0) {\n        this.__impliedStep = 1; // What are we, psychics?\n      } else {\n        // Hey Doug, check this out.\n        this.__impliedStep = Math.pow(10, Math.floor(Math.log(Math.abs(this.initialValue)) / Math.LN10)) / 10;\n      }\n    } else {\n      this.__impliedStep = this.__step;\n    }\n\n    this.__precision = numDecimals(this.__impliedStep);\n  }\n\n  setValue(v) {\n    let _v = v;\n\n    if (this.__min !== undefined && _v < this.__min) {\n      _v = this.__min;\n    } else if (this.__max !== undefined && _v > this.__max) {\n      _v = this.__max;\n    }\n\n    if (this.__step !== undefined && _v % this.__step !== 0) {\n      _v = Math.round(_v / this.__step) * this.__step;\n    }\n\n    return super.setValue(_v);\n  }\n\n  /**\n   * Specify a minimum value for <code>object[property]</code>.\n   *\n   * @param {Number} minValue The minimum value for\n   * <code>object[property]</code>\n   * @returns {dat.controllers.NumberController} this\n   */\n  min(minValue) {\n    this.__min = minValue;\n    return this;\n  }\n\n  /**\n   * Specify a maximum value for <code>object[property]</code>.\n   *\n   * @param {Number} maxValue The maximum value for\n   * <code>object[property]</code>\n   * @returns {dat.controllers.NumberController} this\n   */\n  max(maxValue) {\n    this.__max = maxValue;\n    return this;\n  }\n\n  /**\n   * Specify a step value that dat.controllers.NumberController\n   * increments by.\n   *\n   * @param {Number} stepValue The step value for\n   * dat.controllers.NumberController\n   * @default if minimum and maximum specified increment is 1% of the\n   * difference otherwise stepValue is 1\n   * @returns {dat.controllers.NumberController} this\n   */\n  step(stepValue) {\n    this.__step = stepValue;\n    this.__impliedStep = stepValue;\n    this.__precision = numDecimals(stepValue);\n    return this;\n  }\n}\n\nexport default NumberController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport NumberController from './NumberController';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\nfunction roundToDecimal(value, decimals) {\n  const tenTo = Math.pow(10, decimals);\n  return Math.round(value * tenTo) / tenTo;\n}\n\n/**\n * @class Represents a given property of an object that is a number and\n * provides an input element with which to manipulate it.\n *\n * @extends dat.controllers.Controller\n * @extends dat.controllers.NumberController\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object} [params] Optional parameters\n * @param {Number} [params.min] Minimum allowed value\n * @param {Number} [params.max] Maximum allowed value\n * @param {Number} [params.step] Increment by which to change value\n */\nclass NumberControllerBox extends NumberController {\n  constructor(object, property, params) {\n    super(object, property, params);\n\n    this.__truncationSuspended = false;\n\n    const _this = this;\n\n    /**\n     * {Number} Previous mouse y position\n     * @ignore\n     */\n    let prevY;\n\n    function onChange() {\n      const attempted = parseFloat(_this.__input.value);\n      if (!common.isNaN(attempted)) {\n        _this.setValue(attempted);\n      }\n    }\n\n    function onFinish() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    function onBlur() {\n      onFinish();\n    }\n\n    function onMouseDrag(e) {\n      const diff = prevY - e.clientY;\n      _this.setValue(_this.getValue() + diff * _this.__impliedStep);\n\n      prevY = e.clientY;\n    }\n\n    function onMouseUp() {\n      dom.unbind(window, 'mousemove', onMouseDrag);\n      dom.unbind(window, 'mouseup', onMouseUp);\n      onFinish();\n    }\n\n    function onMouseDown(e) {\n      dom.bind(window, 'mousemove', onMouseDrag);\n      dom.bind(window, 'mouseup', onMouseUp);\n      prevY = e.clientY;\n    }\n\n    this.__input = document.createElement('input');\n    this.__input.setAttribute('type', 'text');\n\n    // Makes it so manually specified values are not truncated.\n\n    dom.bind(this.__input, 'change', onChange);\n    dom.bind(this.__input, 'blur', onBlur);\n    dom.bind(this.__input, 'mousedown', onMouseDown);\n    dom.bind(this.__input, 'keydown', function(e) {\n      // When pressing enter, you can be as precise as you want.\n      if (e.keyCode === 13) {\n        _this.__truncationSuspended = true;\n        this.blur();\n        _this.__truncationSuspended = false;\n        onFinish();\n      }\n    });\n\n    this.updateDisplay();\n\n    this.domElement.appendChild(this.__input);\n  }\n\n  updateDisplay() {\n    this.__input.value = this.__truncationSuspended ? this.getValue() : roundToDecimal(this.getValue(), this.__precision);\n    return super.updateDisplay();\n  }\n}\n\nexport default NumberControllerBox;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport NumberController from './NumberController';\nimport dom from '../dom/dom';\n\nfunction map(v, i1, i2, o1, o2) {\n  return o1 + (o2 - o1) * ((v - i1) / (i2 - i1));\n}\n\n/**\n * @class Represents a given property of an object that is a number, contains\n * a minimum and maximum, and provides a slider element with which to\n * manipulate it. It should be noted that the slider element is made up of\n * <code>&lt;div&gt;</code> tags, <strong>not</strong> the html5\n * <code>&lt;slider&gt;</code> element.\n *\n * @extends dat.controllers.Controller\n * @extends dat.controllers.NumberController\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Number} minValue Minimum allowed value\n * @param {Number} maxValue Maximum allowed value\n * @param {Number} stepValue Increment by which to change value\n */\nclass NumberControllerSlider extends NumberController {\n  constructor(object, property, min, max, step) {\n    super(object, property, { min: min, max: max, step: step });\n\n    const _this = this;\n\n    this.__background = document.createElement('div');\n    this.__foreground = document.createElement('div');\n\n    dom.bind(this.__background, 'mousedown', onMouseDown);\n    dom.bind(this.__background, 'touchstart', onTouchStart);\n\n    dom.addClass(this.__background, 'slider');\n    dom.addClass(this.__foreground, 'slider-fg');\n\n    function onMouseDown(e) {\n      document.activeElement.blur();\n\n      dom.bind(window, 'mousemove', onMouseDrag);\n      dom.bind(window, 'mouseup', onMouseUp);\n\n      onMouseDrag(e);\n    }\n\n    function onMouseDrag(e) {\n      e.preventDefault();\n\n      const bgRect = _this.__background.getBoundingClientRect();\n\n      _this.setValue(\n        map(e.clientX, bgRect.left, bgRect.right, _this.__min, _this.__max)\n      );\n\n      return false;\n    }\n\n    function onMouseUp() {\n      dom.unbind(window, 'mousemove', onMouseDrag);\n      dom.unbind(window, 'mouseup', onMouseUp);\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    function onTouchStart(e) {\n      if (e.touches.length !== 1) { return; }\n      dom.bind(window, 'touchmove', onTouchMove);\n      dom.bind(window, 'touchend', onTouchEnd);\n      onTouchMove(e);\n    }\n\n    function onTouchMove(e) {\n      const clientX = e.touches[0].clientX;\n      const bgRect = _this.__background.getBoundingClientRect();\n\n      _this.setValue(\n        map(clientX, bgRect.left, bgRect.right, _this.__min, _this.__max)\n      );\n    }\n\n    function onTouchEnd() {\n      dom.unbind(window, 'touchmove', onTouchMove);\n      dom.unbind(window, 'touchend', onTouchEnd);\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    this.updateDisplay();\n\n    this.__background.appendChild(this.__foreground);\n    this.domElement.appendChild(this.__background);\n  }\n\n  updateDisplay() {\n    const pct = (this.getValue() - this.__min) / (this.__max - this.__min);\n    this.__foreground.style.width = pct * 100 + '%';\n    return super.updateDisplay();\n  }\n}\n\nexport default NumberControllerSlider;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a GUI interface to fire a specified method, a property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass FunctionController extends Controller {\n  constructor(object, property, text) {\n    super(object, property);\n\n    const _this = this;\n\n    this.__button = document.createElement('div');\n    this.__button.innerHTML = text === undefined ? 'Fire' : text;\n\n    dom.bind(this.__button, 'click', function(e) {\n      e.preventDefault();\n      _this.fire();\n      return false;\n    });\n\n    dom.addClass(this.__button, 'button');\n\n    this.domElement.appendChild(this.__button);\n  }\n\n  fire() {\n    if (this.__onChange) {\n      this.__onChange.call(this);\n    }\n    this.getValue().call(this.object);\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n  }\n}\n\nexport default FunctionController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\nimport Color from '../color/Color';\nimport interpret from '../color/interpret';\nimport common from '../utils/common';\n\n/**\n * @class Represents a given property of an object that is a color.\n * @param {Object} object\n * @param {string} property\n */\nclass ColorController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    this.__color = new Color(this.getValue());\n    this.__temp = new Color(0);\n\n    const _this = this;\n\n    this.domElement = document.createElement('div');\n\n    dom.makeSelectable(this.domElement, false);\n\n    this.__selector = document.createElement('div');\n    this.__selector.className = 'selector';\n\n    this.__saturation_field = document.createElement('div');\n    this.__saturation_field.className = 'saturation-field';\n\n    this.__field_knob = document.createElement('div');\n    this.__field_knob.className = 'field-knob';\n    this.__field_knob_border = '2px solid ';\n\n    this.__hue_knob = document.createElement('div');\n    this.__hue_knob.className = 'hue-knob';\n\n    this.__hue_field = document.createElement('div');\n    this.__hue_field.className = 'hue-field';\n\n    this.__input = document.createElement('input');\n    this.__input.type = 'text';\n    this.__input_textShadow = '0 1px 1px ';\n\n    dom.bind(this.__input, 'keydown', function(e) {\n      if (e.keyCode === 13) { // on enter\n        onBlur.call(this);\n      }\n    });\n\n    dom.bind(this.__input, 'blur', onBlur);\n\n    dom.bind(this.__selector, 'mousedown', function(/* e */) {\n      dom\n        .addClass(this, 'drag')\n        .bind(window, 'mouseup', function(/* e */) {\n          dom.removeClass(_this.__selector, 'drag');\n        });\n    });\n\n    dom.bind(this.__selector, 'touchstart', function(/* e */) {\n      dom\n        .addClass(this, 'drag')\n        .bind(window, 'touchend', function(/* e */) {\n          dom.removeClass(_this.__selector, 'drag');\n        });\n    });\n\n    const valueField = document.createElement('div');\n\n    common.extend(this.__selector.style, {\n      width: '122px',\n      height: '102px',\n      padding: '3px',\n      backgroundColor: '#222',\n      boxShadow: '0px 1px 3px rgba(0,0,0,0.3)'\n    });\n\n    common.extend(this.__field_knob.style, {\n      position: 'absolute',\n      width: '12px',\n      height: '12px',\n      border: this.__field_knob_border + (this.__color.v < 0.5 ? '#fff' : '#000'),\n      boxShadow: '0px 1px 3px rgba(0,0,0,0.5)',\n      borderRadius: '12px',\n      zIndex: 1\n    });\n\n    common.extend(this.__hue_knob.style, {\n      position: 'absolute',\n      width: '15px',\n      height: '2px',\n      borderRight: '4px solid #fff',\n      zIndex: 1\n    });\n\n    common.extend(this.__saturation_field.style, {\n      width: '100px',\n      height: '100px',\n      border: '1px solid #555',\n      marginRight: '3px',\n      display: 'inline-block',\n      cursor: 'pointer'\n    });\n\n    common.extend(valueField.style, {\n      width: '100%',\n      height: '100%',\n      background: 'none'\n    });\n\n    linearGradient(valueField, 'top', 'rgba(0,0,0,0)', '#000');\n\n    common.extend(this.__hue_field.style, {\n      width: '15px',\n      height: '100px',\n      border: '1px solid #555',\n      cursor: 'ns-resize',\n      position: 'absolute',\n      top: '3px',\n      right: '3px'\n    });\n\n    hueGradient(this.__hue_field);\n\n    common.extend(this.__input.style, {\n      outline: 'none',\n      //      width: '120px',\n      textAlign: 'center',\n      //      padding: '4px',\n      //      marginBottom: '6px',\n      color: '#fff',\n      border: 0,\n      fontWeight: 'bold',\n      textShadow: this.__input_textShadow + 'rgba(0,0,0,0.7)'\n    });\n\n    dom.bind(this.__saturation_field, 'mousedown', fieldDown);\n    dom.bind(this.__saturation_field, 'touchstart', fieldDown);\n\n    dom.bind(this.__field_knob, 'mousedown', fieldDown);\n    dom.bind(this.__field_knob, 'touchstart', fieldDown);\n\n    dom.bind(this.__hue_field, 'mousedown', fieldDownH);\n    dom.bind(this.__hue_field, 'touchstart', fieldDownH);\n\n    function fieldDown(e) {\n      setSV(e);\n      dom.bind(window, 'mousemove', setSV);\n      dom.bind(window, 'touchmove', setSV);\n      dom.bind(window, 'mouseup', fieldUpSV);\n      dom.bind(window, 'touchend', fieldUpSV);\n    }\n\n    function fieldDownH(e) {\n      setH(e);\n      dom.bind(window, 'mousemove', setH);\n      dom.bind(window, 'touchmove', setH);\n      dom.bind(window, 'mouseup', fieldUpH);\n      dom.bind(window, 'touchend', fieldUpH);\n    }\n\n    function fieldUpSV() {\n      dom.unbind(window, 'mousemove', setSV);\n      dom.unbind(window, 'touchmove', setSV);\n      dom.unbind(window, 'mouseup', fieldUpSV);\n      dom.unbind(window, 'touchend', fieldUpSV);\n      onFinish();\n    }\n\n    function fieldUpH() {\n      dom.unbind(window, 'mousemove', setH);\n      dom.unbind(window, 'touchmove', setH);\n      dom.unbind(window, 'mouseup', fieldUpH);\n      dom.unbind(window, 'touchend', fieldUpH);\n      onFinish();\n    }\n\n    function onBlur() {\n      const i = interpret(this.value);\n      if (i !== false) {\n        _this.__color.__state = i;\n        _this.setValue(_this.__color.toOriginal());\n      } else {\n        this.value = _this.__color.toString();\n      }\n    }\n\n    function onFinish() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.__color.toOriginal());\n      }\n    }\n\n    this.__saturation_field.appendChild(valueField);\n    this.__selector.appendChild(this.__field_knob);\n    this.__selector.appendChild(this.__saturation_field);\n    this.__selector.appendChild(this.__hue_field);\n    this.__hue_field.appendChild(this.__hue_knob);\n\n    this.domElement.appendChild(this.__input);\n    this.domElement.appendChild(this.__selector);\n\n    this.updateDisplay();\n\n    function setSV(e) {\n      if (e.type.indexOf('touch') === -1) { e.preventDefault(); }\n\n      const fieldRect = _this.__saturation_field.getBoundingClientRect();\n      const { clientX, clientY } = (e.touches && e.touches[0]) || e;\n      let s = (clientX - fieldRect.left) / (fieldRect.right - fieldRect.left);\n      let v = 1 - (clientY - fieldRect.top) / (fieldRect.bottom - fieldRect.top);\n\n      if (v > 1) {\n        v = 1;\n      } else if (v < 0) {\n        v = 0;\n      }\n\n      if (s > 1) {\n        s = 1;\n      } else if (s < 0) {\n        s = 0;\n      }\n\n      _this.__color.v = v;\n      _this.__color.s = s;\n\n      _this.setValue(_this.__color.toOriginal());\n\n\n      return false;\n    }\n\n    function setH(e) {\n      if (e.type.indexOf('touch') === -1) { e.preventDefault(); }\n\n      const fieldRect = _this.__hue_field.getBoundingClientRect();\n      const { clientY } = (e.touches && e.touches[0]) || e;\n      let h = 1 - (clientY - fieldRect.top) / (fieldRect.bottom - fieldRect.top);\n\n      if (h > 1) {\n        h = 1;\n      } else if (h < 0) {\n        h = 0;\n      }\n\n      _this.__color.h = h * 360;\n\n      _this.setValue(_this.__color.toOriginal());\n\n      return false;\n    }\n  }\n\n  updateDisplay() {\n    const i = interpret(this.getValue());\n\n    if (i !== false) {\n      let mismatch = false;\n\n      // Check for mismatch on the interpreted value.\n\n      common.each(Color.COMPONENTS, function(component) {\n        if (!common.isUndefined(i[component]) && !common.isUndefined(this.__color.__state[component]) &&\n          i[component] !== this.__color.__state[component]) {\n          mismatch = true;\n          return {}; // break\n        }\n      }, this);\n\n      // If nothing diverges, we keep our previous values\n      // for statefulness, otherwise we recalculate fresh\n      if (mismatch) {\n        common.extend(this.__color.__state, i);\n      }\n    }\n\n    common.extend(this.__temp.__state, this.__color.__state);\n\n    this.__temp.a = 1;\n\n    const flip = (this.__color.v < 0.5 || this.__color.s > 0.5) ? 255 : 0;\n    const _flip = 255 - flip;\n\n    common.extend(this.__field_knob.style, {\n      marginLeft: 100 * this.__color.s - 7 + 'px',\n      marginTop: 100 * (1 - this.__color.v) - 7 + 'px',\n      backgroundColor: this.__temp.toHexString(),\n      border: this.__field_knob_border + 'rgb(' + flip + ',' + flip + ',' + flip + ')'\n    });\n\n    this.__hue_knob.style.marginTop = (1 - this.__color.h / 360) * 100 + 'px';\n\n    this.__temp.s = 1;\n    this.__temp.v = 1;\n\n    linearGradient(this.__saturation_field, 'left', '#fff', this.__temp.toHexString());\n\n    this.__input.value = this.__color.toString();\n\n    common.extend(this.__input.style, {\n      backgroundColor: this.__color.toHexString(),\n      color: 'rgb(' + flip + ',' + flip + ',' + flip + ')',\n      textShadow: this.__input_textShadow + 'rgba(' + _flip + ',' + _flip + ',' + _flip + ',.7)'\n    });\n  }\n}\n\nconst vendors = ['-moz-', '-o-', '-webkit-', '-ms-', ''];\n\nfunction linearGradient(elem, x, a, b) {\n  elem.style.background = '';\n  common.each(vendors, function(vendor) {\n    elem.style.cssText += 'background: ' + vendor + 'linear-gradient(' + x + ', ' + a + ' 0%, ' + b + ' 100%); ';\n  });\n}\n\nfunction hueGradient(elem) {\n  elem.style.background = '';\n  elem.style.cssText += 'background: -moz-linear-gradient(top,  #ff0000 0%, #ff00ff 17%, #0000ff 34%, #00ffff 50%, #00ff00 67%, #ffff00 84%, #ff0000 100%);';\n  elem.style.cssText += 'background: -webkit-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: -o-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: -ms-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n}\n\nexport default ColorController;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nconst css = {\n  load: function(url, indoc) {\n    const doc = indoc || document;\n    const link = doc.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = url;\n    doc.getElementsByTagName('head')[0].appendChild(link);\n  },\n\n  inject: function(cssContent, indoc) {\n    const doc = indoc || document;\n    const injected = document.createElement('style');\n    injected.type = 'text/css';\n    injected.innerHTML = cssContent;\n    const head = doc.getElementsByTagName('head')[0];\n    try {\n      head.appendChild(injected);\n    } catch (e) { // Unable to inject CSS, probably because of a Content Security Policy\n    }\n  }\n};\n\nexport default css;\n", "const saveDialogContents = `<div id=\"dg-save\" class=\"dg dialogue\">\n\n  Here's the new load parameter for your <code>GUI</code>'s constructor:\n\n  <textarea id=\"dg-new-constructor\"></textarea>\n\n  <div id=\"dg-save-locally\">\n\n    <input id=\"dg-local-storage\" type=\"checkbox\"/> Automatically save\n    values to <code>localStorage</code> on exit.\n\n    <div id=\"dg-local-explain\">The values saved to <code>localStorage</code> will\n      override those passed to <code>dat.GUI</code>'s constructor. This makes it\n      easier to work incrementally, but <code>localStorage</code> is fragile,\n      and your friends may not see the same values you do.\n\n    </div>\n\n  </div>\n\n</div>`;\n\nexport default saveDialogContents;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport OptionController from './OptionController';\nimport NumberControllerBox from './NumberControllerBox';\nimport NumberControllerSlider from './NumberControllerSlider';\nimport StringController from './StringController';\nimport FunctionController from './FunctionController';\nimport BooleanController from './BooleanController';\nimport common from '../utils/common';\n\nconst ControllerFactory = function(object, property) {\n  const initialValue = object[property];\n\n  // Providing options?\n  if (common.isArray(arguments[2]) || common.isObject(arguments[2])) {\n    return new OptionController(object, property, arguments[2]);\n  }\n\n  // Providing a map?\n  if (common.isNumber(initialValue)) {\n    // Has min and max? (slider)\n    if (common.isNumber(arguments[2]) && common.isNumber(arguments[3])) {\n      // has step?\n      if (common.isNumber(arguments[4])) {\n        return new NumberControllerSlider(object, property,\n          arguments[2], arguments[3], arguments[4]);\n      }\n\n      return new NumberControllerSlider(object, property, arguments[2], arguments[3]);\n    }\n\n    // number box\n    if (common.isNumber(arguments[4])) { // has step\n      return new NumberControllerBox(object, property,\n        { min: arguments[2], max: arguments[3], step: arguments[4] });\n    }\n    return new NumberControllerBox(object, property, { min: arguments[2], max: arguments[3] });\n  }\n\n  if (common.isString(initialValue)) {\n    return new StringController(object, property);\n  }\n\n  if (common.isFunction(initialValue)) {\n    return new FunctionController(object, property, '');\n  }\n\n  if (common.isBoolean(initialValue)) {\n    return new BooleanController(object, property);\n  }\n\n  return null;\n};\n\nexport default ControllerFactory;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction requestAnimationFrame(callback) {\n  setTimeout(callback, 1000 / 60);\n}\n\nexport default window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    requestAnimationFrame;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport dom from './dom';\nimport common from '../utils/common';\n\nclass CenteredDiv {\n  constructor() {\n    this.backgroundElement = document.createElement('div');\n    common.extend(this.backgroundElement.style, {\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      top: 0,\n      left: 0,\n      display: 'none',\n      zIndex: '1000',\n      opacity: 0,\n      WebkitTransition: 'opacity 0.2s linear',\n      transition: 'opacity 0.2s linear'\n    });\n\n    dom.makeFullscreen(this.backgroundElement);\n    this.backgroundElement.style.position = 'fixed';\n\n    this.domElement = document.createElement('div');\n    common.extend(this.domElement.style, {\n      position: 'fixed',\n      display: 'none',\n      zIndex: '1001',\n      opacity: 0,\n      WebkitTransition: '-webkit-transform 0.2s ease-out, opacity 0.2s linear',\n      transition: 'transform 0.2s ease-out, opacity 0.2s linear'\n    });\n\n\n    document.body.appendChild(this.backgroundElement);\n    document.body.appendChild(this.domElement);\n\n    const _this = this;\n    dom.bind(this.backgroundElement, 'click', function() {\n      _this.hide();\n    });\n  }\n\n  show() {\n    const _this = this;\n\n    this.backgroundElement.style.display = 'block';\n\n    this.domElement.style.display = 'block';\n    this.domElement.style.opacity = 0;\n    //    this.domElement.style.top = '52%';\n    this.domElement.style.webkitTransform = 'scale(1.1)';\n\n    this.layout();\n\n    common.defer(function() {\n      _this.backgroundElement.style.opacity = 1;\n      _this.domElement.style.opacity = 1;\n      _this.domElement.style.webkitTransform = 'scale(1)';\n    });\n  }\n\n  /**\n   * Hide centered div\n   */\n  hide() {\n    const _this = this;\n\n    const hide = function() {\n      _this.domElement.style.display = 'none';\n      _this.backgroundElement.style.display = 'none';\n\n      dom.unbind(_this.domElement, 'webkitTransitionEnd', hide);\n      dom.unbind(_this.domElement, 'transitionend', hide);\n      dom.unbind(_this.domElement, 'oTransitionEnd', hide);\n    };\n\n    dom.bind(this.domElement, 'webkitTransitionEnd', hide);\n    dom.bind(this.domElement, 'transitionend', hide);\n    dom.bind(this.domElement, 'oTransitionEnd', hide);\n\n    this.backgroundElement.style.opacity = 0;\n    //    this.domElement.style.top = '48%';\n    this.domElement.style.opacity = 0;\n    this.domElement.style.webkitTransform = 'scale(1.1)';\n  }\n\n  layout() {\n    this.domElement.style.left = window.innerWidth / 2 - dom.getWidth(this.domElement) / 2 + 'px';\n    this.domElement.style.top = window.innerHeight / 2 - dom.getHeight(this.domElement) / 2 + 'px';\n  }\n}\n\nexport default CenteredDiv;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport css from '../utils/css';\nimport saveDialogueContents from './saveDialogue.html';\nimport ControllerFactory from '../controllers/ControllerFactory';\nimport Controller from '../controllers/Controller';\nimport BooleanController from '../controllers/BooleanController';\nimport FunctionController from '../controllers/FunctionController';\nimport NumberControllerBox from '../controllers/NumberControllerBox';\nimport NumberControllerSlider from '../controllers/NumberControllerSlider';\nimport ColorController from '../controllers/ColorController';\nimport requestAnimationFrame from '../utils/requestAnimationFrame';\nimport CenteredDiv from '../dom/CenteredDiv';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\nimport styleSheet from './style.scss'; // CSS to embed in build\n\ncss.inject(styleSheet);\n\n/** @ignore Outer-most className for GUI's */\nconst CSS_NAMESPACE = 'dg';\n\nconst HIDE_KEY_CODE = 72;\n\n/** @ignore The only value shared between the JS and SCSS. Use caution. */\nconst CLOSE_BUTTON_HEIGHT = 20;\n\nconst DEFAULT_DEFAULT_PRESET_NAME = 'Default';\n\nconst SUPPORTS_LOCAL_STORAGE = (function() {\n  try {\n    return !!window.localStorage;\n  } catch (e) {\n    return false;\n  }\n}());\n\nlet SAVE_DIALOGUE;\n\n/** @ignore Have we yet to create an autoPlace GUI? */\nlet autoPlaceVirgin = true;\n\n/** @ignore Fixed position div that auto place GUI's go inside */\nlet autoPlaceContainer;\n\n/** @ignore Are we hiding the GUI's ? */\nlet hide = false;\n\n/** @private GUI's which should be hidden */\nconst hideableGuis = [];\n\n/**\n * @class A lightweight controller library for JavaScript. It allows you to easily\n * manipulate variables and fire functions on the fly.\n *\n * @typicalname gui\n *\n * @example\n * // Creating a GUI with options.\n * var gui = new dat.GUI({name: 'My GUI'});\n *\n * @example\n * // Creating a GUI and a subfolder.\n * var gui = new dat.GUI();\n * var folder1 = gui.addFolder('Flow Field');\n *\n * @param {Object} [params]\n * @param {String} [params.name] The name of this GUI.\n * @param {Object} [params.load] JSON object representing the saved state of\n * this GUI.\n * @param {dat.gui.GUI} [params.parent] The GUI I'm nested in.\n * @param {Boolean} [params.autoPlace=true]\n * @param {Boolean} [params.hideable=true] If true, GUI is shown/hidden by <kbd>h</kbd> keypress.\n * @param {Boolean} [params.closed=false] If true, starts closed\n * @param {Boolean} [params.closeOnTop=false] If true, close/open button shows on top of the GUI\n */\nconst GUI = function(pars) {\n  const _this = this;\n\n  let params = pars || {};\n\n  /**\n   * Outermost DOM Element\n   * @type {DOMElement}\n   */\n  this.domElement = document.createElement('div');\n  this.__ul = document.createElement('ul');\n  this.domElement.appendChild(this.__ul);\n\n  dom.addClass(this.domElement, CSS_NAMESPACE);\n\n  /**\n   * Nested GUI's by name\n   * @ignore\n   */\n  this.__folders = {};\n\n  this.__controllers = [];\n\n  /**\n   * List of objects I'm remembering for save, only used in top level GUI\n   * @ignore\n   */\n  this.__rememberedObjects = [];\n\n  /**\n   * Maps the index of remembered objects to a map of controllers, only used\n   * in top level GUI.\n   *\n   * @private\n   * @ignore\n   *\n   * @example\n   * [\n   *  {\n     *    propertyName: Controller,\n     *    anotherPropertyName: Controller\n     *  },\n   *  {\n     *    propertyName: Controller\n     *  }\n   * ]\n   */\n  this.__rememberedObjectIndecesToControllers = [];\n\n  this.__listening = [];\n\n  // Default parameters\n  params = common.defaults(params, {\n    closeOnTop: false,\n    autoPlace: true,\n    width: GUI.DEFAULT_WIDTH\n  });\n\n  params = common.defaults(params, {\n    resizable: params.autoPlace,\n    hideable: params.autoPlace\n  });\n\n  if (!common.isUndefined(params.load)) {\n    // Explicit preset\n    if (params.preset) {\n      params.load.preset = params.preset;\n    }\n  } else {\n    params.load = { preset: DEFAULT_DEFAULT_PRESET_NAME };\n  }\n\n  if (common.isUndefined(params.parent) && params.hideable) {\n    hideableGuis.push(this);\n  }\n\n  // Only root level GUI's are resizable.\n  params.resizable = common.isUndefined(params.parent) && params.resizable;\n\n  if (params.autoPlace && common.isUndefined(params.scrollable)) {\n    params.scrollable = true;\n  }\n  //    params.scrollable = common.isUndefined(params.parent) && params.scrollable === true;\n\n  // Not part of params because I don't want people passing this in via\n  // constructor. Should be a 'remembered' value.\n  let useLocalStorage =\n    SUPPORTS_LOCAL_STORAGE &&\n    localStorage.getItem(getLocalStorageHash(this, 'isLocal')) === 'true';\n\n  let saveToLocalStorage;\n  let titleRow;\n\n  Object.defineProperties(this,\n    /** @lends GUI.prototype */\n    {\n      /**\n       * The parent <code>GUI</code>\n       * @type dat.gui.GUI\n       */\n      parent: {\n        get: function() {\n          return params.parent;\n        }\n      },\n\n      scrollable: {\n        get: function() {\n          return params.scrollable;\n        }\n      },\n\n      /**\n       * Handles <code>GUI</code>'s element placement for you\n       * @type Boolean\n       */\n      autoPlace: {\n        get: function() {\n          return params.autoPlace;\n        }\n      },\n\n      /**\n       * Handles <code>GUI</code>'s position of open/close button\n       * @type Boolean\n       */\n      closeOnTop: {\n        get: function() {\n          return params.closeOnTop;\n        }\n      },\n\n      /**\n       * The identifier for a set of saved values\n       * @type String\n       */\n      preset: {\n        get: function() {\n          if (_this.parent) {\n            return _this.getRoot().preset;\n          }\n\n          return params.load.preset;\n        },\n\n        set: function(v) {\n          if (_this.parent) {\n            _this.getRoot().preset = v;\n          } else {\n            params.load.preset = v;\n          }\n          setPresetSelectIndex(this);\n          _this.revert();\n        }\n      },\n\n      /**\n       * The width of <code>GUI</code> element\n       * @type Number\n       */\n      width: {\n        get: function() {\n          return params.width;\n        },\n        set: function(v) {\n          params.width = v;\n          setWidth(_this, v);\n        }\n      },\n\n      /**\n       * The name of <code>GUI</code>. Used for folders. i.e\n       * a folder's name\n       * @type String\n       */\n      name: {\n        get: function() {\n          return params.name;\n        },\n        set: function(v) {\n          // TODO Check for collisions among sibling folders\n          params.name = v;\n          if (titleRow) {\n            titleRow.innerHTML = params.name;\n          }\n        }\n      },\n\n      /**\n       * Whether the <code>GUI</code> is collapsed or not\n       * @type Boolean\n       */\n      closed: {\n        get: function() {\n          return params.closed;\n        },\n        set: function(v) {\n          params.closed = v;\n          if (params.closed) {\n            dom.addClass(_this.__ul, GUI.CLASS_CLOSED);\n          } else {\n            dom.removeClass(_this.__ul, GUI.CLASS_CLOSED);\n          }\n          // For browsers that aren't going to respect the CSS transition,\n          // Lets just check our height against the window height right off\n          // the bat.\n          this.onResize();\n\n          if (_this.__closeButton) {\n            _this.__closeButton.innerHTML = v ? GUI.TEXT_OPEN : GUI.TEXT_CLOSED;\n          }\n        }\n      },\n\n      /**\n       * Contains all presets\n       * @type Object\n       */\n      load: {\n        get: function() {\n          return params.load;\n        }\n      },\n\n      /**\n       * Determines whether or not to use <a href=\"https://developer.mozilla.org/en/DOM/Storage#localStorage\">localStorage</a> as the means for\n       * <code>remember</code>ing\n       * @type Boolean\n       */\n      useLocalStorage: {\n\n        get: function() {\n          return useLocalStorage;\n        },\n        set: function(bool) {\n          if (SUPPORTS_LOCAL_STORAGE) {\n            useLocalStorage = bool;\n            if (bool) {\n              dom.bind(window, 'unload', saveToLocalStorage);\n            } else {\n              dom.unbind(window, 'unload', saveToLocalStorage);\n            }\n            localStorage.setItem(getLocalStorageHash(_this, 'isLocal'), bool);\n          }\n        }\n      }\n    });\n\n  // Are we a root level GUI?\n  if (common.isUndefined(params.parent)) {\n    this.closed = params.closed || false;\n\n    dom.addClass(this.domElement, GUI.CLASS_MAIN);\n    dom.makeSelectable(this.domElement, false);\n\n    // Are we supposed to be loading locally?\n    if (SUPPORTS_LOCAL_STORAGE) {\n      if (useLocalStorage) {\n        _this.useLocalStorage = true;\n\n        const savedGui = localStorage.getItem(getLocalStorageHash(this, 'gui'));\n\n        if (savedGui) {\n          params.load = JSON.parse(savedGui);\n        }\n      }\n    }\n\n    this.__closeButton = document.createElement('div');\n    this.__closeButton.innerHTML = GUI.TEXT_CLOSED;\n    dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_BUTTON);\n    if (params.closeOnTop) {\n      dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_TOP);\n      this.domElement.insertBefore(this.__closeButton, this.domElement.childNodes[0]);\n    } else {\n      dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_BOTTOM);\n      this.domElement.appendChild(this.__closeButton);\n    }\n\n    dom.bind(this.__closeButton, 'click', function() {\n      _this.closed = !_this.closed;\n    });\n    // Oh, you're a nested GUI!\n  } else {\n    if (params.closed === undefined) {\n      params.closed = true;\n    }\n\n    const titleRowName = document.createTextNode(params.name);\n    dom.addClass(titleRowName, 'controller-name');\n\n    titleRow = addRow(_this, titleRowName);\n\n    const onClickTitle = function(e) {\n      e.preventDefault();\n      _this.closed = !_this.closed;\n      return false;\n    };\n\n    dom.addClass(this.__ul, GUI.CLASS_CLOSED);\n\n    dom.addClass(titleRow, 'title');\n    dom.bind(titleRow, 'click', onClickTitle);\n\n    if (!params.closed) {\n      this.closed = false;\n    }\n  }\n\n  if (params.autoPlace) {\n    if (common.isUndefined(params.parent)) {\n      if (autoPlaceVirgin) {\n        autoPlaceContainer = document.createElement('div');\n        dom.addClass(autoPlaceContainer, CSS_NAMESPACE);\n        dom.addClass(autoPlaceContainer, GUI.CLASS_AUTO_PLACE_CONTAINER);\n        document.body.appendChild(autoPlaceContainer);\n        autoPlaceVirgin = false;\n      }\n\n      // Put it in the dom for you.\n      autoPlaceContainer.appendChild(this.domElement);\n\n      // Apply the auto styles\n      dom.addClass(this.domElement, GUI.CLASS_AUTO_PLACE);\n    }\n\n\n    // Make it not elastic.\n    if (!this.parent) {\n      setWidth(_this, params.width);\n    }\n  }\n\n  this.__resizeHandler = function() {\n    _this.onResizeDebounced();\n  };\n\n  dom.bind(window, 'resize', this.__resizeHandler);\n  dom.bind(this.__ul, 'webkitTransitionEnd', this.__resizeHandler);\n  dom.bind(this.__ul, 'transitionend', this.__resizeHandler);\n  dom.bind(this.__ul, 'oTransitionEnd', this.__resizeHandler);\n  this.onResize();\n\n  if (params.resizable) {\n    addResizeHandle(this);\n  }\n\n  saveToLocalStorage = function() {\n    if (SUPPORTS_LOCAL_STORAGE && localStorage.getItem(getLocalStorageHash(_this, 'isLocal')) === 'true') {\n      localStorage.setItem(getLocalStorageHash(_this, 'gui'), JSON.stringify(_this.getSaveObject()));\n    }\n  };\n\n  // expose this method publicly\n  this.saveToLocalStorageIfPossible = saveToLocalStorage;\n\n  function resetWidth() {\n    const root = _this.getRoot();\n    root.width += 1;\n    common.defer(function() {\n      root.width -= 1;\n    });\n  }\n\n  if (!params.parent) {\n    resetWidth();\n  }\n};\n\nGUI.toggleHide = function() {\n  hide = !hide;\n  common.each(hideableGuis, function(gui) {\n    gui.domElement.style.display = hide ? 'none' : '';\n  });\n};\n\nGUI.CLASS_AUTO_PLACE = 'a';\nGUI.CLASS_AUTO_PLACE_CONTAINER = 'ac';\nGUI.CLASS_MAIN = 'main';\nGUI.CLASS_CONTROLLER_ROW = 'cr';\nGUI.CLASS_TOO_TALL = 'taller-than-window';\nGUI.CLASS_CLOSED = 'closed';\nGUI.CLASS_CLOSE_BUTTON = 'close-button';\nGUI.CLASS_CLOSE_TOP = 'close-top';\nGUI.CLASS_CLOSE_BOTTOM = 'close-bottom';\nGUI.CLASS_DRAG = 'drag';\n\nGUI.DEFAULT_WIDTH = 245;\nGUI.TEXT_CLOSED = 'Close Controls';\nGUI.TEXT_OPEN = 'Open Controls';\n\nGUI._keydownHandler = function(e) {\n  if (document.activeElement.type !== 'text' &&\n    (e.which === HIDE_KEY_CODE || e.keyCode === HIDE_KEY_CODE)) {\n    GUI.toggleHide();\n  }\n};\ndom.bind(window, 'keydown', GUI._keydownHandler, false);\n\ncommon.extend(\n  GUI.prototype,\n\n  /** @lends GUI.prototype */\n  {\n\n    /**\n     * Adds a new {@link Controller} to the GUI. The type of controller created\n     * is inferred from the initial value of <code>object[property]</code>. For\n     * color properties, see {@link addColor}.\n     *\n     * @param {Object} object The object to be manipulated\n     * @param {String} property The name of the property to be manipulated\n     * @param {Number} [min] Minimum allowed value\n     * @param {Number} [max] Maximum allowed value\n     * @param {Number} [step] Increment by which to change value\n     * @returns {Controller} The controller that was added to the GUI.\n     * @instance\n     *\n     * @example\n     * // Add a string controller.\n     * var person = {name: 'Sam'};\n     * gui.add(person, 'name');\n     *\n     * @example\n     * // Add a number controller slider.\n     * var person = {age: 45};\n     * gui.add(person, 'age', 0, 100);\n     */\n    add: function(object, property) {\n      return add(\n        this,\n        object,\n        property,\n        {\n          factoryArgs: Array.prototype.slice.call(arguments, 2)\n        }\n      );\n    },\n\n    /**\n     * Adds a new color controller to the GUI.\n     *\n     * @param object\n     * @param property\n     * @returns {Controller} The controller that was added to the GUI.\n     * @instance\n     *\n     * @example\n     * var palette = {\n     *   color1: '#FF0000', // CSS string\n     *   color2: [ 0, 128, 255 ], // RGB array\n     *   color3: [ 0, 128, 255, 0.3 ], // RGB with alpha\n     *   color4: { h: 350, s: 0.9, v: 0.3 } // Hue, saturation, value\n     * };\n     * gui.addColor(palette, 'color1');\n     * gui.addColor(palette, 'color2');\n     * gui.addColor(palette, 'color3');\n     * gui.addColor(palette, 'color4');\n     */\n    addColor: function(object, property) {\n      return add(\n        this,\n        object,\n        property,\n        {\n          color: true\n        }\n      );\n    },\n\n    /**\n     * Removes the given controller from the GUI.\n     * @param {Controller} controller\n     * @instance\n     */\n    remove: function(controller) {\n      // TODO listening?\n      this.__ul.removeChild(controller.__li);\n      this.__controllers.splice(this.__controllers.indexOf(controller), 1);\n      const _this = this;\n      common.defer(function() {\n        _this.onResize();\n      });\n    },\n\n    /**\n     * Removes the root GUI from the document and unbinds all event listeners.\n     * For subfolders, use `gui.removeFolder(folder)` instead.\n     * @instance\n     */\n    destroy: function() {\n      if (this.parent) {\n        throw new Error(\n          'Only the root GUI should be removed with .destroy(). ' +\n          'For subfolders, use gui.removeFolder(folder) instead.'\n        );\n      }\n\n      if (this.autoPlace) {\n        autoPlaceContainer.removeChild(this.domElement);\n      }\n\n      const _this = this;\n      common.each(this.__folders, function(subfolder) {\n        _this.removeFolder(subfolder);\n      });\n\n      dom.unbind(window, 'keydown', GUI._keydownHandler, false);\n\n      removeListeners(this);\n    },\n\n    /**\n     * Creates a new subfolder GUI instance.\n     * @param name\n     * @returns {dat.gui.GUI} The new folder.\n     * @throws {Error} if this GUI already has a folder by the specified\n     * name\n     * @instance\n     */\n    addFolder: function(name) {\n      // We have to prevent collisions on names in order to have a key\n      // by which to remember saved values\n      if (this.__folders[name] !== undefined) {\n        throw new Error('You already have a folder in this GUI by the' +\n          ' name \"' + name + '\"');\n      }\n\n      const newGuiParams = { name: name, parent: this };\n\n      // We need to pass down the autoPlace trait so that we can\n      // attach event listeners to open/close folder actions to\n      // ensure that a scrollbar appears if the window is too short.\n      newGuiParams.autoPlace = this.autoPlace;\n\n      // Do we have saved appearance data for this folder?\n      if (this.load && // Anything loaded?\n        this.load.folders && // Was my parent a dead-end?\n        this.load.folders[name]) { // Did daddy remember me?\n        // Start me closed if I was closed\n        newGuiParams.closed = this.load.folders[name].closed;\n\n        // Pass down the loaded data\n        newGuiParams.load = this.load.folders[name];\n      }\n\n      const gui = new GUI(newGuiParams);\n      this.__folders[name] = gui;\n\n      const li = addRow(this, gui.domElement);\n      dom.addClass(li, 'folder');\n      return gui;\n    },\n\n    /**\n     * Removes a subfolder GUI instance.\n     * @param {dat.gui.GUI} folder The folder to remove.\n     * @instance\n     */\n    removeFolder: function(folder) {\n      this.__ul.removeChild(folder.domElement.parentElement);\n\n      delete this.__folders[folder.name];\n\n      // Do we have saved appearance data for this folder?\n      if (this.load && // Anything loaded?\n        this.load.folders && // Was my parent a dead-end?\n        this.load.folders[folder.name]) {\n        delete this.load.folders[folder.name];\n      }\n\n      removeListeners(folder);\n\n      const _this = this;\n\n      common.each(folder.__folders, function(subfolder) {\n        folder.removeFolder(subfolder);\n      });\n\n      common.defer(function() {\n        _this.onResize();\n      });\n    },\n\n    /**\n     * Opens the GUI.\n     */\n    open: function() {\n      this.closed = false;\n    },\n\n    /**\n     * Closes the GUI.\n     */\n    close: function() {\n      this.closed = true;\n    },\n\n    /**\n    * Hides the GUI.\n    */\n    hide: function() {\n      this.domElement.style.display = 'none';\n    },\n\n    /**\n    * Shows the GUI.\n    */\n    show: function() {\n      this.domElement.style.display = '';\n    },\n\n\n    onResize: function() {\n      // we debounce this function to prevent performance issues when rotating on tablet/mobile\n      const root = this.getRoot();\n      if (root.scrollable) {\n        const top = dom.getOffset(root.__ul).top;\n        let h = 0;\n\n        common.each(root.__ul.childNodes, function(node) {\n          if (!(root.autoPlace && node === root.__save_row)) {\n            h += dom.getHeight(node);\n          }\n        });\n\n        if (window.innerHeight - top - CLOSE_BUTTON_HEIGHT < h) {\n          dom.addClass(root.domElement, GUI.CLASS_TOO_TALL);\n          root.__ul.style.height = window.innerHeight - top - CLOSE_BUTTON_HEIGHT + 'px';\n        } else {\n          dom.removeClass(root.domElement, GUI.CLASS_TOO_TALL);\n          root.__ul.style.height = 'auto';\n        }\n      }\n\n      if (root.__resize_handle) {\n        common.defer(function() {\n          root.__resize_handle.style.height = root.__ul.offsetHeight + 'px';\n        });\n      }\n\n      if (root.__closeButton) {\n        root.__closeButton.style.width = root.width + 'px';\n      }\n    },\n\n    onResizeDebounced: common.debounce(function() { this.onResize(); }, 50),\n\n    /**\n     * Mark objects for saving. The order of these objects cannot change as\n     * the GUI grows. When remembering new objects, append them to the end\n     * of the list.\n     *\n     * @param {...Object} objects\n     * @throws {Error} if not called on a top level GUI.\n     * @instance\n     * @ignore\n     */\n    remember: function() {\n      if (common.isUndefined(SAVE_DIALOGUE)) {\n        SAVE_DIALOGUE = new CenteredDiv();\n        SAVE_DIALOGUE.domElement.innerHTML = saveDialogueContents;\n      }\n\n      if (this.parent) {\n        throw new Error('You can only call remember on a top level GUI.');\n      }\n\n      const _this = this;\n\n      common.each(Array.prototype.slice.call(arguments), function(object) {\n        if (_this.__rememberedObjects.length === 0) {\n          addSaveMenu(_this);\n        }\n        if (_this.__rememberedObjects.indexOf(object) === -1) {\n          _this.__rememberedObjects.push(object);\n        }\n      });\n\n      if (this.autoPlace) {\n        // Set save row width\n        setWidth(this, this.width);\n      }\n    },\n\n    /**\n     * @returns {dat.gui.GUI} the topmost parent GUI of a nested GUI.\n     * @instance\n     */\n    getRoot: function() {\n      let gui = this;\n      while (gui.parent) {\n        gui = gui.parent;\n      }\n      return gui;\n    },\n\n    /**\n     * @returns {Object} a JSON object representing the current state of\n     * this GUI as well as its remembered properties.\n     * @instance\n     */\n    getSaveObject: function() {\n      const toReturn = this.load;\n      toReturn.closed = this.closed;\n\n      // Am I remembering any values?\n      if (this.__rememberedObjects.length > 0) {\n        toReturn.preset = this.preset;\n\n        if (!toReturn.remembered) {\n          toReturn.remembered = {};\n        }\n\n        toReturn.remembered[this.preset] = getCurrentPreset(this);\n      }\n\n      toReturn.folders = {};\n      common.each(this.__folders, function(element, key) {\n        toReturn.folders[key] = element.getSaveObject();\n      });\n\n      return toReturn;\n    },\n\n    save: function() {\n      if (!this.load.remembered) {\n        this.load.remembered = {};\n      }\n\n      this.load.remembered[this.preset] = getCurrentPreset(this);\n      markPresetModified(this, false);\n      this.saveToLocalStorageIfPossible();\n    },\n\n    saveAs: function(presetName) {\n      if (!this.load.remembered) {\n        // Retain default values upon first save\n        this.load.remembered = {};\n        this.load.remembered[DEFAULT_DEFAULT_PRESET_NAME] = getCurrentPreset(this, true);\n      }\n\n      this.load.remembered[presetName] = getCurrentPreset(this);\n      this.preset = presetName;\n      addPresetOption(this, presetName, true);\n      this.saveToLocalStorageIfPossible();\n    },\n\n    revert: function(gui) {\n      common.each(this.__controllers, function(controller) {\n        // Make revert work on Default.\n        if (!this.getRoot().load.remembered) {\n          controller.setValue(controller.initialValue);\n        } else {\n          recallSavedValue(gui || this.getRoot(), controller);\n        }\n\n        // fire onFinishChange callback\n        if (controller.__onFinishChange) {\n          controller.__onFinishChange.call(controller, controller.getValue());\n        }\n      }, this);\n\n      common.each(this.__folders, function(folder) {\n        folder.revert(folder);\n      });\n\n      if (!gui) {\n        markPresetModified(this.getRoot(), false);\n      }\n    },\n\n    listen: function(controller) {\n      const init = this.__listening.length === 0;\n      this.__listening.push(controller);\n      if (init) {\n        updateDisplays(this.__listening);\n      }\n    },\n\n    updateDisplay: function() {\n      common.each(this.__controllers, function(controller) {\n        controller.updateDisplay();\n      });\n      common.each(this.__folders, function(folder) {\n        folder.updateDisplay();\n      });\n    }\n  }\n);\n\n/**\n * Add a row to the end of the GUI or before another row.\n *\n * @param gui\n * @param [newDom] If specified, inserts the dom content in the new row\n * @param [liBefore] If specified, places the new row before another row\n *\n * @ignore\n */\nfunction addRow(gui, newDom, liBefore) {\n  const li = document.createElement('li');\n  if (newDom) {\n    li.appendChild(newDom);\n  }\n\n  if (liBefore) {\n    gui.__ul.insertBefore(li, liBefore);\n  } else {\n    gui.__ul.appendChild(li);\n  }\n  gui.onResize();\n  return li;\n}\n\nfunction removeListeners(gui) {\n  dom.unbind(window, 'resize', gui.__resizeHandler);\n\n  if (gui.saveToLocalStorageIfPossible) {\n    dom.unbind(window, 'unload', gui.saveToLocalStorageIfPossible);\n  }\n}\n\nfunction markPresetModified(gui, modified) {\n  const opt = gui.__preset_select[gui.__preset_select.selectedIndex];\n\n  if (modified) {\n    opt.innerHTML = opt.value + '*';\n  } else {\n    opt.innerHTML = opt.value;\n  }\n}\n\nfunction augmentController(gui, li, controller) {\n  controller.__li = li;\n  controller.__gui = gui;\n\n  common.extend(controller, /** @lends Controller.prototype */ {\n    /**\n     * @param  {Array|Object} options\n     * @return {Controller}\n     */\n    options: function(options) {\n      if (arguments.length > 1) {\n        const nextSibling = controller.__li.nextElementSibling;\n        controller.remove();\n\n        return add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: nextSibling,\n            factoryArgs: [common.toArray(arguments)]\n          }\n        );\n      }\n\n      if (common.isArray(options) || common.isObject(options)) {\n        const nextSibling = controller.__li.nextElementSibling;\n        controller.remove();\n\n        return add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: nextSibling,\n            factoryArgs: [options]\n          }\n        );\n      }\n    },\n\n    /**\n     * Sets the name of the controller.\n     * @param  {string} name\n     * @return {Controller}\n     */\n    name: function(name) {\n      controller.__li.firstElementChild.firstElementChild.innerHTML = name;\n      return controller;\n    },\n\n    /**\n     * Sets controller to listen for changes on its underlying object.\n     * @return {Controller}\n     */\n    listen: function() {\n      controller.__gui.listen(controller);\n      return controller;\n    },\n\n    /**\n     * Removes the controller from its parent GUI.\n     * @return {Controller}\n     */\n    remove: function() {\n      controller.__gui.remove(controller);\n      return controller;\n    }\n  });\n\n  // All sliders should be accompanied by a box.\n  if (controller instanceof NumberControllerSlider) {\n    const box = new NumberControllerBox(controller.object, controller.property,\n      { min: controller.__min, max: controller.__max, step: controller.__step });\n\n    common.each(['updateDisplay', 'onChange', 'onFinishChange', 'step', 'min', 'max'], function(method) {\n      const pc = controller[method];\n      const pb = box[method];\n      controller[method] = box[method] = function() {\n        const args = Array.prototype.slice.call(arguments);\n        pb.apply(box, args);\n        return pc.apply(controller, args);\n      };\n    });\n\n    dom.addClass(li, 'has-slider');\n    controller.domElement.insertBefore(box.domElement, controller.domElement.firstElementChild);\n  } else if (controller instanceof NumberControllerBox) {\n    const r = function(returned) {\n      // Have we defined both boundaries?\n      if (common.isNumber(controller.__min) && common.isNumber(controller.__max)) {\n        // Well, then lets just replace this with a slider.\n\n        // lets remember if the old controller had a specific name or was listening\n        const oldName = controller.__li.firstElementChild.firstElementChild.innerHTML;\n        const wasListening = controller.__gui.__listening.indexOf(controller) > -1;\n\n        controller.remove();\n        const newController = add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: controller.__li.nextElementSibling,\n            factoryArgs: [controller.__min, controller.__max, controller.__step]\n          }\n        );\n\n        newController.name(oldName);\n        if (wasListening) newController.listen();\n\n        return newController;\n      }\n\n      return returned;\n    };\n\n    controller.min = common.compose(r, controller.min);\n    controller.max = common.compose(r, controller.max);\n  } else if (controller instanceof BooleanController) {\n    dom.bind(li, 'click', function() {\n      dom.fakeEvent(controller.__checkbox, 'click');\n    });\n\n    dom.bind(controller.__checkbox, 'click', function(e) {\n      e.stopPropagation(); // Prevents double-toggle\n    });\n  } else if (controller instanceof FunctionController) {\n    dom.bind(li, 'click', function() {\n      dom.fakeEvent(controller.__button, 'click');\n    });\n\n    dom.bind(li, 'mouseover', function() {\n      dom.addClass(controller.__button, 'hover');\n    });\n\n    dom.bind(li, 'mouseout', function() {\n      dom.removeClass(controller.__button, 'hover');\n    });\n  } else if (controller instanceof ColorController) {\n    dom.addClass(li, 'color');\n    controller.updateDisplay = common.compose(function(val) {\n      li.style.borderLeftColor = controller.__color.toString();\n      return val;\n    }, controller.updateDisplay);\n\n    controller.updateDisplay();\n  }\n\n  controller.setValue = common.compose(function(val) {\n    if (gui.getRoot().__preset_select && controller.isModified()) {\n      markPresetModified(gui.getRoot(), true);\n    }\n\n    return val;\n  }, controller.setValue);\n}\n\nfunction recallSavedValue(gui, controller) {\n  // Find the topmost GUI, that's where remembered objects live.\n  const root = gui.getRoot();\n\n  // Does the object we're controlling match anything we've been told to\n  // remember?\n  const matchedIndex = root.__rememberedObjects.indexOf(controller.object);\n\n  // Why yes, it does!\n  if (matchedIndex !== -1) {\n    // Let me fetch a map of controllers for thcommon.isObject.\n    let controllerMap = root.__rememberedObjectIndecesToControllers[matchedIndex];\n\n    // Ohp, I believe this is the first controller we've created for this\n    // object. Lets make the map fresh.\n    if (controllerMap === undefined) {\n      controllerMap = {};\n      root.__rememberedObjectIndecesToControllers[matchedIndex] =\n        controllerMap;\n    }\n\n    // Keep track of this controller\n    controllerMap[controller.property] = controller;\n\n    // Okay, now have we saved any values for this controller?\n    if (root.load && root.load.remembered) {\n      const presetMap = root.load.remembered;\n\n      // Which preset are we trying to load?\n      let preset;\n\n      if (presetMap[gui.preset]) {\n        preset = presetMap[gui.preset];\n      } else if (presetMap[DEFAULT_DEFAULT_PRESET_NAME]) {\n        // Uhh, you can have the default instead?\n        preset = presetMap[DEFAULT_DEFAULT_PRESET_NAME];\n      } else {\n        // Nada.\n        return;\n      }\n\n      // Did the loaded object remember thcommon.isObject? &&  Did we remember this particular property?\n      if (preset[matchedIndex] && preset[matchedIndex][controller.property] !== undefined) {\n        // We did remember something for this guy ...\n        const value = preset[matchedIndex][controller.property];\n\n        // And that's what it is.\n        controller.initialValue = value;\n        controller.setValue(value);\n      }\n    }\n  }\n}\n\nfunction add(gui, object, property, params) {\n  if (object[property] === undefined) {\n    throw new Error(`Object \"${object}\" has no property \"${property}\"`);\n  }\n\n  let controller;\n\n  if (params.color) {\n    controller = new ColorController(object, property);\n  } else {\n    const factoryArgs = [object, property].concat(params.factoryArgs);\n    controller = ControllerFactory.apply(gui, factoryArgs);\n  }\n\n  if (params.before instanceof Controller) {\n    params.before = params.before.__li;\n  }\n\n  recallSavedValue(gui, controller);\n\n  dom.addClass(controller.domElement, 'c');\n\n  const name = document.createElement('span');\n  dom.addClass(name, 'property-name');\n  name.innerHTML = controller.property;\n\n  const container = document.createElement('div');\n  container.appendChild(name);\n  container.appendChild(controller.domElement);\n\n  const li = addRow(gui, container, params.before);\n\n  dom.addClass(li, GUI.CLASS_CONTROLLER_ROW);\n  if (controller instanceof ColorController) {\n    dom.addClass(li, 'color');\n  } else {\n    dom.addClass(li, typeof controller.getValue());\n  }\n\n  augmentController(gui, li, controller);\n\n  gui.__controllers.push(controller);\n\n  return controller;\n}\n\nfunction getLocalStorageHash(gui, key) {\n  // TODO how does this deal with multiple GUI's?\n  return document.location.href + '.' + key;\n}\n\nfunction addPresetOption(gui, name, setSelected) {\n  const opt = document.createElement('option');\n  opt.innerHTML = name;\n  opt.value = name;\n  gui.__preset_select.appendChild(opt);\n  if (setSelected) {\n    gui.__preset_select.selectedIndex = gui.__preset_select.length - 1;\n  }\n}\n\nfunction showHideExplain(gui, explain) {\n  explain.style.display = gui.useLocalStorage ? 'block' : 'none';\n}\n\nfunction addSaveMenu(gui) {\n  const div = gui.__save_row = document.createElement('li');\n\n  dom.addClass(gui.domElement, 'has-save');\n\n  gui.__ul.insertBefore(div, gui.__ul.firstChild);\n\n  dom.addClass(div, 'save-row');\n\n  const gears = document.createElement('span');\n  gears.innerHTML = '&nbsp;';\n  dom.addClass(gears, 'button gears');\n\n  // TODO replace with FunctionController\n  const button = document.createElement('span');\n  button.innerHTML = 'Save';\n  dom.addClass(button, 'button');\n  dom.addClass(button, 'save');\n\n  const button2 = document.createElement('span');\n  button2.innerHTML = 'New';\n  dom.addClass(button2, 'button');\n  dom.addClass(button2, 'save-as');\n\n  const button3 = document.createElement('span');\n  button3.innerHTML = 'Revert';\n  dom.addClass(button3, 'button');\n  dom.addClass(button3, 'revert');\n\n  const select = gui.__preset_select = document.createElement('select');\n\n  if (gui.load && gui.load.remembered) {\n    common.each(gui.load.remembered, function(value, key) {\n      addPresetOption(gui, key, key === gui.preset);\n    });\n  } else {\n    addPresetOption(gui, DEFAULT_DEFAULT_PRESET_NAME, false);\n  }\n\n  dom.bind(select, 'change', function() {\n    for (let index = 0; index < gui.__preset_select.length; index++) {\n      gui.__preset_select[index].innerHTML = gui.__preset_select[index].value;\n    }\n\n    gui.preset = this.value;\n  });\n\n  div.appendChild(select);\n  div.appendChild(gears);\n  div.appendChild(button);\n  div.appendChild(button2);\n  div.appendChild(button3);\n\n  if (SUPPORTS_LOCAL_STORAGE) {\n    const explain = document.getElementById('dg-local-explain');\n    const localStorageCheckBox = document.getElementById('dg-local-storage');\n    const saveLocally = document.getElementById('dg-save-locally');\n\n    saveLocally.style.display = 'block';\n\n    if (localStorage.getItem(getLocalStorageHash(gui, 'isLocal')) === 'true') {\n      localStorageCheckBox.setAttribute('checked', 'checked');\n    }\n\n    showHideExplain(gui, explain);\n\n    // TODO: Use a boolean controller, fool!\n    dom.bind(localStorageCheckBox, 'change', function() {\n      gui.useLocalStorage = !gui.useLocalStorage;\n      showHideExplain(gui, explain);\n    });\n  }\n\n  const newConstructorTextArea = document.getElementById('dg-new-constructor');\n\n  dom.bind(newConstructorTextArea, 'keydown', function(e) {\n    if (e.metaKey && (e.which === 67 || e.keyCode === 67)) {\n      SAVE_DIALOGUE.hide();\n    }\n  });\n\n  dom.bind(gears, 'click', function() {\n    newConstructorTextArea.innerHTML = JSON.stringify(gui.getSaveObject(), undefined, 2);\n    SAVE_DIALOGUE.show();\n    newConstructorTextArea.focus();\n    newConstructorTextArea.select();\n  });\n\n  dom.bind(button, 'click', function() {\n    gui.save();\n  });\n\n  dom.bind(button2, 'click', function() {\n    const presetName = prompt('Enter a new preset name.');\n    if (presetName) {\n      gui.saveAs(presetName);\n    }\n  });\n\n  dom.bind(button3, 'click', function() {\n    gui.revert();\n  });\n\n  // div.appendChild(button2);\n}\n\nfunction addResizeHandle(gui) {\n  let pmouseX;\n\n  gui.__resize_handle = document.createElement('div');\n\n  common.extend(gui.__resize_handle.style, {\n\n    width: '6px',\n    marginLeft: '-3px',\n    height: '200px',\n    cursor: 'ew-resize',\n    position: 'absolute'\n    // border: '1px solid blue'\n\n  });\n\n  function drag(e) {\n    e.preventDefault();\n\n    gui.width += pmouseX - e.clientX;\n    gui.onResize();\n    pmouseX = e.clientX;\n\n    return false;\n  }\n\n  function dragStop() {\n    dom.removeClass(gui.__closeButton, GUI.CLASS_DRAG);\n    dom.unbind(window, 'mousemove', drag);\n    dom.unbind(window, 'mouseup', dragStop);\n  }\n\n  function dragStart(e) {\n    e.preventDefault();\n\n    pmouseX = e.clientX;\n\n    dom.addClass(gui.__closeButton, GUI.CLASS_DRAG);\n    dom.bind(window, 'mousemove', drag);\n    dom.bind(window, 'mouseup', dragStop);\n\n    return false;\n  }\n\n  dom.bind(gui.__resize_handle, 'mousedown', dragStart);\n  dom.bind(gui.__closeButton, 'mousedown', dragStart);\n\n  gui.domElement.insertBefore(gui.__resize_handle, gui.domElement.firstElementChild);\n}\n\nfunction setWidth(gui, w) {\n  gui.domElement.style.width = w + 'px';\n  // Auto placed save-rows are position fixed, so we have to\n  // set the width manually if we want it to bleed to the edge\n  if (gui.__save_row && gui.autoPlace) {\n    gui.__save_row.style.width = w + 'px';\n  }\n  if (gui.__closeButton) {\n    gui.__closeButton.style.width = w + 'px';\n  }\n}\n\nfunction getCurrentPreset(gui, useInitialValues) {\n  const toReturn = {};\n\n  // For each object I'm remembering\n  common.each(gui.__rememberedObjects, function(val, index) {\n    const savedValues = {};\n\n    // The controllers I've made for thcommon.isObject by property\n    const controllerMap =\n      gui.__rememberedObjectIndecesToControllers[index];\n\n    // Remember each value for each property\n    common.each(controllerMap, function(controller, property) {\n      savedValues[property] = useInitialValues ? controller.initialValue : controller.getValue();\n    });\n\n    // Save the values for thcommon.isObject\n    toReturn[index] = savedValues;\n  });\n\n  return toReturn;\n}\n\nfunction setPresetSelectIndex(gui) {\n  for (let index = 0; index < gui.__preset_select.length; index++) {\n    if (gui.__preset_select[index].value === gui.preset) {\n      gui.__preset_select.selectedIndex = index;\n    }\n  }\n}\n\nfunction updateDisplays(controllerArray) {\n  if (controllerArray.length !== 0) {\n    requestAnimationFrame.call(window, function() {\n      updateDisplays(controllerArray);\n    });\n  }\n\n  common.each(controllerArray, function(c) {\n    c.updateDisplay();\n  });\n}\n\nexport default GUI;\n", "/**\n * dat-gui JavaScript Controller Library\n * https://github.com/dataarts/dat.gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Color from './color/Color';\nimport math from './color/math';\nimport interpret from './color/interpret';\n\nimport Controller from './controllers/Controller';\nimport BooleanController from './controllers/BooleanController';\nimport OptionController from './controllers/OptionController';\nimport StringController from './controllers/StringController';\nimport NumberController from './controllers/NumberController';\nimport NumberControllerBox from './controllers/NumberControllerBox';\nimport NumberControllerSlider from './controllers/NumberControllerSlider';\nimport FunctionController from './controllers/FunctionController';\nimport ColorController from './controllers/ColorController';\n\nimport domImport from './dom/dom';\nimport GUIImport from './gui/GUI';\n\nexport const color = {\n  Color: Color,\n  math: math,\n  interpret: interpret\n};\n\nexport const controllers = {\n  Controller: Controller,\n  BooleanController: BooleanController,\n  OptionController: OptionController,\n  StringController: StringController,\n  NumberController: NumberController,\n  NumberControllerBox: NumberControllerBox,\n  NumberControllerSlider: NumberControllerSlider,\n  FunctionController: FunctionController,\n  ColorController: ColorController\n};\n\nexport const dom = { dom: domImport };\n\nexport const gui = { GUI: GUIImport };\n\nexport const GUI = GUIImport;\n\nexport default {\n  color,\n  controllers,\n  dom,\n  gui,\n  GUI\n};\n", "// @deno-types=\"npm:@types/dat.gui@0.7.9\"\nimport * as dat from 'dat.gui';\nimport {\n  CONFIG,\n  DISPLAY_MODE,\n  GridDebugValue,\n  LightCfg,\n} from '../constants.ts';\nimport { GpuProfiler } from '../gpuProfiler.ts';\nimport { Scene } from '../scene/scene.ts';\nimport { Camera } from '../camera.ts';\nimport { mat4, vec4 } from 'wgpu-matrix';\nimport { dgr2rad } from '../utils/index.ts';\n\n// https://github.com/Scthe/WebFX/blob/master/src/UISystem.ts#L13\n// https://github.com/Scthe/gaussian-splatting-webgpu/blob/master/src/web/gui.ts\n\ntype GuiCtrl = dat.GUIController<Record<string, unknown>>;\n\nexport function initializeGUI(\n  _device: GPUDevice,\n  profiler: GpuProfiler,\n  scene: Scene,\n  camera: Camera\n) {\n  const gui = new dat.GUI();\n\n  const dummyObject = {\n    openGithub: () => {\n      window.location.href = CONFIG.githubRepoLink;\n    },\n    profile: () => {\n      profiler.profileNextFrame(true);\n    },\n    resetCamera: () => {\n      camera.resetPosition();\n    },\n    resetSimulation: () => {\n      CONFIG.hairSimulation.nextFrameResetSimulation = true;\n    },\n    resetBall: () => {\n      vec4.copy(\n        CONFIG.hairSimulation.collisionSphereInitial,\n        CONFIG.hairSimulation.collisionSphere\n      );\n    },\n    modelRotation: 0,\n  };\n\n  // github\n  gui.add(dummyObject, 'openGithub').name('GITHUB');\n\n  // profiler\n  gui.add(dummyObject, 'profile').name('Profile');\n\n  // display mode\n  const modeDummy = createDummy(CONFIG, 'displayMode', [\n    { label: 'Final', value: DISPLAY_MODE.FINAL },\n    { label: 'DBG: tiles', value: DISPLAY_MODE.TILES },\n    { label: 'DBG: slices cnt', value: DISPLAY_MODE.USED_SLICES },\n    { label: 'DBG: hw-render', value: DISPLAY_MODE.HW_RENDER },\n    { label: 'DBG: depth', value: DISPLAY_MODE.DEPTH },\n    { label: 'DBG: normals', value: DISPLAY_MODE.NORMALS },\n    { label: 'DBG: ao', value: DISPLAY_MODE.AO },\n  ]);\n  const modeCtrl = gui\n    .add(modeDummy, 'displayMode', modeDummy.values)\n    .name('Display mode');\n\n  // folders\n  addSceneFolder(gui);\n  addHairRenderFolder(gui);\n  addHairMaterialFolder(gui);\n  addHairSimulationFolder(gui);\n  addAmbientLightFolder(gui);\n  addLightFolder(gui, CONFIG.lights[0], 'Light 0');\n  addLightFolder(gui, CONFIG.lights[1], 'Light 1');\n  addLightFolder(gui, CONFIG.lights[2], 'Light 2');\n  addShadowsFolder(gui);\n  addAoFolder(gui);\n  addColorMgmt();\n\n  //////////////\n  /// subdirs\n\n  function addSceneFolder(gui: dat.GUI) {\n    const dir = gui.addFolder('Scene');\n    const bg = CONFIG.background;\n    // dir.open();\n\n    // camera reset\n    dir.add(dummyObject, 'resetCamera').name('Reset camera');\n\n    dir\n      .add(dummyObject, 'modelRotation', 0.0, 360.0)\n      .step(1)\n      .name('Rotation')\n      .onChange((v: number) => {\n        mat4.rotationY(dgr2rad(v), scene.modelMatrix);\n      });\n\n    // bg\n    addColorController(dir, bg, 'color0', 'Bg color 0');\n    addColorController(dir, bg, 'color1', 'Bg color 1');\n    dir.add(bg, 'noiseScale', 0.0, 10.0).name('Bg noise scale');\n    dir.add(bg, 'gradientStrength', 0.0, 1.0).name('Bg gradient');\n  }\n\n  function addHairRenderFolder(gui: dat.GUI) {\n    const cfg = CONFIG.hairRender;\n    const dir = gui.addFolder('Hair render');\n    dir.open();\n\n    dir.add(cfg, 'lodRenderPercent', 0, 100).step(1).name('Render %');\n    dir.add(cfg, 'fiberRadius', 0.0001, 0.002).name('Radius');\n    const tileSegmentsCtrl = dir\n      .add(cfg, 'dbgTileModeMaxSegments', 1, 512)\n      .step(1)\n      .name('Max segments');\n    const slicesCtrl = dir\n      .add(cfg, 'dbgSlicesModeMaxSlices', 1, 128)\n      .step(1)\n      .name('Max slices');\n    const showTilesCtrl = dir.add(cfg, 'dbgShowTiles').name('Show tiles');\n\n    // init\n    modeCtrl.onFinishChange(onDisplayModeChange);\n\n    function onDisplayModeChange() {\n      const mode = CONFIG.displayMode;\n      setVisible(tileSegmentsCtrl, mode === DISPLAY_MODE.TILES);\n      setVisible(slicesCtrl, mode === DISPLAY_MODE.USED_SLICES);\n      setVisible(showTilesCtrl, mode === DISPLAY_MODE.FINAL);\n    }\n  }\n\n  function addHairMaterialFolder(gui: dat.GUI) {\n    const cfg = CONFIG.hairRender.material;\n    const dir = gui.addFolder('Hair material');\n    // dir.open();\n\n    addColorController(dir, cfg, 'color0', 'Color root');\n    addColorController(dir, cfg, 'color1', 'Color tip');\n    dir.add(cfg, 'colorRng', 0.0, 1.0).name('Color RNG');\n    dir.add(cfg, 'lumaRng', 0.0, 1.0).name('Luma RNG');\n    dir.add(cfg, 'specular', 0.0, 3.0, 0.01).name('Specular');\n    dir.add(cfg, 'weightTT', 0.0, 2.0, 0.01).name('Weight TT');\n    dir.add(cfg, 'weightTRT', 0.0, 2.0, 0.01).name('Weight TRT');\n    dir.add(cfg, 'shift', -1.0, 1.0, 0.01).name('Shift');\n    dir.add(cfg, 'roughness', 0.0, 1.0, 0.01).name('Roughness');\n    dir.add(cfg, 'attenuation', 0.0, 40.0).name('Attenuation');\n    dir.add(cfg, 'shadows', 0.0, 1.0).name('Shadows');\n  }\n\n  function addHairSimulationFolder(gui: dat.GUI) {\n    const cfg = CONFIG.hairSimulation;\n    const sdf = cfg.sdf;\n    const grid = cfg.physicsForcesGrid;\n    const constr = cfg.constraints;\n    const wind = cfg.wind;\n\n    const simDir = gui.addFolder('Hair simulation');\n    let dir = simDir;\n    dir.open();\n\n    dir.add(dummyObject, 'resetSimulation').name('Reset simulation');\n    dir.add(cfg, 'enabled').name('Enabled');\n    // dir.add(cfg, 'gravity', 0.0, 20.0).name('Gravity');\n    dir.add(cfg, 'gravity', 0.0, 0.1).name('Gravity');\n    dir.add(cfg, 'friction', 0.0, 1.0).name('Friction');\n    dir.add(cfg, 'volumePreservation', 0.0, 0.00025).name('Vol. Preserv.');\n    dir.add(dummyObject, 'resetBall').name('Reset ball'); // below, so user does press by accident\n    dir.add(CONFIG, 'drawColliders').name('Draw ball');\n\n    // constraints\n    dir = simDir.addFolder('Constraints');\n    dir.open();\n    dir.add(constr, 'constraintIterations', 1, 10).step(1).name('Iterations');\n    dir.add(constr, 'stiffnessLengthConstr', 0.0, 1.0).name('Stiff. len');\n    dir.add(constr, 'stiffnessGlobalConstr', 0.0, 1.0).name('Stiff. global');\n    dir.add(constr, 'globalExtent', 0.0, 1.0).name('Global extent');\n    dir.add(constr, 'globalFade', 0.0, 1.0).name('Global fade');\n    dir.add(constr, 'stiffnessLocalConstr', 0.0, 1.0).name('Stiff. local');\n    dir.add(constr, 'stiffnessCollisions', 0.0, 1.0).name('Stiff. collisions');\n    dir.add(constr, 'stiffnessSDF', 0.0, 1.0).name('Stiff. SDF');\n    dir.add(sdf, 'distanceOffset', -0.003, 0.003).name('SDF offset');\n\n    // wind\n    dir = simDir.addFolder('Wind');\n    dir.open();\n    dir.add(wind, 'dirPhi', -179, 179).step(1).name('Dir phi');\n    dir.add(wind, 'dirTheta', 15, 165).step(1).name('Dir th');\n    // dir.add(wind, 'strength', 0.0, 0.0001).name('Strength');\n    dir.add(wind, 'strength', 0.0, 1.0).name('Strength');\n    dir.add(wind, 'strengthLull', 0.0, 1.0).name('Lull strength');\n    dir.add(wind, 'strengthFrequency', 0.001, 2.0).name('Str. frequency');\n    dir.add(wind, 'strengthJitter', 0.0, 1.0).name('Str. Jitter');\n    dir.add(wind, 'phaseOffset', 0.0, 0.5).name('Phase offset');\n    dir.add(wind, 'colisionTraceOffset', 1.0, 5.0).name('Collision offset');\n\n    // SDF preview\n    dir = simDir.addFolder('SDF preview');\n    // _sdfDir.open();\n    dir.add(sdf, 'showDebugView').name('Enabled');\n    dir.add(sdf, 'debugSemitransparent').name('Semitransparent');\n    dir.add(sdf, 'debugSlice', 0.0, 1.0, 0.01).name('Slice');\n\n    // Grids\n    dir = simDir.addFolder('Grids preview');\n    // dir.open();\n    dir.add(grid, 'showDebugView').name('Enabled');\n    const gridValueDummy = createDummy(grid, 'debugValue', [\n      { label: 'Density', value: GridDebugValue.DENSITY },\n      { label: 'Density Grad', value: GridDebugValue.DENSITY_GRADIENT },\n      { label: 'Velocity', value: GridDebugValue.VELOCITY },\n      { label: 'Wind', value: GridDebugValue.WIND },\n    ]);\n    dir.add(gridValueDummy, 'debugValue', gridValueDummy.values).name('Value');\n    dir.add(grid, 'debugAbsValue').name('Vector abs');\n    dir.add(grid, 'debugSlice', 0.0, 1.0, 0.01).name('Slice');\n  }\n\n  function addAmbientLightFolder(gui: dat.GUI) {\n    const dir = gui.addFolder('Ambient light');\n    // dir.open();\n\n    addColorController(dir, CONFIG.lightAmbient, 'color', 'Color');\n    dir.add(CONFIG.lightAmbient, 'energy', 0.0, 0.2, 0.01).name('Energy');\n  }\n\n  function addLightFolder(gui: dat.GUI, lightObj: LightCfg, name: string) {\n    const dir = gui.addFolder(name);\n    // dir.open();\n\n    dir.add(lightObj, 'posPhi', -179, 179).step(1).name('Position phi');\n    dir.add(lightObj, 'posTheta', 15, 165).step(1).name('Position th');\n    addColorController(dir, lightObj, 'color', 'Color');\n    dir.add(lightObj, 'energy', 0.0, 2.0).name('Energy');\n  }\n\n  function addShadowsFolder(gui: dat.GUI) {\n    // https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/UISystem.ts#L170\n    const cfg = CONFIG.shadows;\n    const dir = gui.addFolder('Shadows');\n    // dir.open();\n\n    const techniqueDummy = createDummy(cfg, 'usePCSS', [\n      { label: 'PCF', value: false },\n      { label: 'PCSS', value: true },\n    ]);\n    dir.add(techniqueDummy, 'usePCSS', techniqueDummy.values).name('Technique');\n    dir.add(cfg, 'strength', 0.0, 1.0).name('Strength');\n    dir.add(cfg, 'PCF_Radius', [0, 1, 2, 3, 4]).name('PCF radius');\n    dir.add(cfg, 'bias', 0.0, 0.001).name('Bias');\n    // dir.add(cfg, 'blurRadiusTfx', [0, 1, 2, 3, 4]).name('HAIR Blur radius');\n    // dir.add(cfg, 'biasHairTfx', 0.001, 0.01).name('HAIR Bias');\n    dir.add(cfg, 'hairFiberWidthMultiplier', 0.5, 6.0).name('Hair width mul');\n\n    // position\n    dir.add(cfg.source, 'posPhi', -179, 179).step(1).name('Position phi');\n    dir.add(cfg.source, 'posTheta', 15, 165).step(1).name('Position th');\n    dir.add(cfg, 'showDebugView').name('Show preview');\n  }\n\n  function addAoFolder(gui: dat.GUI) {\n    // https://github.com/Scthe/WebFX/blob/09713a3e7ebaa1484ff53bd8a007908a5340ca8e/src/UISystem.ts#L170\n    const cfg = CONFIG.ao;\n    const dir = gui.addFolder('Ambient occl.');\n    // dir.open();\n\n    dir.add(cfg, 'strength', 0.0, 1.0).name('Strength');\n    dir.add(cfg, 'radius', 0.001, 2.5).name('Radius');\n    dir.add(cfg, 'numDirections', 0, 128, 1).name('Directions');\n    dir.add(cfg, 'numSteps', 2, 32, 1).name('Steps');\n    dir.add(cfg, 'directionOffset', 0.0, 5).name('Dir. offset');\n    dir.add(cfg, 'falloffStart2', 0.0, 0.5).name('Falloff start');\n    dir.add(cfg, 'falloffEnd2', 1.0, 5.0).name('Falloff end');\n  }\n\n  function addColorMgmt() {\n    const dir = gui.addFolder('Color mgmt');\n    const cfg = CONFIG.colors;\n\n    dir.add(cfg, 'gamma', 1.0, 3.0).name('Gamma');\n    dir.add(cfg, 'exposure', 0.0, 2.0).name('Exposure');\n    dir.add(cfg, 'ditherStrength', 0.0, 2.0).name('Dithering');\n  }\n\n  //////////////\n  /// utils\n  function addColorController<T extends object>(\n    dir: dat.GUI,\n    obj: T,\n    prop: keyof T,\n    name: string\n  ) {\n    const dummy = {\n      value: [] as number[],\n    };\n\n    Object.defineProperty(dummy, 'value', {\n      enumerable: true,\n      get: () => {\n        // deno-lint-ignore no-explicit-any\n        const v = obj[prop] as any;\n        return [v[0] * 255, v[1] * 255, v[2] * 255];\n      },\n      set: (v: number[]) => {\n        // deno-lint-ignore no-explicit-any\n        const a = obj[prop] as any as number[];\n        a[0] = v[0] / 255;\n        a[1] = v[1] / 255;\n        a[2] = v[2] / 255;\n      },\n    });\n\n    dir.addColor(dummy, 'value').name(name);\n  }\n}\n\nfunction setVisible(ctrl: GuiCtrl, isVisible: boolean) {\n  if (!ctrl) {\n    // use stacktrace/debugger to identify which..\n    console.error(`Not controller for gui element found!`);\n    return;\n  }\n\n  // deno-lint-ignore no-explicit-any\n  const parentEl: HTMLElement = (ctrl as any).__li;\n\n  if (isVisible) {\n    parentEl.style.display = '';\n  } else {\n    parentEl.style.display = 'none';\n  }\n}\n\ninterface UiOpts<T> {\n  label: string;\n  value: T;\n}\n\n// deno-lint-ignore ban-types\nconst createDummy = <V extends Object, K extends keyof V>(\n  obj: V,\n  key: K,\n  opts: UiOpts<V[K]>[]\n): { values: string[] } & Record<K, string> => {\n  const dummy = {\n    values: opts.map((o) => o.label),\n  };\n\n  Object.defineProperty(dummy, key, {\n    enumerable: true,\n    get: () => {\n      const v = obj[key];\n      const opt = opts.find((e) => e.value === v) || opts[0];\n      return opt.label;\n    },\n    set: (selectedLabel: string) => {\n      const opt = opts.find((e) => e.label === selectedLabel) || opts[0];\n      obj[key] = opt.value;\n    },\n  });\n\n  // TS ignores Object.defineProperty and thinks we have not complete object\n  // deno-lint-ignore no-explicit-any\n  return dummy as any;\n};\n", "import { Dimensions } from '../utils/index.ts';\n\nexport type ResizeHandler = (viewportSize: Dimensions) => void;\n\nexport function initCanvasResizeSystem(\n  canvas: HTMLCanvasElement,\n  canvasContext: CanvasRenderingContext2D\n) {\n  const sizeNow = getViewportSize();\n  canvas.width = sizeNow.width;\n  canvas.height = sizeNow.height;\n  console.log('Init canvas size:', sizeNow);\n\n  const listeners: ResizeHandler[] = [];\n  const addListener = (f: ResizeHandler) => listeners.push(f);\n\n  // Has nothing to do with resize actually.\n  const getScreenTextureView = (): GPUTextureView =>\n    canvasContext.getCurrentTexture().createView();\n\n  return {\n    revalidateCanvasSize,\n    addListener,\n    getViewportSize,\n    getScreenTextureView,\n  };\n\n  function revalidateCanvasSize() {\n    const sizeNow = getViewportSize();\n    const hasChanged =\n      sizeNow.width !== canvas.width || sizeNow.height !== canvas.height;\n\n    if (hasChanged && sizeNow.width && sizeNow.height) {\n      applyResize(sizeNow);\n    }\n  }\n\n  function applyResize(d: Dimensions) {\n    // console.log('Canvas resize:', d);\n    canvas.width = d.width;\n    canvas.height = d.height;\n    listeners.forEach((l) => l(d));\n  }\n\n  function getViewportSize(): Dimensions {\n    // deno-lint-ignore no-explicit-any\n    const devicePixelRatio = (window as any).devicePixelRatio || 1;\n    return {\n      width: canvas.clientWidth * devicePixelRatio,\n      height: canvas.clientHeight * devicePixelRatio,\n    };\n  }\n}\n", "type ErrorCb = (msg: string) => never;\n\nexport function createErrorSystem(device: GPUDevice) {\n  const ERROR_SCOPES: GPUErrorFilter[] = [\n    'internal',\n    'out-of-memory',\n    'validation',\n  ];\n  const ERROR_SCOPES_REV = ERROR_SCOPES.toReversed();\n\n  let currentScopeName = '-';\n\n  return {\n    startErrorScope,\n    reportErrorScopeAsync,\n  };\n\n  function startErrorScope(scopeName: string = '-') {\n    currentScopeName = scopeName;\n    ERROR_SCOPES.forEach((sc) => device.pushErrorScope(sc));\n  }\n\n  async function reportErrorScopeAsync(cb?: ErrorCb) {\n    let lastError = undefined;\n\n    for (const name of ERROR_SCOPES_REV) {\n      const err = await device.popErrorScope();\n      if (err) {\n        const msg = `WebGPU error [${currentScopeName}][${name}]: ${err.message}`;\n        lastError = msg;\n        if (cb) {\n          cb(msg);\n        } else {\n          console.error(msg);\n        }\n      }\n    }\n\n    return lastError;\n  }\n}\n\nexport const rethrowWebGPUError = (msg: string): never => {\n  throw new Error(msg);\n};\n", "import { CONFIG } from '../../constants.ts';\nimport { STATS } from '../../stats.ts';\nimport { Bounds3d } from '../../utils/bounds.ts';\nimport { clamp } from '../../utils/index.ts';\nimport { formatPercentageNumber } from '../../utils/string.ts';\nimport { bindBuffer } from '../../utils/webgpu.ts';\nimport { HairIndexBuffer } from './hairIndexBuffer.ts';\n\n/** This objects exists so we don't have a constructor with X GPUBuffer arguments. So we don't accidently provide them in wrong order */\ninterface HairObjectBuffers {\n  initialPointsPositionsBuffer: GPUBuffer;\n  initialSegmentLengthsBuffer: GPUBuffer;\n  pointsPositionsBuffer_0: GPUBuffer;\n  pointsPositionsBuffer_1: GPUBuffer;\n  tangentsBuffer: GPUBuffer;\n  dataBuffer: GPUBuffer;\n  shadingBuffer: GPUBuffer;\n  indicesData: HairIndexBuffer;\n}\n\n/**\n * Select which of the tick-tock simulation buffers will be used for render\n *\n * A string cause TS has slightly stronger enforce rules */\nexport type PositionsBufferIdx = '0' | '1';\nexport const oppositePositionsBufferIdx = (a: PositionsBufferIdx) =>\n  a == '0' ? '1' : '0';\n\nexport class HairObject {\n  private _currentPositionsBuffer: PositionsBufferIdx = '0';\n\n  constructor(\n    public readonly name: string,\n    public readonly strandsCount: number,\n    public readonly pointsPerStrand: number,\n    public readonly bounds: Bounds3d,\n    public readonly buffers: HairObjectBuffers\n  ) {}\n\n  get pointsCount() {\n    return this.strandsCount * this.pointsPerStrand;\n  }\n\n  get segmentCount() {\n    return this.strandsCount * (this.pointsPerStrand - 1);\n  }\n\n  get currentPositionsBufferIdx() {\n    return this._currentPositionsBuffer;\n  }\n\n  getRenderedStrandCount() {\n    const pct = clamp(CONFIG.hairRender.lodRenderPercent, 0, 100);\n    const { strandsCount } = this;\n    const result = Math.ceil((strandsCount * pct) / 100.0);\n    return clamp(result, 0, strandsCount);\n  }\n\n  reportRenderedStrandCount() {\n    const { strandsCount, pointsPerStrand, segmentCount } = this;\n    const result = this.getRenderedStrandCount();\n\n    STATS.update(\n      'Rendered strands',\n      formatPercentageNumber(result, strandsCount, 0)\n    );\n    const segments = result * (pointsPerStrand - 1);\n    STATS.update(\n      'Rendered segments',\n      formatPercentageNumber(segments, segmentCount, 0)\n    );\n    return result;\n  }\n\n  resetSimulation(cmdBuf: GPUCommandEncoder) {\n    const {\n      initialPointsPositionsBuffer,\n      pointsPositionsBuffer_0,\n      pointsPositionsBuffer_1,\n    } = this.buffers;\n    const size = initialPointsPositionsBuffer.size;\n\n    cmdBuf.copyBufferToBuffer(\n      initialPointsPositionsBuffer, 0,\n      pointsPositionsBuffer_0, 0, size\n    ); // prettier-ignore\n    cmdBuf.copyBufferToBuffer(\n      initialPointsPositionsBuffer, 0,\n      pointsPositionsBuffer_1, 0, size\n    ); // prettier-ignore\n  }\n\n  /**\n   * Example at the start of the frame for `$currentPositionsBuffer='1'`:\n   *  - `positionsBuffer_0` - previous positions\n   *  - `positionsBuffer_1` - current positions\n   *\n   * After the hair simulation's integration step:\n   *  - `positionsBuffer_0` - positions after simulation (ready for render)\n   *  - `positionsBuffer_1` - no longer *current* positions (obsolete, were fresh BEFORE the simulation)\n   */\n  swapPositionBuffersAfterSimIntegration() {\n    this._currentPositionsBuffer = oppositePositionsBufferIdx(\n      this._currentPositionsBuffer\n    );\n  }\n\n  /** Used e.g. for render */\n  bindPointsPositions = (bindingIdx: number): GPUBindGroupEntry => {\n    return this.bindPointsPositionsByPosIdx(\n      bindingIdx,\n      this._currentPositionsBuffer\n    );\n  };\n\n  bindPointsPositions_PREV = (bindingIdx: number): GPUBindGroupEntry => {\n    return this.bindPointsPositionsByPosIdx(\n      bindingIdx,\n      oppositePositionsBufferIdx(this._currentPositionsBuffer)\n    );\n  };\n\n  private bindPointsPositionsByPosIdx = (\n    bindingIdx: number,\n    positionsNowBufferIdx: PositionsBufferIdx\n  ): GPUBindGroupEntry => {\n    const buffer =\n      positionsNowBufferIdx == '0'\n        ? this.buffers.pointsPositionsBuffer_0\n        : this.buffers.pointsPositionsBuffer_1;\n    return { binding: bindingIdx, resource: { buffer } };\n  };\n\n  bindTangents = (bindingIdx: number): GPUBindGroupEntry =>\n    bindBuffer(bindingIdx, this.buffers.tangentsBuffer);\n\n  bindPointsPositions_INITIAL = (bindingIdx: number): GPUBindGroupEntry =>\n    bindBuffer(bindingIdx, this.buffers.initialPointsPositionsBuffer);\n\n  bindInitialSegmentLengths = (bindingIdx: number): GPUBindGroupEntry =>\n    bindBuffer(bindingIdx, this.buffers.initialSegmentLengthsBuffer);\n\n  bindHairData = (bindingIdx: number): GPUBindGroupEntry =>\n    bindBuffer(bindingIdx, this.buffers.dataBuffer);\n\n  bindShading = (bindingIdx: number): GPUBindGroupEntry =>\n    bindBuffer(bindingIdx, this.buffers.shadingBuffer);\n\n  bindIndexBuffer(renderPass: GPURenderPassEncoder) {\n    renderPass.setIndexBuffer(\n      this.buffers.indicesData.indexBuffer,\n      this.buffers.indicesData.indexFormat\n    );\n  }\n}\n", "export interface TfxFileHeader {\n  // Specifies TressFX version number\n  version: number; // float version;\n\n  // Number of hair strands in this file. All strands in this file are guide strands.\n  // Follow hair strands are generated procedurally.\n  numHairStrands: number; // unsigned int numHairStrands;\n\n  // From 4 to 64 inclusive (POW2 only). This should be a fixed value within tfx value.\n  // The total vertices from the tfx file is numHairStrands * numVerticesPerStrand.\n  numVerticesPerStrand: number; // unsigned int numVerticesPerStrand;\n\n  // Offsets to array data starts here. Offset values are in bytes, aligned on 8 bytes boundaries,\n  // and relative to beginning of the .tfx file\n  // ALL ARE UNSIGNED INTS!\n  offsetVertexPosition: number; // Array size: FLOAT4[numHairStrands]\n  offsetStrandUV: number; // Array size: FLOAT2[numHairStrands], if 0 no texture coordinates\n  offsetVertexUV: number; // Array size: FLOAT2[numHairStrands * numVerticesPerStrand], if 0, no per vertex texture coordinates\n  offsetStrandThickness: number; // Array size: float[numHairStrands]\n  offsetVertexColor: number; // Array size: FLOAT4[numHairStrands * numVerticesPerStrand], if 0, no vertex colors\n\n  // unsigned int reserved[32];           // Reserved for future versions\n}\n\nexport interface TfxFileData {\n  header: TfxFileHeader;\n  /** `array<vec4f>` */\n  vertexPositions: Float32Array;\n}\n\nconst parseHeader = (rawData: ArrayBuffer): TfxFileHeader => {\n  const version = new Float32Array(rawData, 0, 1)[0]; // offset 0bytes, read single float\n  const uints = new Uint32Array(rawData, 4, 7); // offset 4bytes cause version is float, read 7 uint-values\n\n  return {\n    version,\n    numHairStrands: uints[0],\n    numVerticesPerStrand: uints[1],\n    offsetVertexPosition: uints[2],\n    offsetStrandUV: uints[3],\n    offsetVertexUV: uints[4],\n    offsetStrandThickness: uints[5],\n    offsetVertexColor: uints[6],\n  };\n};\n\nexport const parseTfxFile = (\n  fileData: ArrayBuffer,\n  scale: number\n): TfxFileData => {\n  const header = parseHeader(fileData);\n  console.log('Loaded Tfx file with header', header);\n\n  const totalVertices = header.numHairStrands * header.numVerticesPerStrand;\n  const posCount = totalVertices * 4;\n  const vertexPositions0 = new Float32Array(\n    fileData,\n    header.offsetVertexPosition,\n    posCount\n  );\n  // Deno requires a copy, or it will fail upload to GPU with:\n  // \"Copy size 2406 does not respect `COPY_BUFFER_ALIGNMENT`\"\n  const vertexPositions = vertexPositions0.map((e) => e * scale);\n\n  return {\n    header,\n    vertexPositions,\n  };\n};\n", "import * as objLoader from 'webgl-obj-loader';\nimport {\n  createGPU_IndexBuffer,\n  createGPU_VertexBuffer,\n} from '../utils/webgpu.ts';\nimport { calculateBounds } from '../utils/bounds.ts';\nimport { createArray, ensureTypedArray } from '../utils/arrays.ts';\nimport { GPUMesh } from './gpuMesh.ts';\n\nconst Mesh = objLoader.default?.Mesh || objLoader.Mesh; // deno vs chrome\n\ninterface ObjMesh {\n  indices: number[];\n  vertices: number[];\n  vertexNormals?: Array<number | typeof NaN>;\n  textures?: Array<number | typeof NaN>;\n}\nconst getVertexCount = (mesh: ObjMesh) => Math.ceil(mesh.vertices.length / 3);\nconst getIndexCount = (mesh: ObjMesh) => Math.ceil(mesh.indices.length / 3);\n\nexport function loadObjFile(\n  device: GPUDevice,\n  name: string,\n  objText: string,\n  scale = 1\n): GPUMesh {\n  const mesh = new Mesh(objText) as ObjMesh;\n  cleanupRawOBJData(mesh, scale);\n  // console.log(mesh);\n\n  const vertexCount = getVertexCount(mesh);\n  const triangleCount = getIndexCount(mesh);\n\n  const positions = ensureTypedArray(Float32Array, mesh.vertices);\n  const positionsBuffer = createGPU_VertexBuffer(\n    device,\n    `${name}-positions`,\n    positions\n  );\n  const normalsBuffer = createGPU_VertexBuffer(\n    device,\n    `${name}-normals`,\n    mesh.vertexNormals!\n  );\n  const uvBuffer = createGPU_VertexBuffer(\n    device,\n    `${name}-uvs`,\n    mesh.textures!\n  );\n  const indexBuffer = createGPU_IndexBuffer(\n    device,\n    `${name}-indices`,\n    mesh.indices\n  );\n  const bounds = calculateBounds(positions);\n  console.log(`Loaded OBJ object '${name}', bounds`, bounds.sphere);\n\n  return {\n    name,\n    vertexCount,\n    triangleCount,\n    positionsBuffer,\n    normalsBuffer,\n    uvBuffer,\n    indexBuffer,\n    bounds,\n    isColliderPreview: false,\n  };\n}\n\nconst hasNormals = (mesh: ObjMesh) => {\n  if (!mesh.vertexNormals || !Array.isArray(mesh.vertexNormals)) return false;\n  const firstEl = mesh.vertexNormals[0];\n  return typeof firstEl === 'number' && !isNaN(firstEl);\n};\n\ntype MeshWithTextures = Required<Pick<ObjMesh, 'textures'>>;\n\nconst hasUVs = (mesh: ObjMesh): mesh is ObjMesh & MeshWithTextures => {\n  if (!mesh.textures || !Array.isArray(mesh.textures)) return false;\n  const firstEl = mesh.textures[0];\n  return typeof firstEl === 'number' && !isNaN(firstEl);\n};\n\nfunction cleanupRawOBJData(mesh: ObjMesh, scale: number) {\n  mesh.vertices = mesh.vertices.map((e: number) => e * scale);\n\n  if (!hasNormals(mesh)) {\n    throw new Error(`Expected normals in the OBJ file`);\n  }\n\n  if (!hasUVs(mesh)) {\n    const vertCnt = getVertexCount(mesh);\n    mesh.textures = createArray(vertCnt * 2).fill(0.5);\n  } else {\n    for (let i = 0; i < mesh.textures.length; i += 1) {\n      let v = mesh.textures[i];\n      v = v % 1; // to range [0-1]\n      v = v < 0 ? 1.0 - Math.abs(v) : v; // negative to positive\n      // v = (i & 1) == 0 ? 1 - v : v; // invert X - not needed\n      v = (i & 1) == 1 ? 1 - v : v; // invert Y - webgpu coordinate system\n      mesh.textures[i] = v;\n    }\n  }\n}\n", "import { BYTES_F32 } from '../../constants.ts';\n\n/** https://www.w3.org/TR/webgpu/#float32-filterable */\nconst TEXTURE_FORMAT: GPUTextureFormat = 'r32float';\n\nexport function createSDFTexture(\n  device: GPUDevice,\n  name: string,\n  dims: number,\n  data: Float32Array\n) {\n  const texSize: GPUExtent3D = {\n    width: dims,\n    height: dims,\n    depthOrArrayLayers: dims,\n  };\n  const tex = device.createTexture({\n    label: `${name}-texture`,\n    dimension: '3d',\n    size: texSize,\n    format: TEXTURE_FORMAT,\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n  });\n  device.queue.writeTexture(\n    { texture: tex },\n    data,\n    { bytesPerRow: BYTES_F32 * dims, rowsPerImage: dims },\n    texSize\n  );\n  return tex;\n}\n\nexport function createSdfSampler(device: GPUDevice, name: string) {\n  return device.createSampler({\n    label: `${name}-sampler`,\n    addressModeU: 'clamp-to-edge',\n    addressModeV: 'clamp-to-edge',\n    addressModeW: 'clamp-to-edge',\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n}\n", "import { SDFCollider } from './sdfCollider.ts';\nimport { BoundingBox } from '../../utils/bounds.ts';\nimport { createSDFTexture, createSdfSampler } from './sdfUtils.ts';\n\nexport function createSdfColliderFromBinary(\n  device: GPUDevice,\n  name: string,\n  data: ArrayBuffer\n): SDFCollider {\n  const dims = new Uint32Array(data, 0, 1)[0];\n\n  let offset = 2; // don't know, don't care\n  const dataF32 = new Float32Array(data);\n  const bounds: BoundingBox = [\n    [dataF32[offset + 0], dataF32[offset + 1], dataF32[offset + 2]],\n    [dataF32[offset + 3], dataF32[offset + 4], dataF32[offset + 5]],\n  ];\n  offset += 6;\n\n  // load positions\n  const distances = dataF32.slice(offset);\n  /*console.log({\n    dims,\n    bounds,\n    distances: {\n      first: distances[0],\n      last: distances.at(-1),\n      len: distances.length,\n    },\n  });*/\n\n  const expLen = dims * dims * dims;\n  if (distances.length !== expLen) {\n    throw new Error(`Invalid SDF binary file. With dims=${dims} expected ${expLen} values. Got ${distances.length}.`); // prettier-ignore\n  }\n\n  // create result\n  const tex = createSDFTexture(device, name, dims, distances);\n  const texView = tex.createView();\n  const sampler = createSdfSampler(device, name);\n\n  return new SDFCollider(name, bounds, dims, tex, texView, sampler);\n}\n", "// deno-lint-ignore-file ban-unused-ignore\nimport { mat4, vec4 } from 'wgpu-matrix';\nimport { CONFIG, HairFile, MODELS_DIR } from '../constants.ts';\nimport { STATS } from '../stats.ts';\nimport {\n  Bounds3d,\n  calcBoundingBox,\n  calcBoundingSphere,\n} from '../utils/bounds.ts';\nimport { formatNumber } from '../utils/string.ts';\nimport { createHairDataBuffer } from './hair/hairDataBuffer.ts';\nimport { createHairIndexBuffer } from './hair/hairIndexBuffer.ts';\nimport { HairObject } from './hair/hairObject.ts';\nimport { createHairPointsPositionsBuffer } from './hair/hairPointsPositionsBuffer.ts';\nimport { createHairTangentsBuffer } from './hair/hairTangentsBuffer.ts';\nimport { parseTfxFile, TfxFileData } from './hair/tfxFileLoader.ts';\nimport { loadObjFile } from './objLoader.ts';\nimport { Scene } from './scene.ts';\nimport { dgr2rad } from '../utils/index.ts';\nimport { createHairShadingBuffer } from './hair/hairShadingBuffer.ts';\nimport { createHairSegmentLengthsBuffer } from './hair/hairSegmentLengthsBuffer.ts';\nimport { createArray } from '../utils/arrays.ts';\nimport { createSdfColliderFromBinary } from './sdfCollider/createSdfColliderFromBinary.ts';\nimport { GridData } from '../passes/simulation/grids/gridData.ts';\n\nconst OBJECTS = [\n  // { name: 'cube', file: 'cube.obj' },\n  { name: 'sintel', file: 'sintel.obj' },\n  { name: 'sintelEyes', file: 'sintel-eyes.obj' },\n  // { name: 'sintelEyelashes', file: 'sintel-eyelashes.obj' },\n  // { name: 'sintel-collider', file: 'sintel-collider.obj' },\n  // { name: 'sdf-test', file: 'sdf-test.obj' },\n  /** Preview for sphere collider. I could just render a plane and turn into sphere in fragment shader.\n   * Or manually construct it in code. Or.. I could just reuse everything I've already written.\n   */\n  { name: 'sphereCollider', file: 'sphere.obj', isColliderPreview: true },\n];\nconst SDF_COLLIDER_BIN = { name: 'sintel-sdf', file: 'sintel-sdf.bin' };\n\nexport async function loadScene(device: GPUDevice): Promise<Scene> {\n  const objects: Scene['objects'] = [];\n\n  // load meshes\n  for (const objDef of OBJECTS) {\n    console.groupCollapsed(objDef.name);\n\n    const objTextFile = await CONFIG.loaders.textFileReader(\n      `${MODELS_DIR}/${objDef.file}`\n    );\n    const result = loadObjFile(device, objDef.name, objTextFile);\n    result.isColliderPreview = Boolean(objDef.isColliderPreview);\n    objects.push(result);\n    console.groupEnd();\n  }\n  vec4.copy(\n    CONFIG.hairSimulation.collisionSphere,\n    CONFIG.hairSimulation.collisionSphereInitial\n  );\n\n  // load hair\n  const tfxFile = await loadTfxFile(CONFIG.hairFile, 1.0);\n  // const tfxFile = mockTfxFile();\n  const hairObject = await createHairObject(device, 'sintelHair', tfxFile);\n  CONFIG.pointsPerStrand = hairObject.pointsPerStrand;\n  STATS.update('Strands', formatNumber(hairObject.strandsCount, 1));\n  STATS.update('Points per strand', hairObject.pointsPerStrand);\n  STATS.update('Segments', formatNumber(hairObject.segmentCount, 0));\n\n  // SDF collider\n  /*const sintelObj = objects.find((o) => o.name === 'sintel')!;\n  const sdfCollider = createMockSdfCollider(device, 'sintel-sdf', {\n    bounds: sintelObj.bounds.box,\n    dims: 16,\n  });*/\n  const sdfFileBin = await CONFIG.loaders.binaryFileReader(\n    `${MODELS_DIR}/${SDF_COLLIDER_BIN.file}`\n  );\n  const sdfCollider = createSdfColliderFromBinary(\n    device,\n    SDF_COLLIDER_BIN.name,\n    sdfFileBin\n  );\n\n  // physics grid\n  const physicsGrid = new GridData(device, hairObject.bounds.box);\n\n  // model matrix\n  const modelMatrix = mat4.identity();\n  mat4.rotateY(modelMatrix, dgr2rad(0), modelMatrix);\n\n  return { objects, hairObject, sdfCollider, modelMatrix, physicsGrid };\n}\n\nexport function createHairObject(\n  device: GPUDevice,\n  name: string,\n  tfxFile: TfxFileData\n) {\n  const bBox = calcBoundingBox(tfxFile.vertexPositions, 4);\n  const bounds: Bounds3d = {\n    box: bBox,\n    sphere: calcBoundingSphere(bBox),\n  };\n  console.log('Hair bounds', bounds.sphere);\n\n  const dataBuffer = createHairDataBuffer(device, name, tfxFile, bounds.sphere);\n  const tangentsBuffer = createHairTangentsBuffer(device, name, tfxFile);\n  const shadingBuffer = createHairShadingBuffer(device, name, tfxFile);\n  const indicesData = createHairIndexBuffer(device, name, tfxFile);\n  const initialSegmentLengthsBuffer = createHairSegmentLengthsBuffer(\n    device,\n    name,\n    tfxFile.header.numVerticesPerStrand,\n    tfxFile.vertexPositions\n  );\n\n  const createPosBuffer = (name: string, extraUsage: GPUBufferUsageFlags = 0) =>\n    createHairPointsPositionsBuffer(\n      device,\n      name,\n      tfxFile.vertexPositions,\n      extraUsage\n    );\n\n  const initialPointsPositionsBuffer = createPosBuffer(\n    `${name}-points-positions-initial`,\n    GPUBufferUsage.COPY_SRC\n  );\n  const pointsPositionsBuffer_0 = createPosBuffer(`${name}-points-positions-0`);\n  const pointsPositionsBuffer_1 = createPosBuffer(`${name}-points-positions-1`);\n\n  return new HairObject(\n    name,\n    tfxFile.header.numHairStrands,\n    tfxFile.header.numVerticesPerStrand,\n    bounds,\n    {\n      dataBuffer,\n      indicesData,\n      initialPointsPositionsBuffer,\n      initialSegmentLengthsBuffer,\n      pointsPositionsBuffer_0,\n      pointsPositionsBuffer_1,\n      shadingBuffer,\n      tangentsBuffer,\n    }\n  );\n}\n\n// deno-lint-ignore no-unused-vars\nasync function loadTfxFile(\n  fileName: HairFile,\n  scale = 1.0\n): Promise<TfxFileData> {\n  console.log(`Loading hair file: '${fileName}'`);\n  const fileBytes = await CONFIG.loaders.binaryFileReader(\n    `${MODELS_DIR}/${fileName}`\n  );\n  return parseTfxFile(fileBytes, scale);\n}\n\n// deno-lint-ignore no-unused-vars\nexport function mockTfxFile(): TfxFileData {\n  CONFIG.hairRender.fiberRadius = 0.005;\n  const centerX = 0;\n  // const startY = 1.524; // dbg: in front of the scene\n  // const startZ = 0.15; // dbg: in front of the scene\n  const startY = 1.624; // dbg: on top of the head\n  const startZ = 0.09; // dbg: on top of the head\n  const dx = 0.015;\n  const dy = 0.01;\n  const pointsPerStrand = 8;\n  const numHairStrands = 32;\n\n  const createStrand = (x: number) =>\n    createArray(pointsPerStrand)\n      .map((_, i) => [\n        x,\n        startY - i * dy, // goes down\n        startZ,\n        i === 0 ? 0 : 1, // .w is 0 for root, 1 otherwise\n      ])\n      .flat();\n\n  const startX = centerX - ((numHairStrands - 1) * dx) / 2.0;\n  const strandXs = createArray(numHairStrands).map((_, i) => startX + dx * i);\n\n  return {\n    header: {\n      version: 1,\n      numHairStrands,\n      numVerticesPerStrand: pointsPerStrand,\n      offsetVertexPosition: 0,\n      offsetStrandUV: 0,\n      offsetVertexUV: 0,\n      offsetStrandThickness: 0,\n      offsetVertexColor: 0,\n    },\n    vertexPositions: new Float32Array([...strandXs.map(createStrand).flat()]),\n  };\n}\n", "import { Vec3 } from 'webgl-obj-loader';\nimport { Mat4, Vec2, vec2, mat4, vec3, vec4 } from 'wgpu-matrix';\nimport { Dimensions } from './index.ts';\nimport { projectPointWithPerspDiv } from './matrices.ts';\n\n// https://github.com/Scthe/Animation-workshop/blob/master/src/gl-utils/raycast/Ray.ts\nexport interface Ray {\n  origin: Vec3;\n  dir: Vec3;\n}\n\nconst TMP_VEC2 = vec2.create();\nconst TMP_VEC4_0 = vec4.create();\nconst TMP_VEC4_1 = vec4.create();\nconst TMP_MAT_4 = mat4.create();\n\n/**\n * http://nelari.us/post/gizmos/\n *\n * Given camera settings and pixel position, calculate ray\n */\nexport const generateRayFromCamera = (\n  viewport: Dimensions,\n  viewProjMat: Mat4,\n  mousePosPx: Vec2,\n  result: Ray\n): Ray => {\n  const mousePosNDC = vec2.set(\n    mousePosPx[0] / viewport.width,\n    mousePosPx[1] / viewport.height,\n    TMP_VEC2\n  );\n  mousePosNDC[0] = mousePosNDC[0] * 2 - 1; // [-1 .. 1]\n  mousePosNDC[1] = (1 - mousePosNDC[1]) * 2 - 1; // [-1 .. 1]\n\n  const vpInverse = mat4.invert(viewProjMat, TMP_MAT_4);\n  // NOTE: there is a small issue of zNear. It does not matter for 3D picking\n  const p0 = vec4.set(mousePosNDC[0], mousePosNDC[1], 0, 1, TMP_VEC4_0); // zMin = 0\n  const p1 = vec4.set(mousePosNDC[0], mousePosNDC[1], 1, 1, TMP_VEC4_1); // zMax = 1, does not matter, just get `dir`\n  // technically, camera world pos. In practice, offseted by zNear, but does not matter for us\n  const rayOrigin = projectPointWithPerspDiv(vpInverse, p0, TMP_VEC4_0);\n  const rayEnd = projectPointWithPerspDiv(vpInverse, p1, TMP_VEC4_1);\n\n  vec3.copy(rayOrigin, result.origin);\n  vec3.normalize(vec3.subtract(rayEnd, rayOrigin, TMP_VEC4_1), result.dir);\n  return result;\n};\n\n/** Move `t` along ray from origin and return point */\nexport const getPointAlongRay = (ray: Ray, t: number, result?: Vec3) => {\n  return vec3.addScaled(ray.origin, ray.dir, t, result);\n};\n\n/** Find closest point to 'p' that also lies on the specified ray */\nexport const projectPointOntoRay = (ray: Ray, p: Vec3, result?: Vec3) => {\n  // dot op that we are going to use ignores ray.origin and uses (0,0,0)\n  // as ray start. Subtract here from p to move to same space\n  const p2 = vec3.subtract(p, ray.origin, result);\n\n  // this is from the geometric definition of dot product\n  const dist = vec3.dot(p2, ray.dir);\n  return getPointAlongRay(ray, dist, result);\n};\n\nconst TMP_VEC3_pointToRayDistance = vec3.create();\nexport const pointToRayDistance = (ray: Ray, p: Vec3): number => {\n  const projected = projectPointOntoRay(ray, p, TMP_VEC3_pointToRayDistance);\n  return vec3.distance(p, projected);\n};\n\n// const TMP_VEC3_findClosestPointOnSegment = vec3.create();\nconst TMP_VEC3_left = vec3.create();\nconst TMP_VEC3_right = vec3.create();\nexport const findClosestPointOnSegment = (\n  ray: Ray,\n  lineStartWS: Vec3,\n  lineEndWS: Vec3,\n  iters = 5\n): Vec3 => {\n  const left = vec3.copy(lineStartWS, TMP_VEC3_left);\n  const right = vec3.copy(lineEndWS, TMP_VEC3_right);\n\n  // binary search. There might be analytical solution, but too tired to search internet for it.\n  // And it's binary search! How often you actually get to write it?\n  for (let i = 0; i < iters; i++) {\n    const distLeft = pointToRayDistance(ray, left);\n    const distRight = pointToRayDistance(ray, right);\n    if (distLeft < distRight) {\n      vec3.midpoint(left, right, right);\n    } else {\n      vec3.midpoint(left, right, left);\n    }\n  }\n\n  const distLeft = pointToRayDistance(ray, left);\n  const distRight = pointToRayDistance(ray, right);\n  return distLeft < distRight ? left : right;\n};\n", "import { Vec3 } from 'webgl-obj-loader';\nimport { vec3 } from 'wgpu-matrix';\nimport { Ray, getPointAlongRay } from './raycast.ts';\n\n// https://github.com/Scthe/Animation-workshop/blob/master/src/gl-utils/raycast/Plane.ts\n\nconst TMP_VEC3 = vec3.create();\n\nexport interface Plane {\n  normal: Vec3;\n  d: number;\n}\n\n/**\n * Assuming infinte plane, get intersection, where ray crosses the plane. returns t for ray\n * @see https://stackoverflow.com/questions/23975555/how-to-do-ray-plane-intersection\n * @see https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld017.htm\n */\nconst planeRayIntersectionDistance = (ray: Ray, plane: Plane) => {\n  const nom = plane.d + vec3.dot(ray.origin, plane.normal, TMP_VEC3);\n  const denom = vec3.dot(ray.dir, plane.normal); // project to get how fast we closing in\n  return -nom / denom;\n};\n\n/** Assuming infinte plane, get intersection where ray crosses the plane. returns 3d point */\nexport const planeRayIntersection = (ray: Ray, plane: Plane, result?: Vec3) => {\n  const t = planeRayIntersectionDistance(ray, plane);\n  return getPointAlongRay(ray, t, result);\n};\n", "import { Mat4, Vec3, mat4, vec3, vec4 } from 'wgpu-matrix';\nimport { getViewProjectionMatrix } from '../utils/matrices.ts';\nimport { Dimensions } from '../utils/index.ts';\nimport Input from './input.ts';\nimport {\n  Ray,\n  findClosestPointOnSegment,\n  generateRayFromCamera,\n  pointToRayDistance,\n  projectPointOntoRay,\n} from '../utils/raycast.ts';\nimport { CONFIG, GizmoAxis, GizmoAxisIdx } from '../constants.ts';\nimport { Plane, planeRayIntersection } from '../utils/raycast.plane.ts';\n\n/*\nWARNING: THIS FILE CONTAINS VERY PROFESSIONAL CODE. DO NOT BE AWED (TOO MUCH)!\n*/\n\nconst AXIS_VEC_X = vec3.create(1, 0, 0);\nconst AXIS_VEC_Y = vec3.create(0, 1, 0);\nconst AXIS_VEC_Z = vec3.create(0, 0, 1);\nconst AXIS_VECTORS = [AXIS_VEC_X, AXIS_VEC_Y, AXIS_VEC_Z];\nconst HOVERED_AXIS: GizmoAxisIdx[] = [\n  GizmoAxis.AXIS_X,\n  GizmoAxis.AXIS_Y,\n  GizmoAxis.AXIS_Z,\n];\n\n/** Offset from ball center to start of rendered gizmo. */\nconst GIZMO_TO_BALL_DISTANCE = CONFIG.colliderGizmo.lineLength * 0.1;\n\n// prealloc\nconst TMP_LINE_START = vec4.create();\nconst TMP_LINE_END = vec4.create();\nconst TMP_VIEW_PROJ_MAT = mat4.create();\nconst TMP_CAMERA_RAY: Ray = {\n  origin: vec3.create(),\n  dir: vec3.create(),\n};\n\nexport const setCursor = (\n  cursor: 'default' | 'grab' | 'grabbing' | 'move' | 'pointer'\n) => (document.body.style.cursor = cursor);\n\nexport function createGizmoController() {\n  const cfg = CONFIG.colliderGizmo;\n  // when user clicks gizmo axis, the click position is not in the center of the ball.\n  // We have to apply correction during dragging.\n  let gizmoClickPosCorrection = 0;\n\n  return function (\n    inputState: Input,\n    viewportSize: Dimensions,\n    viewMatrix: Mat4,\n    projMatrix: Mat4\n  ): boolean {\n    let nextIsDragging = inputState.mouse.touching;\n\n    const mousePx = [inputState.mouse.x, inputState.mouse.y];\n    const viewProjMat = getViewProjectionMatrix(\n      viewMatrix,\n      projMatrix,\n      TMP_VIEW_PROJ_MAT\n    );\n    const cameraRay = generateRayFromCamera(\n      viewportSize,\n      viewProjMat,\n      mousePx,\n      TMP_CAMERA_RAY\n    );\n\n    if (cfg.isDragging) {\n      applyDragMovement(cameraRay, gizmoClickPosCorrection);\n    } else {\n      const clickedGizmoPoint = vec3.create();\n      const hoveredAxis = checkGizmoHover(cameraRay, clickedGizmoPoint);\n      updateHoverState(hoveredAxis);\n\n      // calc diff between clicked point and actual sphere\n      const colSphereWS = CONFIG.hairSimulation.collisionSphere;\n      gizmoClickPosCorrection = vec3.distance(colSphereWS, clickedGizmoPoint);\n\n      if (nextIsDragging) {\n        nextIsDragging = hoveredAxis !== GizmoAxis.NONE;\n        setCursor('grabbing');\n      }\n    }\n\n    cfg.isDragging = nextIsDragging; // next frame will reset the cursor if stopped dragging\n    return nextIsDragging;\n  };\n}\n\nfunction applyDragMovement(cameraRay: Ray, gizmoClickPosCorrection: number) {\n  const cfg = CONFIG.colliderGizmo;\n  const ball = CONFIG.hairSimulation.collisionSphere;\n  // deno-lint-ignore no-explicit-any\n  const axisIdx: GizmoAxisIdx = cfg.activeAxis as any;\n\n  const moveRay: Ray = {\n    dir: AXIS_VECTORS[axisIdx],\n    origin: ball,\n  };\n\n  // select projection plane\n  const plane: Plane = {\n    normal: cameraRay.dir,\n    d: -vec3.dot(cameraRay.dir, ball),\n  };\n\n  // project click ray onto plane\n  const posNext_onPlane = planeRayIntersection(cameraRay, plane);\n  let posNext = projectPointOntoRay(moveRay, posNext_onPlane);\n  // console.log(plane.normal);\n\n  const correction = gizmoClickPosCorrection;\n  posNext = vec3.addScaled(posNext, moveRay.dir, -correction);\n\n  // apply move\n  ball[axisIdx] = posNext[axisIdx];\n}\n\nfunction checkGizmoHover(\n  cameraRay: Ray,\n  out_clickedGizmoPoint: Vec3\n): GizmoAxisIdx {\n  const { lineWidth, hoverPadding } = CONFIG.colliderGizmo;\n\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  let closestAxisIdx: GizmoAxisIdx = 0;\n\n  // find closest axis\n  AXIS_VECTORS.forEach((axisVec, axisIdx) => {\n    const [lineStartWS, lineEndWS] = getAxisRenderedPoints(axisVec);\n    const distance = Math.min(\n      pointToRayDistance(cameraRay, lineStartWS),\n      pointToRayDistance(cameraRay, lineEndWS)\n    );\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      // deno-lint-ignore no-explicit-any\n      closestAxisIdx = axisIdx as any;\n    }\n  });\n\n  // check if the mouse is close enough to the axis\n  // console.log('closestAxis', { closestAxis }, mousePx);\n  const axisVec = AXIS_VECTORS[closestAxisIdx];\n  const [lineStartWS, lineEndWS] = getAxisRenderedPoints(axisVec);\n  const closestAxisGizmoPoint = findClosestPointOnSegment(\n    cameraRay,\n    lineStartWS,\n    lineEndWS\n  );\n  const dist = pointToRayDistance(cameraRay, closestAxisGizmoPoint);\n  const hoverMargin = lineWidth * hoverPadding;\n  if (dist < hoverMargin) {\n    vec3.copy(closestAxisGizmoPoint, out_clickedGizmoPoint);\n    return closestAxisIdx;\n  } else {\n    return GizmoAxis.NONE;\n  }\n}\n\nfunction updateHoverState(activeAxis: GizmoAxisIdx) {\n  // console.log('Axis', closestAxisIdx, dist);\n  if (activeAxis === GizmoAxis.NONE) {\n    CONFIG.colliderGizmo.activeAxis = GizmoAxis.NONE;\n    setCursor('default');\n  } else {\n    CONFIG.colliderGizmo.activeAxis = HOVERED_AXIS[activeAxis];\n    setCursor('grab');\n  }\n}\n\n/** calc axis gizmo sample points (world space) */\nfunction getAxisRenderedPoints(axisVec: Vec3) {\n  const { lineLength } = CONFIG.colliderGizmo;\n  const colSphereWS = CONFIG.hairSimulation.collisionSphere;\n\n  const lineStartWS = vec3.addScaled(\n    colSphereWS,\n    axisVec,\n    GIZMO_TO_BALL_DISTANCE,\n    TMP_LINE_START\n  );\n  const lineEndWS = vec3.addScaled(\n    lineStartWS,\n    axisVec,\n    lineLength,\n    TMP_LINE_END\n  );\n  return [lineStartWS, lineEndWS];\n}\n", "import { GpuProfilerResult } from '../gpuProfiler.ts';\nimport { showHtmlEl } from '../sys_web/htmlUtils.ts';\n\nexport function onGpuProfilerResult(result: GpuProfilerResult) {\n  console.log('Profiler:', result);\n  const parentEl = document.getElementById('profiler-results')!;\n  parentEl.innerHTML = '';\n  // deno-lint-ignore no-explicit-any\n  showHtmlEl(parentEl.parentNode as any);\n\n  const mergeByName: Record<string, number> = {};\n  const names = new Set<string>();\n  result.forEach(([name, timeMs]) => {\n    const t = mergeByName[name] || 0;\n    mergeByName[name] = t + timeMs;\n    names.add(name);\n  });\n\n  let totalMs = 0;\n  names.forEach((name) => {\n    const timeMs = mergeByName[name];\n    const li = document.createElement('li');\n    li.innerHTML = `${name}: ${timeMs.toFixed(2)}ms`;\n    parentEl.appendChild(li);\n    totalMs += timeMs;\n  });\n\n  const li = document.createElement('li');\n  li.innerHTML = `--- TOTAL: ${totalMs.toFixed(2)}ms ---`;\n  parentEl.appendChild(li);\n}\n", "import { createGpuDevice } from './utils/webgpu.ts';\nimport { createInputHandler } from './sys_web/input.ts';\nimport { Renderer } from './renderer.ts';\nimport { STATS } from './stats.ts';\nimport { initializeGUI } from './sys_web/gui.ts';\nimport { GpuProfiler } from './gpuProfiler.ts';\nimport { initCanvasResizeSystem } from './sys_web/cavasResize.ts';\nimport { CONFIG, MILISECONDS_TO_SECONDS } from './constants.ts';\nimport { createErrorSystem } from './utils/errors.ts';\nimport { showHtmlEl, hideHtmlEl } from './sys_web/htmlUtils.ts';\nimport { Scene } from './scene/scene.ts';\nimport { loadScene } from './scene/loadScene.ts';\nimport { createGizmoController } from './sys_web/gizmo.ts';\nimport { onGpuProfilerResult } from './sys_web/onGpuProfilerResult.ts';\n\n(async function () {\n  // deno-lint-ignore no-explicit-any\n  (globalThis as any)._config = CONFIG;\n  // CONFIG.hairRender.lodRenderPercent = 20;\n  // console.warn(`Setting hair render% to ${CONFIG.hairRender.lodRenderPercent}`); // prettier-ignore\n\n  // GPUDevice\n  const device = await createGpuDevice();\n  if (!device) {\n    showErrorMessage();\n    return;\n  }\n  const errorSystem = createErrorSystem(device);\n  errorSystem.startErrorScope('init');\n\n  // create canvas\n  const PREFERRED_CANVAS_FORMAT = navigator.gpu.getPreferredCanvasFormat();\n  const [canvas, canvasContext] = getCanvasContext(\n    '#gpu-canvas',\n    device,\n    PREFERRED_CANVAS_FORMAT\n  );\n  const canvasResizeSystem = initCanvasResizeSystem(canvas, canvasContext);\n\n  // input\n  const getInputState = createInputHandler(window, canvas);\n\n  // scene load\n  const scene: Scene = await loadScene(device);\n\n  // renderer setup\n  const profiler = new GpuProfiler(device);\n  const renderer = new Renderer(\n    device,\n    canvasResizeSystem.getViewportSize(),\n    PREFERRED_CANVAS_FORMAT,\n    profiler\n  );\n  canvasResizeSystem.addListener(renderer.onCanvasResize);\n\n  initializeGUI(device, profiler, scene, renderer.cameraCtrl);\n  const gizmoCtrl = createGizmoController();\n  STATS.show();\n  let done = false;\n\n  // init ended, report errors\n  let lastError = await errorSystem.reportErrorScopeAsync();\n  if (lastError) {\n    showErrorMessage(lastError);\n    return;\n  }\n\n  // stuff before first frame\n  errorSystem.startErrorScope('beforeFirstFrame');\n  renderer.beforeFirstFrame(scene);\n  lastError = await errorSystem.reportErrorScopeAsync();\n  if (lastError) {\n    showErrorMessage(lastError);\n    return;\n  }\n\n  const mainCmdBufDesc: GPUCommandEncoderDescriptor = {\n    label: 'main-frame-cmd-buffer',\n  };\n\n  // frame callback\n  const frame = () => {\n    errorSystem.startErrorScope('frame');\n\n    STATS.onEndFrame();\n    STATS.onBeginFrame();\n    profiler.beginFrame();\n    const deltaTime = STATS.deltaTimeMS * MILISECONDS_TO_SECONDS;\n\n    canvasResizeSystem.revalidateCanvasSize();\n\n    const inputState = getInputState();\n    const inputHandled = gizmoCtrl(\n      inputState,\n      canvasResizeSystem.getViewportSize(),\n      renderer.viewMatrix,\n      renderer.projectionMat\n    );\n    if (!inputHandled) {\n      renderer.updateCamera(deltaTime, inputState);\n    }\n\n    // record commands\n    const cmdBuf = device.createCommandEncoder(mainCmdBufDesc);\n    const screenTexture = canvasResizeSystem.getScreenTextureView();\n    renderer.cmdRender(cmdBuf, scene, screenTexture);\n\n    // submit commands\n    profiler.endFrame(cmdBuf);\n    device.queue.submit([cmdBuf.finish()]);\n\n    profiler.scheduleRaportIfNeededAsync(onGpuProfilerResult);\n\n    // frame end\n    if (!done) {\n      errorSystem.reportErrorScopeAsync(onRenderFrameError); // not awaited!\n\n      requestAnimationFrame(frame);\n    }\n  };\n\n  // start rendering\n  requestAnimationFrame(frame);\n\n  function onRenderFrameError(lastError: string): never {\n    showErrorMessage(lastError);\n    done = true;\n    throw new Error(lastError);\n  }\n})();\n\nfunction getCanvasContext(\n  selector: string,\n  device: GPUDevice,\n  canvasFormat: string\n): [HTMLCanvasElement, CanvasRenderingContext2D] {\n  const canvas: HTMLCanvasElement = document.querySelector(selector)!;\n  // deno-lint-ignore no-explicit-any\n  const context: any = canvas.getContext('webgpu')!;\n\n  // const devicePixelRatio = window.devicePixelRatio;\n  // canvas.width = canvas.clientWidth * devicePixelRatio;\n  // canvas.height = canvas.clientHeight * devicePixelRatio;\n\n  context.configure({\n    device,\n    format: canvasFormat,\n    alphaMode: 'premultiplied',\n  });\n  return [canvas, context];\n}\n\nfunction showErrorMessage(msg?: string) {\n  hideHtmlEl(document.getElementById('gpu-canvas'));\n  showHtmlEl(document.getElementById('no-webgpu'), 'flex');\n  if (msg) {\n    document.getElementById('error-msg')!.textContent = msg;\n  }\n}\n"],
  "mappings": "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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAu7vB,CAAC,EAAE,gBAIvhwB,SAAS,OAAO,oBAAoB,oBAAoB,CAAC,aAAa,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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",
  "names": ["require_webgl_obj_loader_min", "__commonJSMin", "e", "t", "a", "s", "dgr2rad", "dgr", "getClassName", "a", "getTypeName", "clamp", "x", "min", "max", "debounce", "callback", "wait", "timer", "args", "sphericalToCartesian", "phi", "theta", "angleUnits", "result", "dgr2rad", "divideCeil", "a", "b", "BYTES_UNITS", "getBytes", "unit", "i", "unitVal", "textFileReader_Web", "filename", "objFileResp", "binaryFileReader_Web", "createTextureFromFile_Web", "device", "path", "format", "usage", "response", "imageBitmap", "texture", "BYTES_U8", "BYTES_F32", "BYTES_U32", "BYTES_U64", "BYTES_VEC2", "BYTES_VEC3", "BYTES_VEC4", "BYTES_UVEC2", "BYTES_UVEC4", "BYTES_U8_VEC4", "BYTES_MAT4", "NANO_TO_MILISECONDS", "MILISECONDS_TO_SECONDS", "CO_PER_VERTEX", "VERTS_IN_TRIANGLE", "IS_DENO", "IS_WGPU", "IS_DENO", "MODELS_DIR", "DEPTH_FORMAT", "HDR_RENDER_TEX_FORMAT", "NORMALS_TEX_FORMAT", "AO_TEX_FORMAT", "AXIS_Y", "DISPLAY_MODE", "GizmoAxis", "GridDebugValue", "CONFIG", "textFileReader_Web", "binaryFileReader_Web", "createTextureFromFile_Web", "col", "colorU8", "b", "createArray", "len", "copyToTypedArray", "TypedArrayClass", "data", "result", "e", "idx", "ensureTypedArray", "FORCE_DISABLE_GPU_TIMINGS", "IS_DENO", "MAX_QUERY_COUNT", "QUERIES_PER_PASS", "TOTAL_MAX_QUERIES", "getProfilerTimestamp", "getDeltaFromTimestampMS", "start", "GpuProfiler", "device", "BYTES_U64", "enabled", "cmdBuf", "queryCount", "onResult", "scopeNames", "times", "result", "gpuTimes", "name", "type", "cpuTime", "idx", "time", "end", "NANO_TO_MILISECONDS", "queryId", "now", "token", "el", "_", "_2", "isHtmlElVisible", "el", "showHtmlEl", "display", "hideHtmlEl", "AvailableStats", "DELTA_SMOOTHING", "UPDATE_FREQ_MS", "Stats", "getProfilerTimestamp", "name", "value", "showHtmlEl", "frameEnd", "fps", "TAB", "name_", "opts", "statsChildrenEls", "el", "shownValue", "text", "els", "STATS_ATTR", "nextVisible", "isHtmlElVisible", "hideHtmlEl", "STATS", "formatBytes", "bytes", "decimals", "units", "k", "formatNumber", "num", "sign", "i", "v", "formatPercentageNumber", "actual", "total", "percent", "ENTRIES_PER_PROCESSOR", "CONFIG", "SLICE_HEADS_MEMORY", "getLocalMemoryRequirements", "BYTES_U32", "SHARED_UTILS", "BUFFER_HAIR_SLICES_HEADS_GLOBAL", "bindingIdx", "access", "LOCAL_MEMORY_ACCESS", "BUFFER_HAIR_SLICES_HEADS_LOCAL", "_bindingIdx", "_access", "BUFFER_HAIR_SLICES_HEADS", "createHairSlicesHeadsBuffer_GLOBAL", "device", "size", "calcMemoryReqs", "createHairSlicesHeadsBuffer_LOCAL", "_device", "grSize", "sliceHeadsMemory", "createHairSlicesHeadsBuffer", "tileSize", "slicesPerPixel", "processorCount", "entriesPerProcessor", "entries", "bytesPerEntry", "WEBGPU_MINIMAL_BUFFER_SIZE", "memRegionName", "STATS", "formatBytes", "WEBGPU_MINIMAL_BUFFER_SIZE", "createGpuDevice", "adapter", "onError", "msg", "canTimestamp", "requiredFeatures", "requiredLimits", "CONFIG", "getBytes", "getLocalMemoryRequirements", "device", "e", "createGPUBuffer", "label", "usage", "data", "gpuBuffer", "createGPU_VertexBuffer", "extraUsage", "dataTypedArr", "ensureTypedArray", "createGPU_IndexBuffer", "createGPU_StorageBuffer", "clName", "getClassName", "getItemsPerThread", "divideCeil", "u32_type", "access", "i32_type", "bindBuffer", "idx", "buffer", "isGPUTextureView", "maybeTexView", "getClassName", "assertIsGPUTextureView", "getTypeName", "Key", "createMockInputState", "createInputHandler", "window", "canvas", "directions", "mouse", "setDigital", "e", "value", "out", "EPSILON", "VecType", "setDefaultType", "ctor", "oldType", "create", "x", "y", "dst", "z", "fromValues", "set", "ceil", "v", "floor", "round", "clamp", "min", "max", "add", "a", "b", "addScaled", "scale", "angle", "ax", "ay", "bx", "by", "mag1", "mag2", "mag", "cosine", "dot", "subtract", "sub", "equalsApproximately", "utils.EPSILON", "equals", "lerp", "t", "lerpV", "mulScalar", "k", "divScalar", "inverse", "invert", "cross", "Vec3Type", "length", "v0", "v1", "len", "lengthSq", "lenSq", "distance", "dx", "dy", "dist", "distanceSq", "distSq", "normalize", "negate", "copy", "clone", "multiply", "mul", "divide", "div", "random", "zero", "transformMat4", "m", "transformMat3", "rotate", "rad", "p0", "p1", "sinC", "cosC", "setLength", "truncate", "maxLen", "midpoint", "ctorMap", "newMat3", "fromValues", "create", "set", "x", "y", "z", "dst", "VecType", "ceil", "v", "floor", "round", "clamp", "min", "max", "add", "a", "b", "addScaled", "scale", "angle", "ax", "ay", "az", "bx", "by", "bz", "mag1", "mag2", "mag", "cosine", "dot", "subtract", "sub", "equalsApproximately", "utils.EPSILON", "equals", "lerp", "t", "lerpV", "mulScalar", "k", "divScalar", "inverse", "invert", "cross", "t1", "t2", "length", "v0", "v1", "v2", "len", "lengthSq", "lenSq", "distance", "dx", "dy", "dz", "dist", "distanceSq", "distSq", "normalize", "negate", "copy", "clone", "multiply", "mul", "divide", "div", "random", "zScale", "zero", "transformMat4", "m", "w", "transformMat4Upper3x3", "transformMat3", "transformQuat", "q", "qx", "qy", "qz", "w2", "uvX", "uvY", "uvZ", "getTranslation", "getAxis", "axis", "off", "getScaling", "xx", "xy", "xz", "yx", "yy", "yz", "zx", "zy", "zz", "rotateX", "rad", "p", "r", "rotateY", "rotateZ", "setLength", "truncate", "maxLen", "midpoint", "MatType", "setDefaultType", "ctor", "oldType", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "fromMat3", "m3", "fromQuat", "x2", "y2", "z2", "wx", "wy", "wz", "identity", "transpose", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "tmp0", "tmp1", "tmp2", "tmp3", "tmp4", "tmp5", "tmp6", "tmp7", "tmp8", "tmp9", "tmp10", "tmp11", "tmp12", "tmp13", "tmp14", "tmp15", "tmp16", "tmp17", "tmp18", "tmp19", "tmp20", "tmp21", "tmp22", "tmp23", "t0", "t3", "d", "determinant", "a00", "a01", "a02", "a03", "a10", "a11", "a12", "a13", "a20", "a21", "a22", "a23", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b10", "b11", "b12", "b13", "b20", "b21", "b22", "b23", "b30", "b31", "b32", "b33", "setTranslation", "vec3.create", "setAxis", "perspective", "fieldOfViewYInRadians", "aspect", "zNear", "zFar", "f", "rangeInv", "perspectiveReverseZ", "ortho", "left", "right", "bottom", "top", "near", "far", "frustum", "frustumReverseZ", "xAxis", "yAxis", "zAxis", "aim", "position", "target", "up", "vec3.normalize", "vec3.subtract", "vec3.cross", "cameraAim", "eye", "lookAt", "translation", "translate", "rotationX", "angleInRadians", "c", "s", "rotationY", "rotationZ", "axisRotation", "n", "oneMinusCosine", "rotation", "axisRotate", "r00", "r01", "r02", "r10", "r11", "r12", "r20", "r21", "r22", "rotate", "scaling", "uniformScaling", "uniformScale", "VecType", "setDefaultType", "ctor", "oldType", "create", "x", "y", "z", "w", "dst", "fromValues", "set", "ceil", "v", "floor", "round", "clamp", "min", "max", "add", "a", "b", "addScaled", "scale", "subtract", "sub", "equalsApproximately", "utils.EPSILON", "equals", "lerp", "t", "lerpV", "mulScalar", "k", "divScalar", "inverse", "invert", "dot", "length", "v0", "v1", "v2", "v3", "len", "lengthSq", "lenSq", "distance", "dx", "dy", "dz", "dw", "dist", "distanceSq", "distSq", "normalize", "negate", "copy", "clone", "multiply", "mul", "divide", "div", "zero", "transformMat4", "m", "setLength", "truncate", "maxLen", "midpoint", "TypedArrayView", "buffer", "byteOffset", "byteSize", "idx", "bytesCount", "nextValidSize", "divideCeil", "padddingU32s", "BYTES_U32", "mat", "i", "arr", "v", "offset", "BYTES_F32", "device", "gpuBuffer", "gpuOffset", "storeTileDepth", "getTileDepth", "BUFFER_HAIR_TILES_RESULT", "bindingIdx", "access", "u32_type", "getTileCount", "viewportSize", "tileSize", "CONFIG", "divideCeil", "createHairTilesResultBuffer", "device", "TILE_DEPTH_BINS_COUNT", "tileCount", "STATS", "entries", "bytesPerEntry", "BYTES_U32", "size", "formatBytes", "extraUsage", "storeTileSegment", "getTileSegment", "BUFFER_HAIR_TILE_SEGMENTS", "bindingIdx", "access", "u32_type", "getLengthOfHairTileSegmentsBuffer", "viewportSize", "tileCount", "getTileCount", "CONFIG", "createHairTileSegmentsBuffer", "device", "entries", "bytesPerEntry", "BYTES_U32", "size", "WEBGPU_MINIMAL_BUFFER_SIZE", "STATS", "formatBytes", "extraUsage", "createCameraProjectionMat", "camera", "viewportSize", "aspectRatio", "mat4Impl", "dgr2rad", "getViewProjectionMatrix", "viewMat", "projMat", "result", "getModelViewProjectionMatrix", "modelMat", "projectPoint", "mvpMatrix", "p", "v", "vec4Impl", "projectPointWithPerspDiv", "result2", "TMP_PROJ", "mat4Impl", "TMP_VIEW", "TMP_MODEL_VIEW", "TMP_VEC3", "vec3Impl", "TMP_VEC4", "vec4Impl", "getShadowSourceWorldPosition", "src", "CONFIG", "pos", "sphericalToCartesian", "getShadowSourceViewMatrix", "modelMatrix", "target", "projectPoint", "AXIS_Y", "SAFETY_MARGIN", "BIG_NUMBER", "getShadowSourceProjectionMatrix", "viewMatrix", "scene", "mvMat", "left", "right", "bottom", "top", "near", "far", "addBoundSphere", "s", "spOBJ", "sphVP", "o", "MAX_PREVIEW_SIZE", "getShadowMapPreviewSize", "viewportSize", "SDFCollider", "name", "bounds", "dims", "texture", "textureView", "sampler", "CONFIG", "assertIsGPUTextureView", "boundsMin", "boundsMax", "size", "vec3Impl", "cellSize", "BYTES_VEC4", "bindingIdx", "samplerBindingIdx", "dataView", "c", "mod", "calculateBounds", "vertices", "indices", "box", "calcBoundingBoxIndex", "calcBoundingBox", "calcBoundingSphere", "yieldVertices", "stride", "CO_PER_VERTEX", "cb", "vertCount", "v", "i", "offset", "yieldVerticesIndex", "VERTS_IN_TRIANGLE", "boundsCalculator", "maxCo", "minCo", "co", "results", "addVert", "calcBoundingSphere", "minCo", "maxCo", "center", "vec3Impl", "radius", "scaleBoundingBox", "bb", "scale", "boundsMin", "boundsMax", "center", "vec3Impl", "v", "scaledV", "GRID_FLOAT_TO_U32_MUL", "GRID_UTILS", "CONFIG", "GridData", "BYTES_VEC4", "device", "bounds_", "scaleBoundingBox", "CONFIG", "dims", "boundsMin", "boundsMax", "size", "vec3Impl", "cellSize", "cellCount", "createPhysicsForcesBuffer", "cmdBuf", "bindingIdx", "bindBuffer", "v", "GridDebugValue", "dataView", "c", "name", "entriesCnt", "WEBGPU_MINIMAL_BUFFER_SIZE", "data", "f32_2_i32", "x", "GRID_FLOAT_TO_U32_MUL", "z", "y", "idx", "result", "createGPU_StorageBuffer", "STATS", "formatBytes", "TMP_MAT4", "mat4Impl", "TMP_MAT4_2", "RenderUniformsBuffer", "_RenderUniformsBuffer", "bindingIdx", "DISPLAY_MODE", "SDFCollider", "GridData", "BYTES_VEC4", "BYTES_MAT4", "BYTES_UVEC4", "BYTES_F32", "device", "TypedArrayView", "ctx", "vpMatrix", "viewMatrix", "projMatrix", "viewport", "cameraPositionWorldSpace", "scene", "modelMatrix", "c", "CONFIG", "col", "camPos", "getModelViewProjectionMatrix", "colSph", "r", "traMat", "colSphMat", "getShadowMapPreviewSize", "getLengthOfHairTileSegmentsBuffer", "l", "pos", "sphericalToCartesian", "TMP_VEC3", "dist", "viewMat", "getShadowSourceViewMatrix", "projMat", "getShadowSourceProjectionMatrix", "mvMat", "mvpMatrix", "shadowPos", "getShadowSourceWorldPosition", "fiberRadius", "str", "m", "bg", "hr", "extraData", "vec3Impl", "ANGLE_90_DRG_IN_RAD", "ANGLE_UP_DOWN", "ANGLE_LEFT_RIGHT", "Camera", "mat4Impl", "options", "CONFIG", "deltaTime", "input", "sign", "positive", "negative", "cfg", "digital", "m", "moveDir", "rotMatrixInv", "moveDirLocal", "projectPoint", "vec3Impl", "yaw", "pitch", "safeAngle", "clamp", "fmt", "x", "p", "STATS", "angles", "result", "rotMat", "pos", "FULLSCREEN_TRIANGLE_POSITION", "cmdDrawFullscreenTriangle", "renderPass", "BindingsCache", "key", "factory", "cachedVal", "val", "createLabel", "pass", "name", "labelShader", "labelPipeline", "labelUniformBindings", "PIPELINE_PRIMITIVE_TRIANGLE_LIST", "PIPELINE_DEPTH_ON", "DEPTH_FORMAT", "assignResourcesToBindings", "device", "pipeline", "entries", "assignResourcesToBindings2", "uniformsLayout", "useColorAttachment", "colorTexture", "clearColor", "loadOp", "storeOp", "assertIsGPUTextureView", "useDepthStencilAttachment", "depthTexture", "depthLoadOp", "depthStoreOp", "SNIPPET_ACES", "SNIPPET_DITHER", "IS_WGPU", "CAMERA_CFG", "CONFIG", "LINEAR_DEPTH", "MAT4", "GET_MVP_MAT", "NORMALS_UTILS", "GENERIC_UTILS", "TEXTURE_AO", "binding", "SHADER_PARAMS", "b", "SHADER_CODE", "FULLSCREEN_TRIANGLE_POSITION", "SNIPPET_DITHER", "SNIPPET_ACES", "LINEAR_DEPTH", "GENERIC_UTILS", "NORMALS_UTILS", "RenderUniformsBuffer", "TEXTURE_AO", "SHADER_PARAMS", "b", "SHADER_CODE", "FULLSCREEN_TRIANGLE_POSITION", "RenderUniformsBuffer", "CONFIG", "LABEL_DBG_SHADOW_MAP", "PresentPass", "_PresentPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "label", "labelPipeline", "ctx", "screenTexture", "loadOp", "cmdBuf", "profiler", "assertIsGPUTextureView", "renderPass", "useColorAttachment", "CONFIG", "bindings", "cmdDrawFullscreenTriangle", "globalUniforms", "hdrRenderTexture", "normalsTexture", "depthTexture", "aoTexture", "b", "SHADER_PARAMS", "assignResourcesToBindings", "viewport", "pipeline", "size", "getShadowMapPreviewSize", "pos", "x", "y", "shadowDepthTexture", "assignResourcesToBindings2", "VERTEX_ATTRIBUTE_POSITION", "BYTES_VEC3", "VERTEX_ATTRIBUTES", "BYTES_VEC2", "SNIPPET_SHADING_PBR_UTILS", "SNIPPET_SHADING_PBR", "SAMPLE_SHADOW_MAP", "b", "createShadowSampler", "device", "SHADER_PARAMS", "DEFAULT_COLOR", "c", "b", "SHADER_CODE", "GET_MVP_MAT", "GENERIC_UTILS", "NORMALS_UTILS", "SNIPPET_SHADING_PBR", "SAMPLE_SHADOW_MAP", "RenderUniformsBuffer", "TEXTURE_AO", "DrawMeshesPass", "_DrawMeshesPass", "BindingsCache", "device", "outTextureFormat", "normalsTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "VERTEX_ATTRIBUTES", "PIPELINE_PRIMITIVE_TRIANGLE_LIST", "PIPELINE_DEPTH_ON", "ctx", "cmdBuf", "profiler", "depthTexture", "hdrRenderTexture", "normalsTexture", "scene", "renderPass", "useColorAttachment", "CONFIG", "useDepthStencilAttachment", "object", "bindings", "vertexCount", "VERTS_IN_TRIANGLE", "firstInstance", "SHADER_PARAMS", "globalUniforms", "shadowDepthTexture", "shadowMapSampler", "aoTexture", "b", "assertIsGPUTextureView", "assignResourcesToBindings2", "SNIPPET_NOISE", "SHADER_PARAMS", "b", "SHADER_CODE", "FULLSCREEN_TRIANGLE_POSITION", "SNIPPET_NOISE", "RenderUniformsBuffer", "DrawBackgroundGradientPass", "_DrawBackgroundGradientPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "cmdBuf", "profiler", "hdrRenderTexture", "assertIsGPUTextureView", "renderPass", "useColorAttachment", "CONFIG", "bindings", "cmdDrawFullscreenTriangle", "globalUniforms", "b", "SHADER_PARAMS", "assignResourcesToBindings", "getHairTriangleCount", "numHairStrands", "numVerticesPerStrand", "iCount", "createHairIndexBuffer", "device", "name", "tfxData", "idxElements", "idxCpu", "id", "i", "j", "idxData", "createGPU_IndexBuffer", "BUFFER_HAIR_DATA", "bindingIdx", "createHairDataBuffer", "device", "name", "tfxData", "boundingSphere", "BYTES", "WEBGPU_MINIMAL_BUFFER_SIZE", "data", "dataView", "TypedArrayView", "createGPU_StorageBuffer", "BUFFER_HAIR_POINTS_POSITIONS_R", "bindingIdx", "opts", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_POINTS_POSITIONS_RW", "createHairPointsPositionsBuffer", "device", "name", "positions", "extraUsage", "createGPU_StorageBuffer", "setShadingPoint", "BUFFER_HAIR_SHADING", "bindingIdx", "access", "CONFIG", "createHairShadingBuffer", "device", "name", "tfxFile", "numHairStrands", "shadingPoints", "gradient", "createArray", "_", "i", "p", "data", "createGPU_StorageBuffer", "BUFFER_HAIR_TANGENTS", "bindingIdx", "subtractNorm", "a", "b", "c", "vec3Impl", "createHairTangentsBuffer", "device", "name", "tfxFile", "vertexPositions", "numHairStrands", "numVerticesPerStrand", "tangents", "getVertexPos", "idx", "setTangent", "t", "iStrand", "indexRootVertMaster", "i", "k", "vert", "vertNext", "tangent", "createGPU_StorageBuffer", "HW_RASTERIZE_HAIR", "SHADER_PARAMS", "b", "SHADER_CODE", "GET_MVP_MAT", "NORMALS_UTILS", "GENERIC_UTILS", "HW_RASTERIZE_HAIR", "RenderUniformsBuffer", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_TANGENTS", "BUFFER_HAIR_DATA", "BUFFER_HAIR_SHADING", "HwHairPass", "_HwHairPass", "BindingsCache", "device", "outTextureFormat", "normalsTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "pipelineDesc", "labelPipeline", "PIPELINE_DEPTH_ON", "ctx", "cmdBuf", "profiler", "depthTexture", "hdrRenderTexture", "normalsTexture", "scene", "renderPass", "useColorAttachment", "CONFIG", "useDepthStencilAttachment", "hairObject", "bindings", "renderedStrandCnt", "vertexCount", "getHairTriangleCount", "VERTS_IN_TRIANGLE", "globalUniforms", "object", "b", "SHADER_PARAMS", "assignResourcesToBindings2", "SW_RASTERIZE_HAIR", "SHADER_TILE_UTILS", "CONFIG", "SHADER_PARAMS", "c", "b", "SHADER_CODE", "GET_MVP_MAT", "GENERIC_UTILS", "SW_RASTERIZE_HAIR", "SHADER_TILE_UTILS", "RenderUniformsBuffer", "BUFFER_HAIR_DATA", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_TANGENTS", "BUFFER_HAIR_TILES_RESULT", "BUFFER_HAIR_TILE_SEGMENTS", "CONFIG", "HairTilesPass", "_HairTilesPass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "BYTES_U32", "viewportSize", "createHairTilesResultBuffer", "createHairTileSegmentsBuffer", "hairObject", "cmdBuf", "profiler", "computePass", "bindings", "workgroupsX", "getItemsPerThread", "SHADER_PARAMS", "workgroupsY", "globalUniforms", "depthTexture", "object", "b", "assertIsGPUTextureView", "assignResourcesToBindings2", "bindBuffer", "setRasterizerResult", "BUFFER_HAIR_RASTERIZER_RESULTS", "bindingIdx", "access", "u32_type", "createHairRasterizerResultsBuffer", "device", "viewportSize", "size", "BYTES_VEC4", "STATS", "formatBytes", "SHADER_PARAMS", "b", "SHADER_CODE", "FULLSCREEN_TRIANGLE_POSITION", "GENERIC_UTILS", "SHADER_TILE_UTILS", "RenderUniformsBuffer", "BUFFER_HAIR_TILES_RESULT", "BUFFER_HAIR_TILE_SEGMENTS", "BUFFER_HAIR_RASTERIZER_RESULTS", "HairCombinePass", "_HairCombinePass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "cmdBuf", "profiler", "hdrRenderTexture", "depthTexture", "assertIsGPUTextureView", "renderPass", "useColorAttachment", "CONFIG", "bindings", "cmdDrawFullscreenTriangle", "globalUniforms", "hairTilesBuffer", "hairTileSegmentsBuffer", "hairRasterizerResultsBuffer", "b", "SHADER_PARAMS", "assignResourcesToBindings", "bindBuffer", "cfgHair", "CONFIG", "SLICE_DATA_PER_PROCESSOR_COUNT", "BUFFER_HAIR_SLICES_DATA", "bindingIdx", "access", "createHairSlicesDataBuffer", "device", "processorCount", "entries", "bytesPerEntry", "BYTES_U32", "size", "WEBGPU_MINIMAL_BUFFER_SIZE", "STATS", "formatBytes", "SHADER_IMPL_PROCESS_HAIR_SEGMENT", "SHADER_IMPL_REDUCE_HAIR_SLICES", "SHADER_PARAMS", "CONFIG", "c", "b", "SHADER_CODE", "GET_MVP_MAT", "GENERIC_UTILS", "SHADER_TILE_UTILS", "SW_RASTERIZE_HAIR", "RenderUniformsBuffer", "BUFFER_HAIR_DATA", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_TANGENTS", "BUFFER_HAIR_TILES_RESULT", "BUFFER_HAIR_TILE_SEGMENTS", "BUFFER_HAIR_RASTERIZER_RESULTS", "BUFFER_HAIR_SLICES_HEADS", "BUFFER_HAIR_SLICES_DATA", "BUFFER_HAIR_SHADING", "SHADER_IMPL_PROCESS_HAIR_SEGMENT", "SHADER_IMPL_REDUCE_HAIR_SLICES", "HairFinePass", "_HairFinePass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "createHairSlicesHeadsBuffer", "createHairSlicesDataBuffer", "ctx", "viewportSize", "createHairRasterizerResultsBuffer", "hairObject", "cmdBuf", "profiler", "computePass", "bindings", "workgroupsX", "getItemsPerThread", "CONFIG", "SHADER_PARAMS", "object", "globalUniforms", "depthTexture", "hairTilesBuffer", "hairTileSegmentsBuffer", "b", "assertIsGPUTextureView", "entries", "bindBuffer", "assignResourcesToBindings2", "SHADER_CODE_MARSCHNER", "SHADER_PARAMS", "CONFIG", "c", "b", "SHADER_CODE", "GET_MVP_MAT", "GENERIC_UTILS", "SNIPPET_SHADING_PBR_UTILS", "SHADER_CODE_MARSCHNER", "SNIPPET_NOISE", "SAMPLE_SHADOW_MAP", "RenderUniformsBuffer", "BUFFER_HAIR_DATA", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_TANGENTS", "BUFFER_HAIR_SHADING", "TEXTURE_AO", "LINEAR_DEPTH", "HairShadingPass", "_HairShadingPass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "hairObject", "cmdBuf", "profiler", "computePass", "bindings", "workgroupsX", "getItemsPerThread", "SHADER_PARAMS", "workgroupsY", "CONFIG", "object", "globalUniforms", "shadowDepthTexture", "shadowMapSampler", "depthTexture", "aoTexture", "b", "assertIsGPUTextureView", "assignResourcesToBindings2", "SHADER_PARAMS", "b", "SHADER_CODE", "RenderUniformsBuffer", "SHADER_PARAMS", "b", "SHADER_CODE", "GET_MVP_MAT", "NORMALS_UTILS", "GENERIC_UTILS", "HW_RASTERIZE_HAIR", "RenderUniformsBuffer", "BUFFER_HAIR_POINTS_POSITIONS", "BUFFER_HAIR_TANGENTS", "ShadowMapPass", "_ShadowMapPass", "BindingsCache", "device", "createShadowSampler", "shaderModuleMeshes", "labelShader", "SHADER_CODE", "labelPipeline", "VERTEX_ATTRIBUTE_POSITION", "PIPELINE_PRIMITIVE_TRIANGLE_LIST", "PIPELINE_DEPTH_ON", "CONFIG", "shaderModuleHair", "pipelineDesc", "HwHairPass", "cfg", "ctx", "cmdBuf", "profiler", "shadowDepthTexture", "scene", "renderPass", "useDepthStencilAttachment", "bindings", "object", "hairObject", "vertexCount", "VERTS_IN_TRIANGLE", "globalUniforms", "b", "SHADER_PARAMS", "assignResourcesToBindings", "assignResourcesToBindings2", "CAMERA", "CONFIG", "VIEWPORT_HEIGHT_OVER_DISTANCE_TO_CAMERA", "dgr2rad", "GTAO_SNIPPET", "SHADER_PARAMS", "b", "SHADER_CODE", "FULLSCREEN_TRIANGLE_POSITION", "LINEAR_DEPTH", "GENERIC_UTILS", "NORMALS_UTILS", "GTAO_SNIPPET", "RenderUniformsBuffer", "CONFIG", "AoPass", "_AoPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "cmdBuf", "profiler", "aoTexture", "assertIsGPUTextureView", "renderPass", "useColorAttachment", "CONFIG", "bindings", "cmdDrawFullscreenTriangle", "globalUniforms", "hdrRenderTexture", "normalsTexture", "depthTexture", "b", "SHADER_PARAMS", "assignResourcesToBindings", "TMP_MODEL_MAT4_INV", "mat4Impl", "TMP_VEC4", "vec4Impl", "SimulationUniformsBuffer", "_SimulationUniformsBuffer", "bindingIdx", "SDFCollider", "GridData", "BYTES_MAT4", "BYTES_VEC4", "device", "WEBGPU_MINIMAL_BUFFER_SIZE", "TypedArrayView", "ctx", "modelMatrix", "c", "CONFIG", "modelMatInv", "colSph", "colSphPosWS", "colSphPosOS", "windDirWS", "sphericalToCartesian", "windDirOS", "BUFFER_HAIR_SEGMENT_LENGTHS", "bindingIdx", "createHairSegmentLengthsBuffer", "device", "name", "pointsPerStrand", "positions", "getPosition", "idx", "totalPoints", "lengthsF32", "i", "vec3Impl", "createGPU_StorageBuffer", "BUFFER_GRID_DENSITY_GRADIENT_AND_WIND", "bindingIdx", "access", "setterFn", "BUFFER_GRID_DENSITY_VELOCITY", "bindingIdx", "access", "i32_type", "gridRead", "gridWrite", "HAIR_SIM_IMPL_COLLISIONS", "HAIR_SIM_IMPL_CONSTRANTS", "HAIR_SIM_IMPL_INTEGRATION", "STRANDS_PER_WORKGROUP", "POINTS_PER_WORKGROUP", "CONFIG", "SHADER_PARAMS", "c", "b", "SHADER_CODE", "GENERIC_UTILS", "GRID_UTILS", "HAIR_SIM_IMPL_CONSTRANTS", "HAIR_SIM_IMPL_INTEGRATION", "HAIR_SIM_IMPL_COLLISIONS", "SimulationUniformsBuffer", "SDFCollider", "BUFFER_GRID_DENSITY_VELOCITY", "BUFFER_GRID_DENSITY_GRADIENT_AND_WIND", "BUFFER_HAIR_DATA", "BUFFER_HAIR_POINTS_POSITIONS_RW", "BUFFER_HAIR_POINTS_POSITIONS_R", "BUFFER_HAIR_SEGMENT_LENGTHS", "HairSimIntegrationPass", "_HairSimIntegrationPass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "hairObject", "cmdBuf", "profiler", "computePass", "bindings", "workgroupsX", "getItemsPerThread", "SHADER_PARAMS", "simulationUniforms", "scene", "physicsForcesGrid", "b", "sdf", "assignResourcesToBindings2", "createDebugVolumePipeline", "device", "shaderModule", "outTextureFormat", "label", "PIPELINE_PRIMITIVE_TRIANGLE_LIST", "cmdDrawDbgVolumeQuad", "ctx", "pass", "pipeline", "bindings", "cmdBuf", "profiler", "hdrRenderTexture", "renderPass", "useColorAttachment", "CONFIG", "vertexCount", "VERTS_IN_TRIANGLE", "nagaFixIndexIntoConstArray", "arrayVarName", "arrayLen", "idxExpr", "exprFn", "createCaseStmt", "_", "i", "arrayVal", "defaultSt", "createArray", "assignValueFromConstArray", "newVarDecl", "varName", "varType", "x", "IS_WGPU", "switchStmt", "SHADER_PARAMS", "b", "SHADER_CODE", "RenderUniformsBuffer", "SDFCollider", "assignValueFromConstArray", "DrawSdfColliderPass", "_DrawSdfColliderPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "createDebugVolumePipeline", "labelPipeline", "ctx", "sdf", "bindings", "cmdDrawDbgVolumeQuad", "globalUniforms", "b", "SHADER_PARAMS", "assignResourcesToBindings", "SHADER_PARAMS", "b", "SHADER_CODE", "GENERIC_UTILS", "GRID_UTILS", "RenderUniformsBuffer", "BUFFER_GRID_DENSITY_VELOCITY", "BUFFER_GRID_DENSITY_GRADIENT_AND_WIND", "assignValueFromConstArray", "GridDebugValue", "DrawGridDbgPass", "_DrawGridDbgPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "createDebugVolumePipeline", "labelPipeline", "ctx", "bindings", "cmdDrawDbgVolumeQuad", "globalUniforms", "physicsForcesGrid", "b", "SHADER_PARAMS", "assignResourcesToBindings", "SHADER_PARAMS", "c", "b", "SHADER_CODE", "GENERIC_UTILS", "GRID_UTILS", "SimulationUniformsBuffer", "BUFFER_GRID_DENSITY_VELOCITY", "BUFFER_HAIR_DATA", "BUFFER_HAIR_POINTS_POSITIONS_R", "GridPostSimPass", "_GridPostSimPass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "hairObject", "cmdBuf", "profiler", "physicsForcesGrid", "computePass", "bindings", "workgroupsX", "getItemsPerThread", "SHADER_PARAMS", "simulationUniforms", "b", "assignResourcesToBindings2", "SHADER_PARAMS", "c", "b", "SHADER_CODE", "GENERIC_UTILS", "GRID_UTILS", "SimulationUniformsBuffer", "BUFFER_GRID_DENSITY_VELOCITY", "BUFFER_GRID_DENSITY_GRADIENT_AND_WIND", "SDFCollider", "GridPreSimPass", "_GridPreSimPass", "BindingsCache", "device", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "hairObject", "cmdBuf", "profiler", "physicsForcesGrid", "computePass", "bindings", "gridDims", "CONFIG", "threadsTotal", "workgroupsX", "getItemsPerThread", "SHADER_PARAMS", "simulationUniforms", "scene", "b", "sdf", "assignResourcesToBindings2", "SHADER_PARAMS", "b", "SHADER_CODE", "GET_MVP_MAT", "GENERIC_UTILS", "RenderUniformsBuffer", "CONFIG", "DrawGizmoPass", "_DrawGizmoPass", "BindingsCache", "device", "outTextureFormat", "shaderModule", "labelShader", "SHADER_CODE", "labelPipeline", "ctx", "cmdBuf", "profiler", "hdrRenderTexture", "renderPass", "useColorAttachment", "CONFIG", "bindings", "cfg", "axisIdx", "GizmoAxis", "globalUniforms", "b", "SHADER_PARAMS", "assignResourcesToBindings", "Renderer", "device", "viewportSize", "preferredCanvasFormat", "profiler", "Camera", "createCameraProjectionMat", "CONFIG", "RenderUniformsBuffer", "DrawBackgroundGradientPass", "HDR_RENDER_TEX_FORMAT", "ShadowMapPass", "AoPass", "AO_TEX_FORMAT", "DrawMeshesPass", "NORMALS_TEX_FORMAT", "DrawGizmoPass", "HwHairPass", "HairTilesPass", "HairShadingPass", "HairFinePass", "HairCombinePass", "PresentPass", "SimulationUniformsBuffer", "HairSimIntegrationPass", "GridPreSimPass", "GridPostSimPass", "DrawSdfColliderPass", "DrawGridDbgPass", "mat4Impl", "deltaTime", "input", "scene", "cmdBuf", "hairSimCfg", "ctx", "hairObject", "screenTexture", "assertIsGPUTextureView", "displayMode", "DISPLAY_MODE", "physicsForcesGrid", "vpMatrix", "getViewProjectionMatrix", "vpStr", "renderTargetUsages", "DEPTH_FORMAT", "aoSizeMul", "aoSize", "debounce", "colorToString", "color", "forceCSSHex", "colorFormat", "__state", "conversionName", "toString", "r", "Math", "round", "g", "b", "a", "h", "s", "toFixed", "v", "str", "hex", "length", "ARR_EACH", "Array", "prototype", "forEach", "ARR_SLICE", "slice", "Common", "target", "each", "call", "arguments", "obj", "keys", "isObject", "Object", "key", "isUndefined", "bind", "toCall", "args", "i", "apply", "itr", "scope", "l", "BREAK", "fnc", "func", "threshold", "callImmediately", "timeout", "delayed", "callNow", "setTimeout", "toArray", "undefined", "isNaN", "isArray", "constructor", "Function", "INTERPRETATIONS", "common", "isString", "original", "test", "match", "parseInt", "parseFloat", "isNumber", "result", "toReturn", "interpret", "family", "litmus", "conversions", "conversion", "read", "tmpComponent", "ColorMath", "hi", "floor", "f", "p", "q", "t", "c", "min", "max", "delta", "NaN", "hex_with_component", "componentIndex", "value", "Color", "Error", "write", "defineRGBComponent", "component", "componentHexIndex", "defineProperty", "space", "recalculateRGB", "defineHSVComponent", "recalculateHSV", "math", "component_from_hex", "extend", "hsv_to_rgb", "rgb_to_hsv", "COMPONENTS", "rgb_to_hex", "Controller", "object", "property", "initialValue", "domElement", "document", "createElement", "__onChange", "__onFinishChange", "newValue", "updateDisplay", "getValue", "EVENT_MAP", "EVENT_MAP_INV", "k", "e", "CSS_VALUE_PIXELS", "cssValueToPixels", "val", "isNull", "dom", "elem", "selectable", "style", "onselectstart", "MozUserSelect", "KhtmlUserSelect", "unselectable", "hor", "vert", "vertical", "horizontal", "position", "left", "right", "top", "bottom", "eventType", "pars", "aux", "params", "className", "evt", "createEvent", "clientX", "x", "clientY", "y", "initMouseEvent", "bubbles", "cancelable", "window", "clickCount", "init", "initKeyboardEvent", "initKeyEvent", "defaults", "ctrlKey", "altKey", "shiftKey", "metaKey", "keyCode", "charCode", "initEvent", "dispatchEvent", "event", "newBool", "bool", "addEventListener", "attachEvent", "removeEventListener", "detachEvent", "classes", "split", "indexOf", "push", "join", "replace", "removeAttribute", "index", "splice", "RegExp", "getComputedStyle", "width", "height", "el", "offset", "offsetParent", "offsetLeft", "offsetTop", "activeElement", "type", "href", "BooleanController", "_this", "__prev", "_this2", "__checkbox", "setAttribute", "onChange", "setValue", "appendChild", "checked", "OptionController", "opts", "options", "__select", "map", "element", "opt", "innerHTML", "desiredValue", "selectedIndex", "isActive", "StringController", "__input", "onBlur", "blur", "numDecimals", "_x", "NumberController", "_params", "__min", "__max", "__step", "step", "__impliedStep", "pow", "log", "abs", "LN10", "__precision", "_v", "minValue", "maxValue", "stepValue", "roundToDecimal", "decimals", "tenTo", "NumberControllerBox", "__truncationSuspended", "prevY", "attempted", "onFinish", "onMouseDrag", "diff", "onMouseUp", "unbind", "onMouseDown", "i1", "i2", "o1", "o2", "NumberControllerSlider", "__background", "__foreground", "onTouchStart", "addClass", "preventDefault", "bgRect", "getBoundingClientRect", "touches", "onTouchMove", "onTouchEnd", "pct", "FunctionController", "text", "__button", "fire", "ColorController", "__color", "__temp", "makeSelectable", "__selector", "__saturation_field", "__field_knob", "__field_knob_border", "__hue_knob", "__hue_field", "__input_textShadow", "removeClass", "valueField", "fieldDown", "fieldDownH", "setSV", "fieldUpSV", "setH", "fieldUpH", "toOriginal", "fieldRect", "_ref", "_ref2", "mismatch", "flip", "_flip", "toHexString", "marginTop", "vendors", "linearGradient", "background", "vendor", "cssText", "hueGradient", "css", "url", "indoc", "doc", "link", "rel", "getElementsByTagName", "cssContent", "injected", "head", "saveDialogContents", "ControllerFactory", "isFunction", "isBoolean", "requestAnimationFrame", "callback", "requestAnimationFrame$1", "webkitRequestAnimationFrame", "mozRequestAnimationFrame", "oRequestAnimationFrame", "msRequestAnimationFrame", "CenteredDiv", "backgroundElement", "makeFullscreen", "body", "hide", "display", "opacity", "webkitTransform", "layout", "defer", "innerWidth", "getWidth", "innerHeight", "getHeight", "inject", "styleSheet", "CSS_NAMESPACE", "HIDE_KEY_CODE", "CLOSE_BUTTON_HEIGHT", "DEFAULT_DEFAULT_PRESET_NAME", "SUPPORTS_LOCAL_STORAGE", "localStorage", "SAVE_DIALOGUE", "autoPlaceVirgin", "autoPlaceContainer", "hideableGuis", "GUI", "__ul", "__folders", "__controllers", "__rememberedObjects", "__rememberedObjectIndecesToControllers", "__listening", "DEFAULT_WIDTH", "autoPlace", "load", "preset", "parent", "hideable", "resizable", "scrollable", "useLocalStorage", "getItem", "getLocalStorageHash", "saveToLocalStorage", "titleRow", "defineProperties", "closeOnTop", "getRoot", "revert", "name", "closed", "CLASS_CLOSED", "onResize", "__closeButton", "TEXT_OPEN", "TEXT_CLOSED", "setItem", "CLASS_MAIN", "savedGui", "JSON", "parse", "CLASS_CLOSE_BUTTON", "CLASS_CLOSE_TOP", "insertBefore", "childNodes", "CLASS_CLOSE_BOTTOM", "titleRowName", "createTextNode", "addRow", "onClickTitle", "CLASS_AUTO_PLACE_CONTAINER", "CLASS_AUTO_PLACE", "__resizeHandler", "onResizeDebounced", "stringify", "getSaveObject", "saveToLocalStorageIfPossible", "resetWidth", "root", "toggleHide", "gui", "CLASS_CONTROLLER_ROW", "CLASS_TOO_TALL", "CLASS_DRAG", "_keydownHandler", "which", "add", "controller", "removeChild", "__li", "subfolder", "removeFolder", "newGuiParams", "folders", "li", "folder", "parentElement", "getOffset", "node", "__save_row", "__resize_handle", "offsetHeight", "debounce", "saveDialogueContents", "remembered", "getCurrentPreset", "presetName", "newDom", "liBefore", "removeListeners", "markPresetModified", "modified", "__preset_select", "augmentController", "__gui", "nextSibling", "nextElementSibling", "remove", "firstElementChild", "listen", "box", "method", "pc", "pb", "returned", "oldName", "wasListening", "newController", "compose", "fakeEvent", "stopPropagation", "borderLeftColor", "isModified", "recallSavedValue", "matchedIndex", "controllerMap", "presetMap", "factoryArgs", "concat", "before", "container", "_typeof", "location", "addPresetOption", "setSelected", "showHideExplain", "explain", "addSaveMenu", "div", "firstChild", "gears", "button", "button2", "button3", "select", "getElementById", "localStorageCheckBox", "saveLocally", "newConstructorTextArea", "show", "focus", "save", "prompt", "saveAs", "addResizeHandle", "pmouseX", "drag", "dragStop", "dragStart", "setWidth", "w", "useInitialValues", "savedValues", "setPresetSelectIndex", "updateDisplays", "controllerArray", "GUI", "GUIImport", "initializeGUI", "_device", "profiler", "scene", "camera", "gui", "GUI$1", "dummyObject", "CONFIG", "vec4Impl", "modeDummy", "createDummy", "DISPLAY_MODE", "modeCtrl", "addSceneFolder", "addHairRenderFolder", "addHairMaterialFolder", "addHairSimulationFolder", "addAmbientLightFolder", "addLightFolder", "addShadowsFolder", "addAoFolder", "addColorMgmt", "dir", "bg", "v", "mat4Impl", "dgr2rad", "addColorController", "cfg", "tileSegmentsCtrl", "slicesCtrl", "showTilesCtrl", "onDisplayModeChange", "mode", "setVisible", "sdf", "grid", "constr", "wind", "simDir", "gridValueDummy", "GridDebugValue", "lightObj", "name", "techniqueDummy", "obj", "prop", "dummy", "a", "ctrl", "isVisible", "parentEl", "key", "opts", "o", "e", "selectedLabel", "opt", "initCanvasResizeSystem", "canvas", "canvasContext", "sizeNow", "getViewportSize", "listeners", "revalidateCanvasSize", "f", "applyResize", "d", "l", "devicePixelRatio", "createErrorSystem", "device", "ERROR_SCOPES", "ERROR_SCOPES_REV", "currentScopeName", "startErrorScope", "reportErrorScopeAsync", "scopeName", "sc", "cb", "lastError", "name", "err", "msg", "oppositePositionsBufferIdx", "a", "HairObject", "name", "strandsCount", "pointsPerStrand", "bounds", "buffers", "pct", "clamp", "CONFIG", "result", "segmentCount", "STATS", "formatPercentageNumber", "segments", "cmdBuf", "initialPointsPositionsBuffer", "pointsPositionsBuffer_0", "pointsPositionsBuffer_1", "size", "bindingIdx", "positionsNowBufferIdx", "buffer", "bindBuffer", "renderPass", "parseHeader", "rawData", "version", "uints", "parseTfxFile", "fileData", "scale", "header", "posCount", "vertexPositions", "e", "objLoader", "Mesh", "getVertexCount", "mesh", "getIndexCount", "loadObjFile", "device", "name", "objText", "scale", "cleanupRawOBJData", "vertexCount", "triangleCount", "positions", "ensureTypedArray", "positionsBuffer", "createGPU_VertexBuffer", "normalsBuffer", "uvBuffer", "indexBuffer", "createGPU_IndexBuffer", "bounds", "calculateBounds", "hasNormals", "firstEl", "hasUVs", "e", "i", "v", "vertCnt", "createArray", "TEXTURE_FORMAT", "createSDFTexture", "device", "name", "dims", "data", "texSize", "tex", "BYTES_F32", "createSdfSampler", "createSdfColliderFromBinary", "device", "name", "data", "dims", "offset", "dataF32", "bounds", "distances", "expLen", "tex", "createSDFTexture", "texView", "sampler", "createSdfSampler", "SDFCollider", "OBJECTS", "SDF_COLLIDER_BIN", "loadScene", "device", "objects", "objDef", "objTextFile", "CONFIG", "MODELS_DIR", "result", "loadObjFile", "vec4Impl", "tfxFile", "loadTfxFile", "hairObject", "createHairObject", "STATS", "formatNumber", "sdfFileBin", "sdfCollider", "createSdfColliderFromBinary", "physicsGrid", "GridData", "modelMatrix", "mat4Impl", "dgr2rad", "name", "bBox", "calcBoundingBox", "bounds", "calcBoundingSphere", "dataBuffer", "createHairDataBuffer", "tangentsBuffer", "createHairTangentsBuffer", "shadingBuffer", "createHairShadingBuffer", "indicesData", "createHairIndexBuffer", "initialSegmentLengthsBuffer", "createHairSegmentLengthsBuffer", "createPosBuffer", "extraUsage", "createHairPointsPositionsBuffer", "initialPointsPositionsBuffer", "pointsPositionsBuffer_0", "pointsPositionsBuffer_1", "HairObject", "fileName", "scale", "fileBytes", "parseTfxFile", "TMP_VEC2", "vec2Impl", "TMP_VEC4_0", "vec4Impl", "TMP_VEC4_1", "TMP_MAT_4", "mat4Impl", "generateRayFromCamera", "viewport", "viewProjMat", "mousePosPx", "result", "mousePosNDC", "vpInverse", "p0", "p1", "rayOrigin", "projectPointWithPerspDiv", "rayEnd", "vec3Impl", "getPointAlongRay", "ray", "t", "projectPointOntoRay", "p", "p2", "dist", "TMP_VEC3_pointToRayDistance", "pointToRayDistance", "projected", "TMP_VEC3_left", "TMP_VEC3_right", "findClosestPointOnSegment", "lineStartWS", "lineEndWS", "iters", "left", "right", "i", "distLeft", "distRight", "TMP_VEC3", "vec3Impl", "planeRayIntersectionDistance", "ray", "plane", "nom", "denom", "planeRayIntersection", "result", "t", "getPointAlongRay", "AXIS_VEC_X", "vec3Impl", "AXIS_VEC_Y", "AXIS_VEC_Z", "AXIS_VECTORS", "HOVERED_AXIS", "GizmoAxis", "GIZMO_TO_BALL_DISTANCE", "CONFIG", "TMP_LINE_START", "vec4Impl", "TMP_LINE_END", "TMP_VIEW_PROJ_MAT", "mat4Impl", "TMP_CAMERA_RAY", "setCursor", "cursor", "createGizmoController", "cfg", "gizmoClickPosCorrection", "inputState", "viewportSize", "viewMatrix", "projMatrix", "nextIsDragging", "mousePx", "viewProjMat", "getViewProjectionMatrix", "cameraRay", "generateRayFromCamera", "applyDragMovement", "clickedGizmoPoint", "hoveredAxis", "checkGizmoHover", "updateHoverState", "colSphereWS", "ball", "axisIdx", "moveRay", "plane", "posNext_onPlane", "planeRayIntersection", "posNext", "projectPointOntoRay", "correction", "out_clickedGizmoPoint", "lineWidth", "hoverPadding", "closestDistance", "closestAxisIdx", "axisVec", "lineStartWS", "lineEndWS", "getAxisRenderedPoints", "distance", "pointToRayDistance", "closestAxisGizmoPoint", "findClosestPointOnSegment", "dist", "hoverMargin", "activeAxis", "lineLength", "onGpuProfilerResult", "result", "parentEl", "showHtmlEl", "mergeByName", "names", "name", "timeMs", "t", "totalMs", "li", "CONFIG", "device", "createGpuDevice", "showErrorMessage", "errorSystem", "createErrorSystem", "PREFERRED_CANVAS_FORMAT", "canvas", "canvasContext", "getCanvasContext", "canvasResizeSystem", "initCanvasResizeSystem", "getInputState", "createInputHandler", "scene", "loadScene", "profiler", "GpuProfiler", "renderer", "Renderer", "initializeGUI", "gizmoCtrl", "createGizmoController", "STATS", "done", "lastError", "mainCmdBufDesc", "frame", "deltaTime", "MILISECONDS_TO_SECONDS", "inputState", "cmdBuf", "screenTexture", "onGpuProfilerResult", "onRenderFrameError", "selector", "canvasFormat", "context", "msg", "hideHtmlEl", "showHtmlEl"]
}
